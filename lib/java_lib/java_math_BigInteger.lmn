//-----------------------------------------------------
// The following code was generated by class2module.pl 
// Mon Jan 15 21:52:25 2007
//-----------------------------------------------------
{module(java_math_BigInteger).
H=java_math_BigInteger.zero :- H=[:/*inline*/
	java.math.BigInteger r = java.math.BigInteger.ZERO;
	Atom res = mem.newAtom(new ObjectFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=java_math_BigInteger.one :- H=[:/*inline*/
	java.math.BigInteger r = java.math.BigInteger.ONE;
	Atom res = mem.newAtom(new ObjectFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=java_math_BigInteger.ten :- H=[:/*inline*/
	java.math.BigInteger r = java.math.BigInteger.TEN;
	Atom res = mem.newAtom(new ObjectFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=java_math_BigInteger.new(_0,_1) :- string(_0),int(_1) | H=[:/*inline*/
	java.lang.String v0 = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.math.BigInteger r = new java.math.BigInteger(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1),java_lang_Number.use,(java_lang_Number.use:-()).

H=java_math_BigInteger.new(_0) :- string(_0) | H=[:/*inline*/
	java.lang.String v0 = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	try {
		java.math.BigInteger r = new java.math.BigInteger(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0),java_lang_Number.use,(java_lang_Number.use:-()).

H=java_math_BigInteger.new(_0,_1) :- int(_0),class(_1,"java.util.Random") | H=[:/*inline*/
	int v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	java.util.Random v1 = (java.util.Random)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigInteger r = new java.math.BigInteger(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1),java_lang_Number.use,(java_lang_Number.use:-()).

H=java_math_BigInteger.new(_0,_1,_2) :- int(_0),int(_1),class(_2,"java.util.Random") | H=[:/*inline*/
	int v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	java.util.Random v2 = (java.util.Random)me.nthAtom(2).getFunctor().getValue();
	try {
		java.math.BigInteger r = new java.math.BigInteger(v0,v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 3);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2),java_lang_Number.use,(java_lang_Number.use:-()).

H=java_math_BigInteger.probablePrime(_0,_1) :- int(_0),class(_1,"java.util.Random") | H=[:/*inline*/
	int v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	java.util.Random v1 = (java.util.Random)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigInteger r = java.math.BigInteger.probablePrime(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=nextProbablePrime(_0,_1) :- class(_0,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	try {
		java.math.BigInteger r = v0.nextProbablePrime();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=java_math_BigInteger.valueOf(_0) :- int(_0) | H=[:/*inline*/
	long v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	try {
		java.math.BigInteger r = java.math.BigInteger.valueOf(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=add(_0,_1,_2) :- class(_0,"java.math.BigInteger"),class(_1,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	java.math.BigInteger v1 = (java.math.BigInteger)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigInteger r = v0.add(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=subtract(_0,_1,_2) :- class(_0,"java.math.BigInteger"),class(_1,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	java.math.BigInteger v1 = (java.math.BigInteger)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigInteger r = v0.subtract(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=multiply(_0,_1,_2) :- class(_0,"java.math.BigInteger"),class(_1,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	java.math.BigInteger v1 = (java.math.BigInteger)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigInteger r = v0.multiply(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=divide(_0,_1,_2) :- class(_0,"java.math.BigInteger"),class(_1,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	java.math.BigInteger v1 = (java.math.BigInteger)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigInteger r = v0.divide(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=divideAndRemainder(_0,_1,_2) :- class(_0,"java.math.BigInteger"),class(_1,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	java.math.BigInteger v1 = (java.math.BigInteger)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigInteger[] r = v0.divideAndRemainder(v1);
		runtime.Link l = new runtime.Link(me.nthAtom(2), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=remainder(_0,_1,_2) :- class(_0,"java.math.BigInteger"),class(_1,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	java.math.BigInteger v1 = (java.math.BigInteger)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigInteger r = v0.remainder(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=pow(_0,_1,_2) :- class(_0,"java.math.BigInteger"),int(_1) | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.math.BigInteger r = v0.pow(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=gcd(_0,_1,_2) :- class(_0,"java.math.BigInteger"),class(_1,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	java.math.BigInteger v1 = (java.math.BigInteger)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigInteger r = v0.gcd(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=abs(_0,_1) :- class(_0,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	try {
		java.math.BigInteger r = v0.abs();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=negate(_0,_1) :- class(_0,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	try {
		java.math.BigInteger r = v0.negate();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=signum(_0,_1) :- class(_0,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.signum();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=mod(_0,_1,_2) :- class(_0,"java.math.BigInteger"),class(_1,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	java.math.BigInteger v1 = (java.math.BigInteger)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigInteger r = v0.mod(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=modPow(_0,_1,_2,_3) :- class(_0,"java.math.BigInteger"),class(_1,"java.math.BigInteger"),class(_2,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	java.math.BigInteger v1 = (java.math.BigInteger)me.nthAtom(1).getFunctor().getValue();
	java.math.BigInteger v2 = (java.math.BigInteger)me.nthAtom(2).getFunctor().getValue();
	try {
		java.math.BigInteger r = v0.modPow(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=modInverse(_0,_1,_2) :- class(_0,"java.math.BigInteger"),class(_1,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	java.math.BigInteger v1 = (java.math.BigInteger)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigInteger r = v0.modInverse(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=shiftLeft(_0,_1,_2) :- class(_0,"java.math.BigInteger"),int(_1) | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.math.BigInteger r = v0.shiftLeft(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=shiftRight(_0,_1,_2) :- class(_0,"java.math.BigInteger"),int(_1) | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.math.BigInteger r = v0.shiftRight(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=and(_0,_1,_2) :- class(_0,"java.math.BigInteger"),class(_1,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	java.math.BigInteger v1 = (java.math.BigInteger)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigInteger r = v0.and(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=or(_0,_1,_2) :- class(_0,"java.math.BigInteger"),class(_1,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	java.math.BigInteger v1 = (java.math.BigInteger)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigInteger r = v0.or(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=xor(_0,_1,_2) :- class(_0,"java.math.BigInteger"),class(_1,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	java.math.BigInteger v1 = (java.math.BigInteger)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigInteger r = v0.xor(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=not(_0,_1) :- class(_0,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	try {
		java.math.BigInteger r = v0.not();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=andNot(_0,_1,_2) :- class(_0,"java.math.BigInteger"),class(_1,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	java.math.BigInteger v1 = (java.math.BigInteger)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigInteger r = v0.andNot(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=testBit(_0,_1,_2) :- class(_0,"java.math.BigInteger"),int(_1) | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		boolean r = v0.testBit(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=setBit(_0,_1,_2) :- class(_0,"java.math.BigInteger"),int(_1) | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.math.BigInteger r = v0.setBit(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=clearBit(_0,_1,_2) :- class(_0,"java.math.BigInteger"),int(_1) | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.math.BigInteger r = v0.clearBit(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=flipBit(_0,_1,_2) :- class(_0,"java.math.BigInteger"),int(_1) | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.math.BigInteger r = v0.flipBit(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=getLowestSetBit(_0,_1) :- class(_0,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.getLowestSetBit();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=bitLength(_0,_1) :- class(_0,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.bitLength();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=bitCount(_0,_1) :- class(_0,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.bitCount();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=isProbablePrime(_0,_1,_2) :- class(_0,"java.math.BigInteger"),int(_1) | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		boolean r = v0.isProbablePrime(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=compareTo(_0,_1,_2) :- class(_0,"java.math.BigInteger"),class(_1,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	java.math.BigInteger v1 = (java.math.BigInteger)me.nthAtom(1).getFunctor().getValue();
	try {
		int r = v0.compareTo(v1);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=equals(_0,_1,_2) :- class(_0,"java.math.BigInteger"),class(_1,"java.lang.Object") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	java.lang.Object v1 = (java.lang.Object)me.nthAtom(1).getFunctor().getValue();
	try {
		boolean r = v0.equals(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=min(_0,_1,_2) :- class(_0,"java.math.BigInteger"),class(_1,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	java.math.BigInteger v1 = (java.math.BigInteger)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigInteger r = v0.min(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=max(_0,_1,_2) :- class(_0,"java.math.BigInteger"),class(_1,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	java.math.BigInteger v1 = (java.math.BigInteger)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigInteger r = v0.max(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=hashCode(_0,_1) :- class(_0,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.hashCode();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=toString(_0,_1,_2) :- class(_0,"java.math.BigInteger"),int(_1) | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.lang.String r = v0.toString(v1);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_lang_String.use,(java_lang_String.use:-()).

H=toString(_0,_1) :- class(_0,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.toString();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=intValue(_0,_1) :- class(_0,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.intValue();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=doubleValue(_0,_1) :- class(_0,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	try {
		double r = v0.doubleValue();
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

}.
