//-----------------------------------------------------
// The following code was generated by javalmn
// Tue Nov 21 22:05:54 2006
//-----------------------------------------------------
{module(java_lang_Math).
H=java_lang_Math.e :- H=[:/*inline*/
	double r = java.lang.Math.E;
	Atom res = mem.newAtom(new FloatingFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_lang_Math.pi :- H=[:/*inline*/
	double r = java.lang.Math.PI;
	Atom res = mem.newAtom(new FloatingFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_lang_Math.sin(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.sin(v0);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_Math.cos(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.cos(v0);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_Math.tan(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.tan(v0);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_Math.asin(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.asin(v0);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_Math.acos(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.acos(v0);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_Math.atan(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.atan(v0);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_Math.toRadians(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.toRadians(v0);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_Math.toDegrees(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.toDegrees(v0);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_Math.exp(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.exp(v0);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_Math.log(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.log(v0);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_Math.log10(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.log10(v0);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_Math.sqrt(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.sqrt(v0);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_Math.cbrt(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.cbrt(v0);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_Math.iEEEremainder(_0,_1) :- float(_0),float(_1) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	double v1 = ((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.IEEEremainder(v0,v1);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=java_lang_Math.ceil(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.ceil(v0);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_Math.floor(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.floor(v0);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_Math.rint(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.rint(v0);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_Math.atan2(_0,_1) :- float(_0),float(_1) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	double v1 = ((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.atan2(v0,v1);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=java_lang_Math.pow(_0,_1) :- float(_0),float(_1) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	double v1 = ((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.pow(v0,v1);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=java_lang_Math.random() :- H=[:/*inline*/
	try {
		double r = java.lang.Math.random();
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 0);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 0);
	}
	me.remove();
	:]().

H=java_lang_Math.abs(_0) :- int(_0) | H=[:/*inline*/
	int v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	try {
		int r = java.lang.Math.abs(v0);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_Math.abs(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.abs(v0);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_Math.max(_0,_1) :- int(_0),int(_1) | H=[:/*inline*/
	int v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		int r = java.lang.Math.max(v0,v1);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=java_lang_Math.max(_0,_1) :- float(_0),float(_1) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	double v1 = ((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.max(v0,v1);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=java_lang_Math.min(_0,_1) :- int(_0),int(_1) | H=[:/*inline*/
	int v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		int r = java.lang.Math.min(v0,v1);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=java_lang_Math.min(_0,_1) :- float(_0),float(_1) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	double v1 = ((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.min(v0,v1);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=java_lang_Math.ulp(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.ulp(v0);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_Math.signum(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.signum(v0);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_Math.sinh(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.sinh(v0);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_Math.cosh(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.cosh(v0);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_Math.tanh(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.tanh(v0);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_Math.hypot(_0,_1) :- float(_0),float(_1) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	double v1 = ((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.hypot(v0,v1);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=java_lang_Math.expm1(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.expm1(v0);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_Math.log1p(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		double r = java.lang.Math.log1p(v0);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

}.
