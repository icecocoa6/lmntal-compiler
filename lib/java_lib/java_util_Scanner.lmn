//-----------------------------------------------------
// The following code was generated by javalmn
// Wed Nov 22 20:46:57 2006
//-----------------------------------------------------
{module(java_util_Scanner).
H=java_util_Scanner.new(_0) :- class(_0,"java.lang.Readable") | H=[:/*inline*/
	java.lang.Readable v0 = (java.lang.Readable)me.nthAtom(0).getFunctor().getValue();
	try {
		java.util.Scanner r = new java.util.Scanner(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_util_Scanner.new(_0) :- class(_0,"java.io.InputStream") | H=[:/*inline*/
	java.io.InputStream v0 = (java.io.InputStream)me.nthAtom(0).getFunctor().getValue();
	try {
		java.util.Scanner r = new java.util.Scanner(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_util_Scanner.new(_0,_1) :- class(_0,"java.io.InputStream"),string(_1) | H=[:/*inline*/
	java.io.InputStream v0 = (java.io.InputStream)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		java.util.Scanner r = new java.util.Scanner(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=java_util_Scanner.new(_0) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		java.util.Scanner r = new java.util.Scanner(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_util_Scanner.new(_0,_1) :- class(_0,"java.io.File"),string(_1) | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		java.util.Scanner r = new java.util.Scanner(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=java_util_Scanner.new(_0) :- string(_0) | H=[:/*inline*/
	java.lang.String v0 = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	try {
		java.util.Scanner r = new java.util.Scanner(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_util_Scanner.new(_0) :- class(_0,"java.nio.channels.ReadableByteChannel") | H=[:/*inline*/
	java.nio.channels.ReadableByteChannel v0 = (java.nio.channels.ReadableByteChannel)me.nthAtom(0).getFunctor().getValue();
	try {
		java.util.Scanner r = new java.util.Scanner(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_util_Scanner.new(_0,_1) :- class(_0,"java.nio.channels.ReadableByteChannel"),string(_1) | H=[:/*inline*/
	java.nio.channels.ReadableByteChannel v0 = (java.nio.channels.ReadableByteChannel)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		java.util.Scanner r = new java.util.Scanner(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=close(_0) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.close();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=ioException(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		java.io.IOException r = v0.ioException();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_io_IOException.use,(java_io_IOException.use:-()).

H=delimiter(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		java.util.regex.Pattern r = v0.delimiter();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_util_regex_Pattern.use,(java_util_regex_Pattern.use:-()).

H=useDelimiter(_0,_1,_2) :- class(_0,"java.util.Scanner"),class(_1,"java.util.regex.Pattern") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	java.util.regex.Pattern v1 = (java.util.regex.Pattern)me.nthAtom(1).getFunctor().getValue();
	try {
		java.util.Scanner r = v0.useDelimiter(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_util_Scanner.use,(java_util_Scanner.use:-()).

H=useDelimiter(_0,_1,_2) :- class(_0,"java.util.Scanner"),string(_1) | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		java.util.Scanner r = v0.useDelimiter(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_util_Scanner.use,(java_util_Scanner.use:-()).

H=locale(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		java.util.Locale r = v0.locale();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_util_Locale.use,(java_util_Locale.use:-()).

H=useLocale(_0,_1,_2) :- class(_0,"java.util.Scanner"),class(_1,"java.util.Locale") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	java.util.Locale v1 = (java.util.Locale)me.nthAtom(1).getFunctor().getValue();
	try {
		java.util.Scanner r = v0.useLocale(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_util_Scanner.use,(java_util_Scanner.use:-()).

H=radix(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.radix();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=useRadix(_0,_1,_2) :- class(_0,"java.util.Scanner"),int(_1) | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.util.Scanner r = v0.useRadix(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_util_Scanner.use,(java_util_Scanner.use:-()).

H=match(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		java.util.regex.MatchResult r = v0.match();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_util_regex_MatchResult.use,(java_util_regex_MatchResult.use:-()).

H=toString(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.toString();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=hasNext(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.hasNext();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=next(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.next();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=remove(_0) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.remove();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=hasNext(_0,_1,_2) :- class(_0,"java.util.Scanner"),string(_1) | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		boolean r = v0.hasNext(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=next(_0,_1,_2) :- class(_0,"java.util.Scanner"),string(_1) | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		java.lang.String r = v0.next(v1);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_lang_String.use,(java_lang_String.use:-()).

H=hasNext(_0,_1,_2) :- class(_0,"java.util.Scanner"),class(_1,"java.util.regex.Pattern") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	java.util.regex.Pattern v1 = (java.util.regex.Pattern)me.nthAtom(1).getFunctor().getValue();
	try {
		boolean r = v0.hasNext(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=next(_0,_1,_2) :- class(_0,"java.util.Scanner"),class(_1,"java.util.regex.Pattern") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	java.util.regex.Pattern v1 = (java.util.regex.Pattern)me.nthAtom(1).getFunctor().getValue();
	try {
		java.lang.String r = v0.next(v1);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_lang_String.use,(java_lang_String.use:-()).

H=hasNextLine(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.hasNextLine();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=nextLine(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.nextLine();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=findInLine(_0,_1,_2) :- class(_0,"java.util.Scanner"),string(_1) | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		java.lang.String r = v0.findInLine(v1);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_lang_String.use,(java_lang_String.use:-()).

H=findInLine(_0,_1,_2) :- class(_0,"java.util.Scanner"),class(_1,"java.util.regex.Pattern") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	java.util.regex.Pattern v1 = (java.util.regex.Pattern)me.nthAtom(1).getFunctor().getValue();
	try {
		java.lang.String r = v0.findInLine(v1);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_lang_String.use,(java_lang_String.use:-()).

H=findWithinHorizon(_0,_1,_2,_3) :- class(_0,"java.util.Scanner"),string(_1),int(_2) | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		java.lang.String r = v0.findWithinHorizon(v1,v2);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_lang_String.use,(java_lang_String.use:-()).

H=findWithinHorizon(_0,_1,_2,_3) :- class(_0,"java.util.Scanner"),class(_1,"java.util.regex.Pattern"),int(_2) | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	java.util.regex.Pattern v1 = (java.util.regex.Pattern)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		java.lang.String r = v0.findWithinHorizon(v1,v2);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_lang_String.use,(java_lang_String.use:-()).

H=skip(_0,_1,_2) :- class(_0,"java.util.Scanner"),class(_1,"java.util.regex.Pattern") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	java.util.regex.Pattern v1 = (java.util.regex.Pattern)me.nthAtom(1).getFunctor().getValue();
	try {
		java.util.Scanner r = v0.skip(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_util_Scanner.use,(java_util_Scanner.use:-()).

H=skip(_0,_1,_2) :- class(_0,"java.util.Scanner"),string(_1) | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		java.util.Scanner r = v0.skip(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_util_Scanner.use,(java_util_Scanner.use:-()).

H=hasNextBoolean(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.hasNextBoolean();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=nextBoolean(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.nextBoolean();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=hasNextByte(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.hasNextByte();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=hasNextByte(_0,_1,_2) :- class(_0,"java.util.Scanner"),int(_1) | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		boolean r = v0.hasNextByte(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=hasNextShort(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.hasNextShort();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=hasNextShort(_0,_1,_2) :- class(_0,"java.util.Scanner"),int(_1) | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		boolean r = v0.hasNextShort(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=hasNextInt(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.hasNextInt();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=hasNextInt(_0,_1,_2) :- class(_0,"java.util.Scanner"),int(_1) | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		boolean r = v0.hasNextInt(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=nextInt(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.nextInt();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=nextInt(_0,_1,_2) :- class(_0,"java.util.Scanner"),int(_1) | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		int r = v0.nextInt(v1);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=hasNextLong(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.hasNextLong();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=hasNextLong(_0,_1,_2) :- class(_0,"java.util.Scanner"),int(_1) | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		boolean r = v0.hasNextLong(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=hasNextFloat(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.hasNextFloat();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=hasNextDouble(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.hasNextDouble();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=nextDouble(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		double r = v0.nextDouble();
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=hasNextBigInteger(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.hasNextBigInteger();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=hasNextBigInteger(_0,_1,_2) :- class(_0,"java.util.Scanner"),int(_1) | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		boolean r = v0.hasNextBigInteger(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=nextBigInteger(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		java.math.BigInteger r = v0.nextBigInteger();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=nextBigInteger(_0,_1,_2) :- class(_0,"java.util.Scanner"),int(_1) | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.math.BigInteger r = v0.nextBigInteger(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=hasNextBigDecimal(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.hasNextBigDecimal();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=nextBigDecimal(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.nextBigDecimal();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=next(_0,_1) :- class(_0,"java.util.Scanner") | H=[:/*inline*/
	java.util.Scanner v0 = (java.util.Scanner)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.Object r = v0.next();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_Object.use,(java_lang_Object.use:-()).

}.
