//-----------------------------------------------------
// The following code was generated by javalmn
// Wed Nov 22 20:46:54 2006
//-----------------------------------------------------
{module(java_lang_String).
H=java_lang_String.case_insensitive_order :- H=[:/*inline*/
	java.util.Comparator r = java.lang.String.CASE_INSENSITIVE_ORDER;
	Atom res = mem.newAtom(new ObjectFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_lang_String.new() :- H=[:/*inline*/
	try {
		java.lang.String r = new java.lang.String();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 0);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 0);
	}
	me.remove();
	:]().

H=java_lang_String.new(_0) :- string(_0) | H=[:/*inline*/
	java.lang.String v0 = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	try {
		java.lang.String r = new java.lang.String(v0);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_String.new(_0) :- class(_0,"java.lang.StringBuffer") | H=[:/*inline*/
	java.lang.StringBuffer v0 = (java.lang.StringBuffer)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = new java.lang.String(v0);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_String.new(_0) :- class(_0,"java.lang.StringBuilder") | H=[:/*inline*/
	java.lang.StringBuilder v0 = (java.lang.StringBuilder)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = new java.lang.String(v0);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=length(_0,_1) :- string(_0) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.length();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=codePointAt(_0,_1,_2) :- string(_0),int(_1) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		int r = v0.codePointAt(v1);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=codePointBefore(_0,_1,_2) :- string(_0),int(_1) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		int r = v0.codePointBefore(v1);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=codePointCount(_0,_1,_2,_3) :- string(_0),int(_1),int(_2) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		int r = v0.codePointCount(v1,v2);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=offsetByCodePoints(_0,_1,_2,_3) :- string(_0),int(_1),int(_2) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		int r = v0.offsetByCodePoints(v1,v2);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=equals(_0,_1,_2) :- string(_0),class(_1,"java.lang.Object") | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	java.lang.Object v1 = (java.lang.Object)me.nthAtom(1).getFunctor().getValue();
	try {
		boolean r = v0.equals(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=contentEquals(_0,_1,_2) :- string(_0),class(_1,"java.lang.StringBuffer") | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	java.lang.StringBuffer v1 = (java.lang.StringBuffer)me.nthAtom(1).getFunctor().getValue();
	try {
		boolean r = v0.contentEquals(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=contentEquals(_0,_1,_2) :- string(_0),class(_1,"java.lang.CharSequence") | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	java.lang.CharSequence v1 = (java.lang.CharSequence)me.nthAtom(1).getFunctor().getValue();
	try {
		boolean r = v0.contentEquals(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=equalsIgnoreCase(_0,_1,_2) :- string(_0),string(_1) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		boolean r = v0.equalsIgnoreCase(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=compareTo(_0,_1,_2) :- string(_0),string(_1) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		int r = v0.compareTo(v1);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=compareToIgnoreCase(_0,_1,_2) :- string(_0),string(_1) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		int r = v0.compareToIgnoreCase(v1);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=regionMatches(_0,_1,_2,_3,_4,_5) :- string(_0),int(_1),string(_2),int(_3),int(_4) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	java.lang.String v2 = ((StringFunctor)me.nthAtom(2).getFunctor()).stringValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	int v4 = ((IntegerFunctor)me.nthAtom(4).getFunctor()).intValue();
	try {
		boolean r = v0.regionMatches(v1,v2,v3,v4);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 5);
		mem.relink(me.nthAtom(0), 0, me, 6);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 5);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 6);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.nthAtom(4).remove();
	me.remove();
	:](_0,_1,_2,_3,_4,_5).

H=regionMatches(_0,_1,_2,_3,_4,_5,_6) :- string(_0),int(_2),string(_3),int(_4),int(_5) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = ((SymbolFunctor)me.nthAtom(1).getFunctor()).getName().equals("true")?true:false;
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	java.lang.String v3 = ((StringFunctor)me.nthAtom(3).getFunctor()).stringValue();
	int v4 = ((IntegerFunctor)me.nthAtom(4).getFunctor()).intValue();
	int v5 = ((IntegerFunctor)me.nthAtom(5).getFunctor()).intValue();
	try {
		boolean r = v0.regionMatches(v1,v2,v3,v4,v5);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 6);
		mem.relink(me.nthAtom(0), 0, me, 7);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 6);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 7);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.nthAtom(4).remove();
	me.nthAtom(5).remove();
	me.remove();
	:](_0,_1,_2,_3,_4,_5,_6).

H=startsWith(_0,_1,_2,_3) :- string(_0),string(_1),int(_2) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		boolean r = v0.startsWith(v1,v2);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=startsWith(_0,_1,_2) :- string(_0),string(_1) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		boolean r = v0.startsWith(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=endsWith(_0,_1,_2) :- string(_0),string(_1) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		boolean r = v0.endsWith(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=hashCode(_0,_1) :- string(_0) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.hashCode();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=indexOf(_0,_1,_2) :- string(_0),int(_1) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		int r = v0.indexOf(v1);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=indexOf(_0,_1,_2,_3) :- string(_0),int(_1),int(_2) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		int r = v0.indexOf(v1,v2);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=lastIndexOf(_0,_1,_2) :- string(_0),int(_1) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		int r = v0.lastIndexOf(v1);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=lastIndexOf(_0,_1,_2,_3) :- string(_0),int(_1),int(_2) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		int r = v0.lastIndexOf(v1,v2);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=indexOf(_0,_1,_2) :- string(_0),string(_1) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		int r = v0.indexOf(v1);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=indexOf(_0,_1,_2,_3) :- string(_0),string(_1),int(_2) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		int r = v0.indexOf(v1,v2);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=lastIndexOf(_0,_1,_2) :- string(_0),string(_1) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		int r = v0.lastIndexOf(v1);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=lastIndexOf(_0,_1,_2,_3) :- string(_0),string(_1),int(_2) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		int r = v0.lastIndexOf(v1,v2);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=substring(_0,_1,_2) :- string(_0),int(_1) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.lang.String r = v0.substring(v1);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_lang_String.use,(java_lang_String.use:-()).

H=substring(_0,_1,_2,_3) :- string(_0),int(_1),int(_2) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		java.lang.String r = v0.substring(v1,v2);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_lang_String.use,(java_lang_String.use:-()).

H=subSequence(_0,_1,_2,_3) :- string(_0),int(_1),int(_2) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		java.lang.CharSequence r = v0.subSequence(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_lang_CharSequence.use,(java_lang_CharSequence.use:-()).

H=concat(_0,_1,_2) :- string(_0),string(_1) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		java.lang.String r = v0.concat(v1);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_lang_String.use,(java_lang_String.use:-()).

H=matches(_0,_1,_2) :- string(_0),string(_1) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		boolean r = v0.matches(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=contains(_0,_1,_2) :- string(_0),class(_1,"java.lang.CharSequence") | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	java.lang.CharSequence v1 = (java.lang.CharSequence)me.nthAtom(1).getFunctor().getValue();
	try {
		boolean r = v0.contains(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=replaceFirst(_0,_1,_2,_3) :- string(_0),string(_1),string(_2) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	java.lang.String v2 = ((StringFunctor)me.nthAtom(2).getFunctor()).stringValue();
	try {
		java.lang.String r = v0.replaceFirst(v1,v2);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_lang_String.use,(java_lang_String.use:-()).

H=replaceAll(_0,_1,_2,_3) :- string(_0),string(_1),string(_2) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	java.lang.String v2 = ((StringFunctor)me.nthAtom(2).getFunctor()).stringValue();
	try {
		java.lang.String r = v0.replaceAll(v1,v2);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_lang_String.use,(java_lang_String.use:-()).

H=replace(_0,_1,_2,_3) :- string(_0),class(_1,"java.lang.CharSequence"),class(_2,"java.lang.CharSequence") | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	java.lang.CharSequence v1 = (java.lang.CharSequence)me.nthAtom(1).getFunctor().getValue();
	java.lang.CharSequence v2 = (java.lang.CharSequence)me.nthAtom(2).getFunctor().getValue();
	try {
		java.lang.String r = v0.replace(v1,v2);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_lang_String.use,(java_lang_String.use:-()).

H=split(_0,_1,_2,_3) :- string(_0),string(_1),int(_2) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		java.lang.String[] r = v0.split(v1,v2);
		runtime.Link l = new runtime.Link(me.nthAtom(3), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=split(_0,_1,_2) :- string(_0),string(_1) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		java.lang.String[] r = v0.split(v1);
		runtime.Link l = new runtime.Link(me.nthAtom(2), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=toLowerCase(_0,_1,_2) :- string(_0),class(_1,"java.util.Locale") | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	java.util.Locale v1 = (java.util.Locale)me.nthAtom(1).getFunctor().getValue();
	try {
		java.lang.String r = v0.toLowerCase(v1);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_lang_String.use,(java_lang_String.use:-()).

H=toLowerCase(_0,_1) :- string(_0) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.toLowerCase();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=toUpperCase(_0,_1,_2) :- string(_0),class(_1,"java.util.Locale") | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	java.util.Locale v1 = (java.util.Locale)me.nthAtom(1).getFunctor().getValue();
	try {
		java.lang.String r = v0.toUpperCase(v1);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_lang_String.use,(java_lang_String.use:-()).

H=toUpperCase(_0,_1) :- string(_0) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.toUpperCase();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=trim(_0,_1) :- string(_0) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.trim();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=toString(_0,_1) :- string(_0) | H=[:/*inline*/
	java.lang.String v0 = (java.lang.String)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.toString();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=java_lang_String.valueOf(_0) :- class(_0,"java.lang.Object") | H=[:/*inline*/
	java.lang.Object v0 = (java.lang.Object)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = java.lang.String.valueOf(v0);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_String.valueOf(_0) :- H=[:/*inline*/
	boolean v0 = ((SymbolFunctor)me.nthAtom(0).getFunctor()).getName().equals("true")?true:false;
	try {
		java.lang.String r = java.lang.String.valueOf(v0);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_String.valueOf(_0) :- int(_0) | H=[:/*inline*/
	int v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	try {
		java.lang.String r = java.lang.String.valueOf(v0);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_String.valueOf(_0) :- int(_0) | H=[:/*inline*/
	long v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	try {
		java.lang.String r = java.lang.String.valueOf(v0);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_lang_String.valueOf(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		java.lang.String r = java.lang.String.valueOf(v0);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

}.
