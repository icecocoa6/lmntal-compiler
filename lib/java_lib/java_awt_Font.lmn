//-----------------------------------------------------
// The following code was generated by javalmn
// Wed Nov 22 20:46:42 2006
//-----------------------------------------------------
{module(java_awt_Font).
H=java_awt_Font.plain :- H=[:/*inline*/
	int r = java.awt.Font.PLAIN;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Font.bold :- H=[:/*inline*/
	int r = java.awt.Font.BOLD;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Font.italic :- H=[:/*inline*/
	int r = java.awt.Font.ITALIC;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Font.roman_baseline :- H=[:/*inline*/
	int r = java.awt.Font.ROMAN_BASELINE;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Font.center_baseline :- H=[:/*inline*/
	int r = java.awt.Font.CENTER_BASELINE;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Font.hanging_baseline :- H=[:/*inline*/
	int r = java.awt.Font.HANGING_BASELINE;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Font.truetype_font :- H=[:/*inline*/
	int r = java.awt.Font.TRUETYPE_FONT;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Font.type1_font :- H=[:/*inline*/
	int r = java.awt.Font.TYPE1_FONT;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Font.layout_left_to_right :- H=[:/*inline*/
	int r = java.awt.Font.LAYOUT_LEFT_TO_RIGHT;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Font.layout_right_to_left :- H=[:/*inline*/
	int r = java.awt.Font.LAYOUT_RIGHT_TO_LEFT;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Font.layout_no_start_context :- H=[:/*inline*/
	int r = java.awt.Font.LAYOUT_NO_START_CONTEXT;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Font.layout_no_limit_context :- H=[:/*inline*/
	int r = java.awt.Font.LAYOUT_NO_LIMIT_CONTEXT;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=getPeer(_0,_1) :- class(_0,"java.awt.Font") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.peer.FontPeer r = v0.getPeer();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_peer_FontPeer.use,(java_awt_peer_FontPeer.use:-()).

H=java_awt_Font.new(_0,_1,_2) :- string(_0),int(_1),int(_2) | H=[:/*inline*/
	java.lang.String v0 = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		java.awt.Font r = new java.awt.Font(v0,v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 3);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=java_awt_Font.new(_0) :- class(_0,"java.util.Map") | H=[:/*inline*/
	java.util.Map v0 = (java.util.Map)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Font r = new java.awt.Font(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_awt_Font.getFont(_0) :- class(_0,"java.util.Map") | H=[:/*inline*/
	java.util.Map v0 = (java.util.Map)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Font r = java.awt.Font.getFont(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_awt_Font.createFont(_0,_1) :- int(_0),class(_1,"java.io.InputStream") | H=[:/*inline*/
	int v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	java.io.InputStream v1 = (java.io.InputStream)me.nthAtom(1).getFunctor().getValue();
	try {
		java.awt.Font r = java.awt.Font.createFont(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=java_awt_Font.createFont(_0,_1) :- int(_0),class(_1,"java.io.File") | H=[:/*inline*/
	int v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	java.io.File v1 = (java.io.File)me.nthAtom(1).getFunctor().getValue();
	try {
		java.awt.Font r = java.awt.Font.createFont(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getTransform(_0,_1) :- class(_0,"java.awt.Font") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.geom.AffineTransform r = v0.getTransform();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_geom_AffineTransform.use,(java_awt_geom_AffineTransform.use:-()).

H=getFamily(_0,_1) :- class(_0,"java.awt.Font") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.getFamily();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=getFamily(_0,_1,_2) :- class(_0,"java.awt.Font"),class(_1,"java.util.Locale") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	java.util.Locale v1 = (java.util.Locale)me.nthAtom(1).getFunctor().getValue();
	try {
		java.lang.String r = v0.getFamily(v1);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_lang_String.use,(java_lang_String.use:-()).

H=getPSName(_0,_1) :- class(_0,"java.awt.Font") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.getPSName();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=getName(_0,_1) :- class(_0,"java.awt.Font") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.getName();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=getFontName(_0,_1) :- class(_0,"java.awt.Font") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.getFontName();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=getFontName(_0,_1,_2) :- class(_0,"java.awt.Font"),class(_1,"java.util.Locale") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	java.util.Locale v1 = (java.util.Locale)me.nthAtom(1).getFunctor().getValue();
	try {
		java.lang.String r = v0.getFontName(v1);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_lang_String.use,(java_lang_String.use:-()).

H=getStyle(_0,_1) :- class(_0,"java.awt.Font") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.getStyle();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getSize(_0,_1) :- class(_0,"java.awt.Font") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.getSize();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=isPlain(_0,_1) :- class(_0,"java.awt.Font") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isPlain();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=isBold(_0,_1) :- class(_0,"java.awt.Font") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isBold();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=isItalic(_0,_1) :- class(_0,"java.awt.Font") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isItalic();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=isTransformed(_0,_1) :- class(_0,"java.awt.Font") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isTransformed();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=java_awt_Font.getFont(_0) :- string(_0) | H=[:/*inline*/
	java.lang.String v0 = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	try {
		java.awt.Font r = java.awt.Font.getFont(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_awt_Font.decode(_0) :- string(_0) | H=[:/*inline*/
	java.lang.String v0 = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	try {
		java.awt.Font r = java.awt.Font.decode(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_awt_Font.getFont(_0,_1) :- string(_0),class(_1,"java.awt.Font") | H=[:/*inline*/
	java.lang.String v0 = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	java.awt.Font v1 = (java.awt.Font)me.nthAtom(1).getFunctor().getValue();
	try {
		java.awt.Font r = java.awt.Font.getFont(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=hashCode(_0,_1) :- class(_0,"java.awt.Font") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.hashCode();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=equals(_0,_1,_2) :- class(_0,"java.awt.Font"),class(_1,"java.lang.Object") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	java.lang.Object v1 = (java.lang.Object)me.nthAtom(1).getFunctor().getValue();
	try {
		boolean r = v0.equals(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=toString(_0,_1) :- class(_0,"java.awt.Font") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.toString();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=getNumGlyphs(_0,_1) :- class(_0,"java.awt.Font") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.getNumGlyphs();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getMissingGlyphCode(_0,_1) :- class(_0,"java.awt.Font") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.getMissingGlyphCode();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getAttributes(_0,_1) :- class(_0,"java.awt.Font") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	try {
		java.util.Map r = v0.getAttributes();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_util_Map.use,(java_util_Map.use:-()).

H=getAvailableAttributes(_0,_1) :- class(_0,"java.awt.Font") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	try {
		java.text.AttributedCharacterIterator.Attribute[] r = v0.getAvailableAttributes();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=deriveFont(_0,_1,_2,_3) :- class(_0,"java.awt.Font"),int(_1),class(_2,"java.awt.geom.AffineTransform") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	java.awt.geom.AffineTransform v2 = (java.awt.geom.AffineTransform)me.nthAtom(2).getFunctor().getValue();
	try {
		java.awt.Font r = v0.deriveFont(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_awt_Font.use,(java_awt_Font.use:-()).

H=deriveFont(_0,_1,_2) :- class(_0,"java.awt.Font"),class(_1,"java.awt.geom.AffineTransform") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	java.awt.geom.AffineTransform v1 = (java.awt.geom.AffineTransform)me.nthAtom(1).getFunctor().getValue();
	try {
		java.awt.Font r = v0.deriveFont(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_awt_Font.use,(java_awt_Font.use:-()).

H=deriveFont(_0,_1,_2) :- class(_0,"java.awt.Font"),int(_1) | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.awt.Font r = v0.deriveFont(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_awt_Font.use,(java_awt_Font.use:-()).

H=deriveFont(_0,_1,_2) :- class(_0,"java.awt.Font"),class(_1,"java.util.Map") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	java.util.Map v1 = (java.util.Map)me.nthAtom(1).getFunctor().getValue();
	try {
		java.awt.Font r = v0.deriveFont(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_awt_Font.use,(java_awt_Font.use:-()).

H=canDisplay(_0,_1,_2) :- class(_0,"java.awt.Font"),int(_1) | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		boolean r = v0.canDisplay(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=canDisplayUpTo(_0,_1,_2) :- class(_0,"java.awt.Font"),string(_1) | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		int r = v0.canDisplayUpTo(v1);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=canDisplayUpTo(_0,_1,_2,_3,_4) :- class(_0,"java.awt.Font"),class(_1,"java.text.CharacterIterator"),int(_2),int(_3) | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	java.text.CharacterIterator v1 = (java.text.CharacterIterator)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	try {
		int r = v0.canDisplayUpTo(v1,v2,v3);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 4);
		mem.relink(me.nthAtom(0), 0, me, 5);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 4);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 5);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.remove();
	:](_0,_1,_2,_3,_4).

H=hasUniformLineMetrics(_0,_1) :- class(_0,"java.awt.Font") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.hasUniformLineMetrics();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getLineMetrics(_0,_1,_2,_3) :- class(_0,"java.awt.Font"),string(_1),class(_2,"java.awt.font.FontRenderContext") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	java.awt.font.FontRenderContext v2 = (java.awt.font.FontRenderContext)me.nthAtom(2).getFunctor().getValue();
	try {
		java.awt.font.LineMetrics r = v0.getLineMetrics(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_awt_font_LineMetrics.use,(java_awt_font_LineMetrics.use:-()).

H=getLineMetrics(_0,_1,_2,_3,_4,_5) :- class(_0,"java.awt.Font"),string(_1),int(_2),int(_3),class(_4,"java.awt.font.FontRenderContext") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	java.awt.font.FontRenderContext v4 = (java.awt.font.FontRenderContext)me.nthAtom(4).getFunctor().getValue();
	try {
		java.awt.font.LineMetrics r = v0.getLineMetrics(v1,v2,v3,v4);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 5);
		mem.relink(me.nthAtom(0), 0, me, 6);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 5);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 6);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.nthAtom(4).remove();
	me.remove();
	:](_0,_1,_2,_3,_4,_5),java_awt_font_LineMetrics.use,(java_awt_font_LineMetrics.use:-()).

H=getLineMetrics(_0,_1,_2,_3,_4,_5) :- class(_0,"java.awt.Font"),class(_1,"java.text.CharacterIterator"),int(_2),int(_3),class(_4,"java.awt.font.FontRenderContext") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	java.text.CharacterIterator v1 = (java.text.CharacterIterator)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	java.awt.font.FontRenderContext v4 = (java.awt.font.FontRenderContext)me.nthAtom(4).getFunctor().getValue();
	try {
		java.awt.font.LineMetrics r = v0.getLineMetrics(v1,v2,v3,v4);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 5);
		mem.relink(me.nthAtom(0), 0, me, 6);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 5);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 6);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.nthAtom(4).remove();
	me.remove();
	:](_0,_1,_2,_3,_4,_5),java_awt_font_LineMetrics.use,(java_awt_font_LineMetrics.use:-()).

H=getStringBounds(_0,_1,_2,_3) :- class(_0,"java.awt.Font"),string(_1),class(_2,"java.awt.font.FontRenderContext") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	java.awt.font.FontRenderContext v2 = (java.awt.font.FontRenderContext)me.nthAtom(2).getFunctor().getValue();
	try {
		java.awt.geom.Rectangle2D r = v0.getStringBounds(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_awt_geom_Rectangle2D.use,(java_awt_geom_Rectangle2D.use:-()).

H=getStringBounds(_0,_1,_2,_3,_4,_5) :- class(_0,"java.awt.Font"),string(_1),int(_2),int(_3),class(_4,"java.awt.font.FontRenderContext") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	java.awt.font.FontRenderContext v4 = (java.awt.font.FontRenderContext)me.nthAtom(4).getFunctor().getValue();
	try {
		java.awt.geom.Rectangle2D r = v0.getStringBounds(v1,v2,v3,v4);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 5);
		mem.relink(me.nthAtom(0), 0, me, 6);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 5);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 6);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.nthAtom(4).remove();
	me.remove();
	:](_0,_1,_2,_3,_4,_5),java_awt_geom_Rectangle2D.use,(java_awt_geom_Rectangle2D.use:-()).

H=getStringBounds(_0,_1,_2,_3,_4,_5) :- class(_0,"java.awt.Font"),class(_1,"java.text.CharacterIterator"),int(_2),int(_3),class(_4,"java.awt.font.FontRenderContext") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	java.text.CharacterIterator v1 = (java.text.CharacterIterator)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	java.awt.font.FontRenderContext v4 = (java.awt.font.FontRenderContext)me.nthAtom(4).getFunctor().getValue();
	try {
		java.awt.geom.Rectangle2D r = v0.getStringBounds(v1,v2,v3,v4);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 5);
		mem.relink(me.nthAtom(0), 0, me, 6);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 5);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 6);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.nthAtom(4).remove();
	me.remove();
	:](_0,_1,_2,_3,_4,_5),java_awt_geom_Rectangle2D.use,(java_awt_geom_Rectangle2D.use:-()).

H=getMaxCharBounds(_0,_1,_2) :- class(_0,"java.awt.Font"),class(_1,"java.awt.font.FontRenderContext") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	java.awt.font.FontRenderContext v1 = (java.awt.font.FontRenderContext)me.nthAtom(1).getFunctor().getValue();
	try {
		java.awt.geom.Rectangle2D r = v0.getMaxCharBounds(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_awt_geom_Rectangle2D.use,(java_awt_geom_Rectangle2D.use:-()).

H=createGlyphVector(_0,_1,_2,_3) :- class(_0,"java.awt.Font"),class(_1,"java.awt.font.FontRenderContext"),string(_2) | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	java.awt.font.FontRenderContext v1 = (java.awt.font.FontRenderContext)me.nthAtom(1).getFunctor().getValue();
	java.lang.String v2 = ((StringFunctor)me.nthAtom(2).getFunctor()).stringValue();
	try {
		java.awt.font.GlyphVector r = v0.createGlyphVector(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_awt_font_GlyphVector.use,(java_awt_font_GlyphVector.use:-()).

H=createGlyphVector(_0,_1,_2,_3) :- class(_0,"java.awt.Font"),class(_1,"java.awt.font.FontRenderContext"),class(_2,"java.text.CharacterIterator") | H=[:/*inline*/
	java.awt.Font v0 = (java.awt.Font)me.nthAtom(0).getFunctor().getValue();
	java.awt.font.FontRenderContext v1 = (java.awt.font.FontRenderContext)me.nthAtom(1).getFunctor().getValue();
	java.text.CharacterIterator v2 = (java.text.CharacterIterator)me.nthAtom(2).getFunctor().getValue();
	try {
		java.awt.font.GlyphVector r = v0.createGlyphVector(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_awt_font_GlyphVector.use,(java_awt_font_GlyphVector.use:-()).

}.
