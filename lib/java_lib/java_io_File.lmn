//-----------------------------------------------------
// The following code was generated by class2module.pl 
// Thu Nov 30 12:24:05 2006
//-----------------------------------------------------
{module(java_io_File).
H=java_io_File.separator :- H=[:/*inline*/
	java.lang.String r = java.io.File.separator;
	Atom res = mem.newAtom(new StringFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_lang_String.use,(java_lang_String.use:-()).

H=java_io_File.pathseparator :- H=[:/*inline*/
	java.lang.String r = java.io.File.pathSeparator;
	Atom res = mem.newAtom(new StringFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_lang_String.use,(java_lang_String.use:-()).

H=java_io_File.new(_0) :- string(_0) | H=[:/*inline*/
	java.lang.String v0 = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	try {
		java.io.File r = new java.io.File(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_io_File.new(_0,_1) :- string(_0),string(_1) | H=[:/*inline*/
	java.lang.String v0 = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		java.io.File r = new java.io.File(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=java_io_File.new(_0,_1) :- class(_0,"java.io.File"),string(_1) | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		java.io.File r = new java.io.File(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=java_io_File.new(_0) :- class(_0,"java.net.URI") | H=[:/*inline*/
	java.net.URI v0 = (java.net.URI)me.nthAtom(0).getFunctor().getValue();
	try {
		java.io.File r = new java.io.File(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=getName(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.getName();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=getParent(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.getParent();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=getParentFile(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		java.io.File r = v0.getParentFile();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_io_File.use,(java_io_File.use:-()).

H=getPath(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.getPath();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=isAbsolute(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isAbsolute();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getAbsolutePath(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.getAbsolutePath();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=getAbsoluteFile(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		java.io.File r = v0.getAbsoluteFile();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_io_File.use,(java_io_File.use:-()).

H=getCanonicalPath(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.getCanonicalPath();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=getCanonicalFile(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		java.io.File r = v0.getCanonicalFile();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_io_File.use,(java_io_File.use:-()).

H=toURL(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		java.net.URL r = v0.toURL();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_net_URL.use,(java_net_URL.use:-()).

H=toURI(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		java.net.URI r = v0.toURI();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_net_URI.use,(java_net_URI.use:-()).

H=canRead(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.canRead();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=canWrite(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.canWrite();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=exists(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.exists();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=isDirectory(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isDirectory();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=isFile(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isFile();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=isHidden(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isHidden();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=createNewFile(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.createNewFile();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=delete(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.delete();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=deleteOnExit(_0) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.deleteOnExit();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=list(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String[] r = v0.list();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=list(_0,_1,_2) :- class(_0,"java.io.File"),class(_1,"java.io.FilenameFilter") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	java.io.FilenameFilter v1 = (java.io.FilenameFilter)me.nthAtom(1).getFunctor().getValue();
	try {
		java.lang.String[] r = v0.list(v1);
		runtime.Link l = new runtime.Link(me.nthAtom(2), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=listFiles(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		java.io.File[] r = v0.listFiles();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=listFiles(_0,_1,_2) :- class(_0,"java.io.File"),class(_1,"java.io.FilenameFilter") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	java.io.FilenameFilter v1 = (java.io.FilenameFilter)me.nthAtom(1).getFunctor().getValue();
	try {
		java.io.File[] r = v0.listFiles(v1);
		runtime.Link l = new runtime.Link(me.nthAtom(2), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=listFiles(_0,_1,_2) :- class(_0,"java.io.File"),class(_1,"java.io.FileFilter") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	java.io.FileFilter v1 = (java.io.FileFilter)me.nthAtom(1).getFunctor().getValue();
	try {
		java.io.File[] r = v0.listFiles(v1);
		runtime.Link l = new runtime.Link(me.nthAtom(2), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=mkdir(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.mkdir();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=mkdirs(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.mkdirs();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=renameTo(_0,_1,_2) :- class(_0,"java.io.File"),class(_1,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	java.io.File v1 = (java.io.File)me.nthAtom(1).getFunctor().getValue();
	try {
		boolean r = v0.renameTo(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=setLastModified(_0,_1,_2) :- class(_0,"java.io.File"),int(_1) | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	long v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		boolean r = v0.setLastModified(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=setReadOnly(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.setReadOnly();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=java_io_File.listRoots() :- H=[:/*inline*/
	try {
		java.io.File[] r = java.io.File.listRoots();
		runtime.Link l = new runtime.Link(me.nthAtom(0), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 0);
	}
	me.remove();
	:]().

H=java_io_File.createTempFile(_0,_1,_2) :- string(_0),string(_1),class(_2,"java.io.File") | H=[:/*inline*/
	java.lang.String v0 = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	java.io.File v2 = (java.io.File)me.nthAtom(2).getFunctor().getValue();
	try {
		java.io.File r = java.io.File.createTempFile(v0,v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 3);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=java_io_File.createTempFile(_0,_1) :- string(_0),string(_1) | H=[:/*inline*/
	java.lang.String v0 = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		java.io.File r = java.io.File.createTempFile(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=compareTo(_0,_1,_2) :- class(_0,"java.io.File"),class(_1,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	java.io.File v1 = (java.io.File)me.nthAtom(1).getFunctor().getValue();
	try {
		int r = v0.compareTo(v1);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=equals(_0,_1,_2) :- class(_0,"java.io.File"),class(_1,"java.lang.Object") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	java.lang.Object v1 = (java.lang.Object)me.nthAtom(1).getFunctor().getValue();
	try {
		boolean r = v0.equals(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=hashCode(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.hashCode();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=toString(_0,_1) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.toString();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

}.
