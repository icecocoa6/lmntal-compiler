//-----------------------------------------------------
// The following code was generated by javalmn
// Tue Nov 21 22:05:43 2006
//-----------------------------------------------------
{module(java_awt_Component).
H=getName(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.getName();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setName(_0,_1) :- class(_0,"java.awt.Component"),string(_1) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		v0.setName(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getParent(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Container r = v0.getParent();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getPeer(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.peer.ComponentPeer r = v0.getPeer();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setDropTarget(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.dnd.DropTarget") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.dnd.DropTarget v1 = (java.awt.dnd.DropTarget)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setDropTarget(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getDropTarget(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.dnd.DropTarget r = v0.getDropTarget();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getGraphicsConfiguration(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.GraphicsConfiguration r = v0.getGraphicsConfiguration();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getTreeLock(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.Object r = v0.getTreeLock();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getToolkit(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Toolkit r = v0.getToolkit();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=isValid(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isValid();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=isDisplayable(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isDisplayable();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=isVisible(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isVisible();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getMousePosition(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Point r = v0.getMousePosition();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=isShowing(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isShowing();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=isEnabled(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isEnabled();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setEnabled(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = ((SymbolFunctor)me.nthAtom(1).getFunctor()).getName().equals("true")?true:false;
	try {
		v0.setEnabled(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=enable(_0) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.enable();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=enable(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = ((SymbolFunctor)me.nthAtom(1).getFunctor()).getName().equals("true")?true:false;
	try {
		v0.enable(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=disable(_0) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.disable();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=isDoubleBuffered(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isDoubleBuffered();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=enableInputMethods(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = ((SymbolFunctor)me.nthAtom(1).getFunctor()).getName().equals("true")?true:false;
	try {
		v0.enableInputMethods(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=setVisible(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = ((SymbolFunctor)me.nthAtom(1).getFunctor()).getName().equals("true")?true:false;
	try {
		v0.setVisible(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=show(_0) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.show();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=show(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = ((SymbolFunctor)me.nthAtom(1).getFunctor()).getName().equals("true")?true:false;
	try {
		v0.show(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=hide(_0) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.hide();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=getForeground(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Color r = v0.getForeground();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setForeground(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Color") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Color v1 = (java.awt.Color)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setForeground(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=isForegroundSet(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isForegroundSet();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getBackground(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Color r = v0.getBackground();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setBackground(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Color") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Color v1 = (java.awt.Color)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setBackground(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=isBackgroundSet(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isBackgroundSet();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getFont(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Font r = v0.getFont();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setFont(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Font") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Font v1 = (java.awt.Font)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setFont(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=isFontSet(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isFontSet();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getLocale(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.util.Locale r = v0.getLocale();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setLocale(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.util.Locale") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.util.Locale v1 = (java.util.Locale)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setLocale(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getColorModel(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.image.ColorModel r = v0.getColorModel();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getLocation(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Point r = v0.getLocation();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getLocationOnScreen(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Point r = v0.getLocationOnScreen();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=location(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Point r = v0.location();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setLocation(_0,_1,_2) :- class(_0,"java.awt.Component"),int(_1),int(_2) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		v0.setLocation(v1,v2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=move(_0,_1,_2) :- class(_0,"java.awt.Component"),int(_1),int(_2) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		v0.move(v1,v2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=setLocation(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Point") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Point v1 = (java.awt.Point)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setLocation(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getSize(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Dimension r = v0.getSize();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=size(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Dimension r = v0.size();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setSize(_0,_1,_2) :- class(_0,"java.awt.Component"),int(_1),int(_2) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		v0.setSize(v1,v2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=resize(_0,_1,_2) :- class(_0,"java.awt.Component"),int(_1),int(_2) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		v0.resize(v1,v2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=setSize(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Dimension") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Dimension v1 = (java.awt.Dimension)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setSize(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=resize(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Dimension") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Dimension v1 = (java.awt.Dimension)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.resize(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getBounds(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Rectangle r = v0.getBounds();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=bounds(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Rectangle r = v0.bounds();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setBounds(_0,_1,_2,_3,_4) :- class(_0,"java.awt.Component"),int(_1),int(_2),int(_3),int(_4) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	int v4 = ((IntegerFunctor)me.nthAtom(4).getFunctor()).intValue();
	try {
		v0.setBounds(v1,v2,v3,v4);
		mem.relink(me.nthAtom(0), 0, me, 5);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 5);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.nthAtom(4).remove();
	me.remove();
	:](_0,_1,_2,_3,_4).

H=reshape(_0,_1,_2,_3,_4) :- class(_0,"java.awt.Component"),int(_1),int(_2),int(_3),int(_4) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	int v4 = ((IntegerFunctor)me.nthAtom(4).getFunctor()).intValue();
	try {
		v0.reshape(v1,v2,v3,v4);
		mem.relink(me.nthAtom(0), 0, me, 5);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 5);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.nthAtom(4).remove();
	me.remove();
	:](_0,_1,_2,_3,_4).

H=setBounds(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Rectangle") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Rectangle v1 = (java.awt.Rectangle)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setBounds(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getX(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.getX();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getY(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.getY();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getWidth(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.getWidth();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getHeight(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.getHeight();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getBounds(_0,_1,_2) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Rectangle") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Rectangle v1 = (java.awt.Rectangle)me.nthAtom(1).getFunctor().getValue();
	try {
		java.awt.Rectangle r = v0.getBounds(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=getSize(_0,_1,_2) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Dimension") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Dimension v1 = (java.awt.Dimension)me.nthAtom(1).getFunctor().getValue();
	try {
		java.awt.Dimension r = v0.getSize(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=getLocation(_0,_1,_2) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Point") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Point v1 = (java.awt.Point)me.nthAtom(1).getFunctor().getValue();
	try {
		java.awt.Point r = v0.getLocation(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=isOpaque(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isOpaque();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=isLightweight(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isLightweight();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setPreferredSize(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Dimension") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Dimension v1 = (java.awt.Dimension)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setPreferredSize(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=isPreferredSizeSet(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isPreferredSizeSet();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getPreferredSize(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Dimension r = v0.getPreferredSize();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=preferredSize(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Dimension r = v0.preferredSize();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setMinimumSize(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Dimension") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Dimension v1 = (java.awt.Dimension)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setMinimumSize(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=isMinimumSizeSet(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isMinimumSizeSet();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getMinimumSize(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Dimension r = v0.getMinimumSize();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=minimumSize(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Dimension r = v0.minimumSize();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setMaximumSize(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Dimension") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Dimension v1 = (java.awt.Dimension)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setMaximumSize(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=isMaximumSizeSet(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isMaximumSizeSet();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getMaximumSize(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Dimension r = v0.getMaximumSize();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=doLayout(_0) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.doLayout();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=layout(_0) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.layout();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=validate(_0) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.validate();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=invalidate(_0) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.invalidate();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=getGraphics(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Graphics r = v0.getGraphics();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getFontMetrics(_0,_1,_2) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Font") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Font v1 = (java.awt.Font)me.nthAtom(1).getFunctor().getValue();
	try {
		java.awt.FontMetrics r = v0.getFontMetrics(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=setCursor(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Cursor") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Cursor v1 = (java.awt.Cursor)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setCursor(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getCursor(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Cursor r = v0.getCursor();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=isCursorSet(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isCursorSet();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=paint(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Graphics") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Graphics v1 = (java.awt.Graphics)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.paint(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=update(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Graphics") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Graphics v1 = (java.awt.Graphics)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.update(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=paintAll(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Graphics") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Graphics v1 = (java.awt.Graphics)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.paintAll(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=repaint(_0) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.repaint();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=repaint(_0,_1) :- class(_0,"java.awt.Component"),int(_1) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	long v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		v0.repaint(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=repaint(_0,_1,_2,_3,_4) :- class(_0,"java.awt.Component"),int(_1),int(_2),int(_3),int(_4) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	int v4 = ((IntegerFunctor)me.nthAtom(4).getFunctor()).intValue();
	try {
		v0.repaint(v1,v2,v3,v4);
		mem.relink(me.nthAtom(0), 0, me, 5);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 5);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.nthAtom(4).remove();
	me.remove();
	:](_0,_1,_2,_3,_4).

H=repaint(_0,_1,_2,_3,_4,_5) :- class(_0,"java.awt.Component"),int(_1),int(_2),int(_3),int(_4),int(_5) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	long v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	int v4 = ((IntegerFunctor)me.nthAtom(4).getFunctor()).intValue();
	int v5 = ((IntegerFunctor)me.nthAtom(5).getFunctor()).intValue();
	try {
		v0.repaint(v1,v2,v3,v4,v5);
		mem.relink(me.nthAtom(0), 0, me, 6);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 6);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.nthAtom(4).remove();
	me.nthAtom(5).remove();
	me.remove();
	:](_0,_1,_2,_3,_4,_5).

H=print(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Graphics") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Graphics v1 = (java.awt.Graphics)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.print(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=printAll(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Graphics") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Graphics v1 = (java.awt.Graphics)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.printAll(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=imageUpdate(_0,_1,_2,_3,_4,_5,_6,_7) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Image"),int(_2),int(_3),int(_4),int(_5),int(_6) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Image v1 = (java.awt.Image)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	int v4 = ((IntegerFunctor)me.nthAtom(4).getFunctor()).intValue();
	int v5 = ((IntegerFunctor)me.nthAtom(5).getFunctor()).intValue();
	int v6 = ((IntegerFunctor)me.nthAtom(6).getFunctor()).intValue();
	try {
		boolean r = v0.imageUpdate(v1,v2,v3,v4,v5,v6);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 7);
		mem.relink(me.nthAtom(0), 0, me, 8);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 7);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 8);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.nthAtom(4).remove();
	me.nthAtom(5).remove();
	me.nthAtom(6).remove();
	me.remove();
	:](_0,_1,_2,_3,_4,_5,_6,_7).

H=createImage(_0,_1,_2) :- class(_0,"java.awt.Component"),class(_1,"java.awt.image.ImageProducer") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.image.ImageProducer v1 = (java.awt.image.ImageProducer)me.nthAtom(1).getFunctor().getValue();
	try {
		java.awt.Image r = v0.createImage(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=createImage(_0,_1,_2,_3) :- class(_0,"java.awt.Component"),int(_1),int(_2) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		java.awt.Image r = v0.createImage(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=createVolatileImage(_0,_1,_2,_3) :- class(_0,"java.awt.Component"),int(_1),int(_2) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		java.awt.image.VolatileImage r = v0.createVolatileImage(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=createVolatileImage(_0,_1,_2,_3,_4) :- class(_0,"java.awt.Component"),int(_1),int(_2),class(_3,"java.awt.ImageCapabilities") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	java.awt.ImageCapabilities v3 = (java.awt.ImageCapabilities)me.nthAtom(3).getFunctor().getValue();
	try {
		java.awt.image.VolatileImage r = v0.createVolatileImage(v1,v2,v3);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 4);
		mem.relink(me.nthAtom(0), 0, me, 5);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 4);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 5);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.remove();
	:](_0,_1,_2,_3,_4).

H=prepareImage(_0,_1,_2,_3) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Image"),class(_2,"java.awt.image.ImageObserver") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Image v1 = (java.awt.Image)me.nthAtom(1).getFunctor().getValue();
	java.awt.image.ImageObserver v2 = (java.awt.image.ImageObserver)me.nthAtom(2).getFunctor().getValue();
	try {
		boolean r = v0.prepareImage(v1,v2);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=prepareImage(_0,_1,_2,_3,_4,_5) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Image"),int(_2),int(_3),class(_4,"java.awt.image.ImageObserver") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Image v1 = (java.awt.Image)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	java.awt.image.ImageObserver v4 = (java.awt.image.ImageObserver)me.nthAtom(4).getFunctor().getValue();
	try {
		boolean r = v0.prepareImage(v1,v2,v3,v4);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 5);
		mem.relink(me.nthAtom(0), 0, me, 6);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 5);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 6);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.nthAtom(4).remove();
	me.remove();
	:](_0,_1,_2,_3,_4,_5).

H=checkImage(_0,_1,_2,_3) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Image"),class(_2,"java.awt.image.ImageObserver") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Image v1 = (java.awt.Image)me.nthAtom(1).getFunctor().getValue();
	java.awt.image.ImageObserver v2 = (java.awt.image.ImageObserver)me.nthAtom(2).getFunctor().getValue();
	try {
		int r = v0.checkImage(v1,v2);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=checkImage(_0,_1,_2,_3,_4,_5) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Image"),int(_2),int(_3),class(_4,"java.awt.image.ImageObserver") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Image v1 = (java.awt.Image)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	java.awt.image.ImageObserver v4 = (java.awt.image.ImageObserver)me.nthAtom(4).getFunctor().getValue();
	try {
		int r = v0.checkImage(v1,v2,v3,v4);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 5);
		mem.relink(me.nthAtom(0), 0, me, 6);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 5);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 6);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.nthAtom(4).remove();
	me.remove();
	:](_0,_1,_2,_3,_4,_5).

H=setIgnoreRepaint(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = ((SymbolFunctor)me.nthAtom(1).getFunctor()).getName().equals("true")?true:false;
	try {
		v0.setIgnoreRepaint(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getIgnoreRepaint(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.getIgnoreRepaint();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=contains(_0,_1,_2,_3) :- class(_0,"java.awt.Component"),int(_1),int(_2) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		boolean r = v0.contains(v1,v2);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=inside(_0,_1,_2,_3) :- class(_0,"java.awt.Component"),int(_1),int(_2) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		boolean r = v0.inside(v1,v2);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=contains(_0,_1,_2) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Point") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Point v1 = (java.awt.Point)me.nthAtom(1).getFunctor().getValue();
	try {
		boolean r = v0.contains(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=getComponentAt(_0,_1,_2,_3) :- class(_0,"java.awt.Component"),int(_1),int(_2) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		java.awt.Component r = v0.getComponentAt(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=locate(_0,_1,_2,_3) :- class(_0,"java.awt.Component"),int(_1),int(_2) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		java.awt.Component r = v0.locate(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=getComponentAt(_0,_1,_2) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Point") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Point v1 = (java.awt.Point)me.nthAtom(1).getFunctor().getValue();
	try {
		java.awt.Component r = v0.getComponentAt(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=deliverEvent(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Event") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Event v1 = (java.awt.Event)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.deliverEvent(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=dispatchEvent(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.AWTEvent") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.AWTEvent v1 = (java.awt.AWTEvent)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.dispatchEvent(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=postEvent(_0,_1,_2) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Event") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Event v1 = (java.awt.Event)me.nthAtom(1).getFunctor().getValue();
	try {
		boolean r = v0.postEvent(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=addComponentListener(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.event.ComponentListener") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.ComponentListener v1 = (java.awt.event.ComponentListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.addComponentListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=removeComponentListener(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.event.ComponentListener") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.ComponentListener v1 = (java.awt.event.ComponentListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.removeComponentListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getComponentListeners(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.event.ComponentListener[] r = v0.getComponentListeners();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=addFocusListener(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.event.FocusListener") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.FocusListener v1 = (java.awt.event.FocusListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.addFocusListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=removeFocusListener(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.event.FocusListener") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.FocusListener v1 = (java.awt.event.FocusListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.removeFocusListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getFocusListeners(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.event.FocusListener[] r = v0.getFocusListeners();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=addHierarchyListener(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.event.HierarchyListener") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.HierarchyListener v1 = (java.awt.event.HierarchyListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.addHierarchyListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=removeHierarchyListener(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.event.HierarchyListener") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.HierarchyListener v1 = (java.awt.event.HierarchyListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.removeHierarchyListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getHierarchyListeners(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.event.HierarchyListener[] r = v0.getHierarchyListeners();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=addHierarchyBoundsListener(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.event.HierarchyBoundsListener") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.HierarchyBoundsListener v1 = (java.awt.event.HierarchyBoundsListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.addHierarchyBoundsListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=removeHierarchyBoundsListener(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.event.HierarchyBoundsListener") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.HierarchyBoundsListener v1 = (java.awt.event.HierarchyBoundsListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.removeHierarchyBoundsListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getHierarchyBoundsListeners(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.event.HierarchyBoundsListener[] r = v0.getHierarchyBoundsListeners();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=addKeyListener(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.event.KeyListener") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.KeyListener v1 = (java.awt.event.KeyListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.addKeyListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=removeKeyListener(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.event.KeyListener") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.KeyListener v1 = (java.awt.event.KeyListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.removeKeyListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getKeyListeners(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.event.KeyListener[] r = v0.getKeyListeners();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=addMouseListener(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.event.MouseListener") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.MouseListener v1 = (java.awt.event.MouseListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.addMouseListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=removeMouseListener(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.event.MouseListener") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.MouseListener v1 = (java.awt.event.MouseListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.removeMouseListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getMouseListeners(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.event.MouseListener[] r = v0.getMouseListeners();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=addMouseMotionListener(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.event.MouseMotionListener") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.MouseMotionListener v1 = (java.awt.event.MouseMotionListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.addMouseMotionListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=removeMouseMotionListener(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.event.MouseMotionListener") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.MouseMotionListener v1 = (java.awt.event.MouseMotionListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.removeMouseMotionListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getMouseMotionListeners(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.event.MouseMotionListener[] r = v0.getMouseMotionListeners();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=addMouseWheelListener(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.event.MouseWheelListener") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.MouseWheelListener v1 = (java.awt.event.MouseWheelListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.addMouseWheelListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=removeMouseWheelListener(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.event.MouseWheelListener") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.MouseWheelListener v1 = (java.awt.event.MouseWheelListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.removeMouseWheelListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getMouseWheelListeners(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.event.MouseWheelListener[] r = v0.getMouseWheelListeners();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=addInputMethodListener(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.event.InputMethodListener") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.InputMethodListener v1 = (java.awt.event.InputMethodListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.addInputMethodListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=removeInputMethodListener(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.event.InputMethodListener") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.InputMethodListener v1 = (java.awt.event.InputMethodListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.removeInputMethodListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getInputMethodListeners(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.event.InputMethodListener[] r = v0.getInputMethodListeners();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getListeners(_0,_1,_2) :- class(_0,"java.awt.Component"),class(_1,"java.lang.Class") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.lang.Class v1 = (java.lang.Class)me.nthAtom(1).getFunctor().getValue();
	try {
		java.util.EventListener[] r = v0.getListeners(v1);
		runtime.Link l = new runtime.Link(me.nthAtom(2), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=getInputMethodRequests(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.im.InputMethodRequests r = v0.getInputMethodRequests();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getInputContext(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.im.InputContext r = v0.getInputContext();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=handleEvent(_0,_1,_2) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Event") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Event v1 = (java.awt.Event)me.nthAtom(1).getFunctor().getValue();
	try {
		boolean r = v0.handleEvent(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=mouseDown(_0,_1,_2,_3,_4) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Event"),int(_2),int(_3) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Event v1 = (java.awt.Event)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	try {
		boolean r = v0.mouseDown(v1,v2,v3);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 4);
		mem.relink(me.nthAtom(0), 0, me, 5);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 4);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 5);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.remove();
	:](_0,_1,_2,_3,_4).

H=mouseDrag(_0,_1,_2,_3,_4) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Event"),int(_2),int(_3) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Event v1 = (java.awt.Event)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	try {
		boolean r = v0.mouseDrag(v1,v2,v3);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 4);
		mem.relink(me.nthAtom(0), 0, me, 5);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 4);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 5);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.remove();
	:](_0,_1,_2,_3,_4).

H=mouseUp(_0,_1,_2,_3,_4) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Event"),int(_2),int(_3) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Event v1 = (java.awt.Event)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	try {
		boolean r = v0.mouseUp(v1,v2,v3);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 4);
		mem.relink(me.nthAtom(0), 0, me, 5);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 4);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 5);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.remove();
	:](_0,_1,_2,_3,_4).

H=mouseMove(_0,_1,_2,_3,_4) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Event"),int(_2),int(_3) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Event v1 = (java.awt.Event)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	try {
		boolean r = v0.mouseMove(v1,v2,v3);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 4);
		mem.relink(me.nthAtom(0), 0, me, 5);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 4);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 5);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.remove();
	:](_0,_1,_2,_3,_4).

H=mouseEnter(_0,_1,_2,_3,_4) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Event"),int(_2),int(_3) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Event v1 = (java.awt.Event)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	try {
		boolean r = v0.mouseEnter(v1,v2,v3);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 4);
		mem.relink(me.nthAtom(0), 0, me, 5);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 4);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 5);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.remove();
	:](_0,_1,_2,_3,_4).

H=mouseExit(_0,_1,_2,_3,_4) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Event"),int(_2),int(_3) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Event v1 = (java.awt.Event)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	try {
		boolean r = v0.mouseExit(v1,v2,v3);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 4);
		mem.relink(me.nthAtom(0), 0, me, 5);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 4);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 5);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.remove();
	:](_0,_1,_2,_3,_4).

H=keyDown(_0,_1,_2,_3) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Event"),int(_2) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Event v1 = (java.awt.Event)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		boolean r = v0.keyDown(v1,v2);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=keyUp(_0,_1,_2,_3) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Event"),int(_2) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Event v1 = (java.awt.Event)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		boolean r = v0.keyUp(v1,v2);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=action(_0,_1,_2,_3) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Event"),class(_2,"java.lang.Object") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Event v1 = (java.awt.Event)me.nthAtom(1).getFunctor().getValue();
	java.lang.Object v2 = (java.lang.Object)me.nthAtom(2).getFunctor().getValue();
	try {
		boolean r = v0.action(v1,v2);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=addNotify(_0) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.addNotify();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=removeNotify(_0) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.removeNotify();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=gotFocus(_0,_1,_2,_3) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Event"),class(_2,"java.lang.Object") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Event v1 = (java.awt.Event)me.nthAtom(1).getFunctor().getValue();
	java.lang.Object v2 = (java.lang.Object)me.nthAtom(2).getFunctor().getValue();
	try {
		boolean r = v0.gotFocus(v1,v2);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=lostFocus(_0,_1,_2,_3) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Event"),class(_2,"java.lang.Object") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Event v1 = (java.awt.Event)me.nthAtom(1).getFunctor().getValue();
	java.lang.Object v2 = (java.lang.Object)me.nthAtom(2).getFunctor().getValue();
	try {
		boolean r = v0.lostFocus(v1,v2);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=isFocusTraversable(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isFocusTraversable();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=isFocusable(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isFocusable();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setFocusable(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = ((SymbolFunctor)me.nthAtom(1).getFunctor()).getName().equals("true")?true:false;
	try {
		v0.setFocusable(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=setFocusTraversalKeys(_0,_1,_2) :- class(_0,"java.awt.Component"),int(_1),class(_2,"java.util.Set") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	java.util.Set v2 = (java.util.Set)me.nthAtom(2).getFunctor().getValue();
	try {
		v0.setFocusTraversalKeys(v1,v2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=getFocusTraversalKeys(_0,_1,_2) :- class(_0,"java.awt.Component"),int(_1) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.util.Set r = v0.getFocusTraversalKeys(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=areFocusTraversalKeysSet(_0,_1,_2) :- class(_0,"java.awt.Component"),int(_1) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		boolean r = v0.areFocusTraversalKeysSet(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=setFocusTraversalKeysEnabled(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = ((SymbolFunctor)me.nthAtom(1).getFunctor()).getName().equals("true")?true:false;
	try {
		v0.setFocusTraversalKeysEnabled(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getFocusTraversalKeysEnabled(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.getFocusTraversalKeysEnabled();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=requestFocus(_0) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.requestFocus();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=requestFocusInWindow(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.requestFocusInWindow();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=transferFocus(_0) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.transferFocus();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=getFocusCycleRootAncestor(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Container r = v0.getFocusCycleRootAncestor();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=isFocusCycleRoot(_0,_1,_2) :- class(_0,"java.awt.Component"),class(_1,"java.awt.Container") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.Container v1 = (java.awt.Container)me.nthAtom(1).getFunctor().getValue();
	try {
		boolean r = v0.isFocusCycleRoot(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=nextFocus(_0) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.nextFocus();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=transferFocusBackward(_0) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.transferFocusBackward();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=transferFocusUpCycle(_0) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.transferFocusUpCycle();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=hasFocus(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.hasFocus();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=isFocusOwner(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isFocusOwner();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=add(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.PopupMenu") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.PopupMenu v1 = (java.awt.PopupMenu)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.add(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=remove(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.MenuComponent") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.MenuComponent v1 = (java.awt.MenuComponent)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.remove(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=toString(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.toString();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=list(_0) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.list();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=list(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.io.PrintStream") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.io.PrintStream v1 = (java.io.PrintStream)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.list(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=list(_0,_1,_2) :- class(_0,"java.awt.Component"),class(_1,"java.io.PrintStream"),int(_2) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.io.PrintStream v1 = (java.io.PrintStream)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		v0.list(v1,v2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=list(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.io.PrintWriter") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.io.PrintWriter v1 = (java.io.PrintWriter)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.list(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=list(_0,_1,_2) :- class(_0,"java.awt.Component"),class(_1,"java.io.PrintWriter"),int(_2) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.io.PrintWriter v1 = (java.io.PrintWriter)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		v0.list(v1,v2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=addPropertyChangeListener(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.beans.PropertyChangeListener") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.beans.PropertyChangeListener v1 = (java.beans.PropertyChangeListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.addPropertyChangeListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=removePropertyChangeListener(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.beans.PropertyChangeListener") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.beans.PropertyChangeListener v1 = (java.beans.PropertyChangeListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.removePropertyChangeListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getPropertyChangeListeners(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.beans.PropertyChangeListener[] r = v0.getPropertyChangeListeners();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=addPropertyChangeListener(_0,_1,_2) :- class(_0,"java.awt.Component"),string(_1),class(_2,"java.beans.PropertyChangeListener") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	java.beans.PropertyChangeListener v2 = (java.beans.PropertyChangeListener)me.nthAtom(2).getFunctor().getValue();
	try {
		v0.addPropertyChangeListener(v1,v2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=removePropertyChangeListener(_0,_1,_2) :- class(_0,"java.awt.Component"),string(_1),class(_2,"java.beans.PropertyChangeListener") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	java.beans.PropertyChangeListener v2 = (java.beans.PropertyChangeListener)me.nthAtom(2).getFunctor().getValue();
	try {
		v0.removePropertyChangeListener(v1,v2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=getPropertyChangeListeners(_0,_1,_2) :- class(_0,"java.awt.Component"),string(_1) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		java.beans.PropertyChangeListener[] r = v0.getPropertyChangeListeners(v1);
		runtime.Link l = new runtime.Link(me.nthAtom(2), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=firePropertyChange(_0,_1,_2,_3) :- class(_0,"java.awt.Component"),string(_1),int(_2),int(_3) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	long v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	long v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	try {
		v0.firePropertyChange(v1,v2,v3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=firePropertyChange(_0,_1,_2,_3) :- class(_0,"java.awt.Component"),string(_1),float(_2),float(_3) | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	double v2 = ((FloatingFunctor)me.nthAtom(2).getFunctor()).floatValue();
	double v3 = ((FloatingFunctor)me.nthAtom(3).getFunctor()).floatValue();
	try {
		v0.firePropertyChange(v1,v2,v3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=setComponentOrientation(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.ComponentOrientation") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.ComponentOrientation v1 = (java.awt.ComponentOrientation)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setComponentOrientation(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getComponentOrientation(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.ComponentOrientation r = v0.getComponentOrientation();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=applyComponentOrientation(_0,_1) :- class(_0,"java.awt.Component"),class(_1,"java.awt.ComponentOrientation") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	java.awt.ComponentOrientation v1 = (java.awt.ComponentOrientation)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.applyComponentOrientation(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getAccessibleContext(_0,_1) :- class(_0,"java.awt.Component") | H=[:/*inline*/
	java.awt.Component v0 = (java.awt.Component)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.accessibility.AccessibleContext r = v0.getAccessibleContext();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

}.
