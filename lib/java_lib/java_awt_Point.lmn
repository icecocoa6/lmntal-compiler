//-----------------------------------------------------
// The following code was generated by class2module.pl 
// Fri Nov 24 11:50:18 2006
//-----------------------------------------------------
{module(java_awt_Point).
H=java_awt_Point.new() :- H=[:/*inline*/
	try {
		java.awt.Point r = new java.awt.Point();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 0);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 0);
	}
	me.remove();
	:](),java_awt_geom_Point2D.use,(java_awt_geom_Point2D.use:-()).

H=java_awt_Point.new(_0) :- class(_0,"java.awt.Point") | H=[:/*inline*/
	java.awt.Point v0 = (java.awt.Point)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Point r = new java.awt.Point(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0),java_awt_geom_Point2D.use,(java_awt_geom_Point2D.use:-()).

H=java_awt_Point.new(_0,_1) :- int(_0),int(_1) | H=[:/*inline*/
	int v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.awt.Point r = new java.awt.Point(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1),java_awt_geom_Point2D.use,(java_awt_geom_Point2D.use:-()).

H=getX(_0,_1) :- class(_0,"java.awt.Point") | H=[:/*inline*/
	java.awt.Point v0 = (java.awt.Point)me.nthAtom(0).getFunctor().getValue();
	try {
		double r = v0.getX();
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getY(_0,_1) :- class(_0,"java.awt.Point") | H=[:/*inline*/
	java.awt.Point v0 = (java.awt.Point)me.nthAtom(0).getFunctor().getValue();
	try {
		double r = v0.getY();
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getLocation(_0,_1) :- class(_0,"java.awt.Point") | H=[:/*inline*/
	java.awt.Point v0 = (java.awt.Point)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Point r = v0.getLocation();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_Point.use,(java_awt_Point.use:-()).

H=setLocation(_0,_1) :- class(_0,"java.awt.Point"),class(_1,"java.awt.Point") | H=[:/*inline*/
	java.awt.Point v0 = (java.awt.Point)me.nthAtom(0).getFunctor().getValue();
	java.awt.Point v1 = (java.awt.Point)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setLocation(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=setLocation(_0,_1,_2) :- class(_0,"java.awt.Point"),int(_1),int(_2) | H=[:/*inline*/
	java.awt.Point v0 = (java.awt.Point)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		v0.setLocation(v1,v2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=setLocation(_0,_1,_2) :- class(_0,"java.awt.Point"),float(_1),float(_2) | H=[:/*inline*/
	java.awt.Point v0 = (java.awt.Point)me.nthAtom(0).getFunctor().getValue();
	double v1 = ((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
	double v2 = ((FloatingFunctor)me.nthAtom(2).getFunctor()).floatValue();
	try {
		v0.setLocation(v1,v2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=move(_0,_1,_2) :- class(_0,"java.awt.Point"),int(_1),int(_2) | H=[:/*inline*/
	java.awt.Point v0 = (java.awt.Point)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		v0.move(v1,v2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=translate(_0,_1,_2) :- class(_0,"java.awt.Point"),int(_1),int(_2) | H=[:/*inline*/
	java.awt.Point v0 = (java.awt.Point)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		v0.translate(v1,v2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=equals(_0,_1,_2) :- class(_0,"java.awt.Point"),class(_1,"java.lang.Object") | H=[:/*inline*/
	java.awt.Point v0 = (java.awt.Point)me.nthAtom(0).getFunctor().getValue();
	java.lang.Object v1 = (java.lang.Object)me.nthAtom(1).getFunctor().getValue();
	try {
		boolean r = v0.equals(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=toString(_0,_1) :- class(_0,"java.awt.Point") | H=[:/*inline*/
	java.awt.Point v0 = (java.awt.Point)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.toString();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

}.
