//-----------------------------------------------------
// The following code was generated by class2module.pl 
// Wed Dec 13 12:31:57 2006
//-----------------------------------------------------
{module(java_awt_Container).
H=java_awt_Container.new() :- H=[:/*inline*/
	try {
		java.awt.Container r = new java.awt.Container();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 0);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 0);
	}
	me.remove();
	:](),java_awt_Component.use,(java_awt_Component.use:-()).

H=getComponentCount(_0,_1) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.getComponentCount();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=countComponents(_0,_1) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.countComponents();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getComponent(_0,_1,_2) :- class(_0,"java.awt.Container"),int(_1) | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.awt.Component r = v0.getComponent(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_awt_Component.use,(java_awt_Component.use:-()).

H=getComponents(_0,_1) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Component[] r = v0.getComponents();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getInsets(_0,_1) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Insets r = v0.getInsets();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_Insets.use,(java_awt_Insets.use:-()).

H=insets(_0,_1) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Insets r = v0.insets();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_Insets.use,(java_awt_Insets.use:-()).

H=add(_0,_1,_2) :- class(_0,"java.awt.Container"),class(_1,"java.awt.Component") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.awt.Component v1 = (java.awt.Component)me.nthAtom(1).getFunctor().getValue();
	try {
		java.awt.Component r = v0.add(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_awt_Component.use,(java_awt_Component.use:-()).

H=add(_0,_1,_2,_3) :- class(_0,"java.awt.Container"),string(_1),class(_2,"java.awt.Component") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	java.awt.Component v2 = (java.awt.Component)me.nthAtom(2).getFunctor().getValue();
	try {
		java.awt.Component r = v0.add(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_awt_Component.use,(java_awt_Component.use:-()).

H=add(_0,_1,_2,_3) :- class(_0,"java.awt.Container"),class(_1,"java.awt.Component"),int(_2) | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.awt.Component v1 = (java.awt.Component)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		java.awt.Component r = v0.add(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_awt_Component.use,(java_awt_Component.use:-()).

H=setComponentZOrder(_0,_1,_2) :- class(_0,"java.awt.Container"),class(_1,"java.awt.Component"),int(_2) | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.awt.Component v1 = (java.awt.Component)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		v0.setComponentZOrder(v1,v2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=getComponentZOrder(_0,_1,_2) :- class(_0,"java.awt.Container"),class(_1,"java.awt.Component") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.awt.Component v1 = (java.awt.Component)me.nthAtom(1).getFunctor().getValue();
	try {
		int r = v0.getComponentZOrder(v1);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=add(_0,_1,_2) :- class(_0,"java.awt.Container"),class(_1,"java.awt.Component"),class(_2,"java.lang.Object") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.awt.Component v1 = (java.awt.Component)me.nthAtom(1).getFunctor().getValue();
	java.lang.Object v2 = (java.lang.Object)me.nthAtom(2).getFunctor().getValue();
	try {
		v0.add(v1,v2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=add(_0,_1,_2,_3) :- class(_0,"java.awt.Container"),class(_1,"java.awt.Component"),class(_2,"java.lang.Object"),int(_3) | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.awt.Component v1 = (java.awt.Component)me.nthAtom(1).getFunctor().getValue();
	java.lang.Object v2 = (java.lang.Object)me.nthAtom(2).getFunctor().getValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	try {
		v0.add(v1,v2,v3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=remove(_0,_1) :- class(_0,"java.awt.Container"),int(_1) | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		v0.remove(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=remove(_0,_1) :- class(_0,"java.awt.Container"),class(_1,"java.awt.Component") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.awt.Component v1 = (java.awt.Component)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.remove(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=removeAll(_0) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.removeAll();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=getLayout(_0,_1) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.LayoutManager r = v0.getLayout();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_LayoutManager.use,(java_awt_LayoutManager.use:-()).

H=setLayout(_0,_1) :- class(_0,"java.awt.Container"),class(_1,"java.awt.LayoutManager") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.awt.LayoutManager v1 = (java.awt.LayoutManager)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setLayout(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=doLayout(_0) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.doLayout();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=layout(_0) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.layout();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=invalidate(_0) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.invalidate();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=validate(_0) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.validate();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=setFont(_0,_1) :- class(_0,"java.awt.Container"),class(_1,"java.awt.Font") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.awt.Font v1 = (java.awt.Font)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setFont(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getPreferredSize(_0,_1) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Dimension r = v0.getPreferredSize();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_Dimension.use,(java_awt_Dimension.use:-()).

H=preferredSize(_0,_1) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Dimension r = v0.preferredSize();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_Dimension.use,(java_awt_Dimension.use:-()).

H=getMinimumSize(_0,_1) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Dimension r = v0.getMinimumSize();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_Dimension.use,(java_awt_Dimension.use:-()).

H=minimumSize(_0,_1) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Dimension r = v0.minimumSize();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_Dimension.use,(java_awt_Dimension.use:-()).

H=getMaximumSize(_0,_1) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Dimension r = v0.getMaximumSize();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_Dimension.use,(java_awt_Dimension.use:-()).

H=paint(_0,_1) :- class(_0,"java.awt.Container"),class(_1,"java.awt.Graphics") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.awt.Graphics v1 = (java.awt.Graphics)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.paint(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=update(_0,_1) :- class(_0,"java.awt.Container"),class(_1,"java.awt.Graphics") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.awt.Graphics v1 = (java.awt.Graphics)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.update(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=print(_0,_1) :- class(_0,"java.awt.Container"),class(_1,"java.awt.Graphics") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.awt.Graphics v1 = (java.awt.Graphics)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.print(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=paintComponents(_0,_1) :- class(_0,"java.awt.Container"),class(_1,"java.awt.Graphics") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.awt.Graphics v1 = (java.awt.Graphics)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.paintComponents(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=printComponents(_0,_1) :- class(_0,"java.awt.Container"),class(_1,"java.awt.Graphics") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.awt.Graphics v1 = (java.awt.Graphics)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.printComponents(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=addContainerListener(_0,_1) :- class(_0,"java.awt.Container"),class(_1,"java.awt.event.ContainerListener") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.ContainerListener v1 = (java.awt.event.ContainerListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.addContainerListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=removeContainerListener(_0,_1) :- class(_0,"java.awt.Container"),class(_1,"java.awt.event.ContainerListener") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.ContainerListener v1 = (java.awt.event.ContainerListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.removeContainerListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getContainerListeners(_0,_1) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.event.ContainerListener[] r = v0.getContainerListeners();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getListeners(_0,_1,_2) :- class(_0,"java.awt.Container"),class(_1,"java.lang.Class") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.lang.Class v1 = (java.lang.Class)me.nthAtom(1).getFunctor().getValue();
	try {
		java.util.EventListener[] r = v0.getListeners(v1);
		runtime.Link l = new runtime.Link(me.nthAtom(2), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=deliverEvent(_0,_1) :- class(_0,"java.awt.Container"),class(_1,"java.awt.Event") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.awt.Event v1 = (java.awt.Event)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.deliverEvent(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getComponentAt(_0,_1,_2,_3) :- class(_0,"java.awt.Container"),int(_1),int(_2) | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		java.awt.Component r = v0.getComponentAt(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_awt_Component.use,(java_awt_Component.use:-()).

H=locate(_0,_1,_2,_3) :- class(_0,"java.awt.Container"),int(_1),int(_2) | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		java.awt.Component r = v0.locate(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_awt_Component.use,(java_awt_Component.use:-()).

H=getComponentAt(_0,_1,_2) :- class(_0,"java.awt.Container"),class(_1,"java.awt.Point") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.awt.Point v1 = (java.awt.Point)me.nthAtom(1).getFunctor().getValue();
	try {
		java.awt.Component r = v0.getComponentAt(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_awt_Component.use,(java_awt_Component.use:-()).

H=getMousePosition(_0,true,_2) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = true;
	try {
		java.awt.Point r = v0.getMousePosition(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,true,_2),java_awt_Point.use,(java_awt_Point.use:-()).

H=getMousePosition(_0,false,_2) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = false;
	try {
		java.awt.Point r = v0.getMousePosition(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,false,_2),java_awt_Point.use,(java_awt_Point.use:-()).

H=findComponentAt(_0,_1,_2,_3) :- class(_0,"java.awt.Container"),int(_1),int(_2) | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		java.awt.Component r = v0.findComponentAt(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_awt_Component.use,(java_awt_Component.use:-()).

H=findComponentAt(_0,_1,_2) :- class(_0,"java.awt.Container"),class(_1,"java.awt.Point") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.awt.Point v1 = (java.awt.Point)me.nthAtom(1).getFunctor().getValue();
	try {
		java.awt.Component r = v0.findComponentAt(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_awt_Component.use,(java_awt_Component.use:-()).

H=addNotify(_0) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.addNotify();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=removeNotify(_0) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.removeNotify();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=isAncestorOf(_0,_1,_2) :- class(_0,"java.awt.Container"),class(_1,"java.awt.Component") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.awt.Component v1 = (java.awt.Component)me.nthAtom(1).getFunctor().getValue();
	try {
		boolean r = v0.isAncestorOf(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=list(_0,_1,_2) :- class(_0,"java.awt.Container"),class(_1,"java.io.PrintStream"),int(_2) | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.io.PrintStream v1 = (java.io.PrintStream)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		v0.list(v1,v2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=list(_0,_1,_2) :- class(_0,"java.awt.Container"),class(_1,"java.io.PrintWriter"),int(_2) | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.io.PrintWriter v1 = (java.io.PrintWriter)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		v0.list(v1,v2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=setFocusTraversalKeys(_0,_1,_2) :- class(_0,"java.awt.Container"),int(_1),class(_2,"java.util.Set") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	java.util.Set v2 = (java.util.Set)me.nthAtom(2).getFunctor().getValue();
	try {
		v0.setFocusTraversalKeys(v1,v2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=getFocusTraversalKeys(_0,_1,_2) :- class(_0,"java.awt.Container"),int(_1) | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.util.Set r = v0.getFocusTraversalKeys(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_util_Set.use,(java_util_Set.use:-()).

H=areFocusTraversalKeysSet(_0,_1,_2) :- class(_0,"java.awt.Container"),int(_1) | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		boolean r = v0.areFocusTraversalKeysSet(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=isFocusCycleRoot(_0,_1,_2) :- class(_0,"java.awt.Container"),class(_1,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.awt.Container v1 = (java.awt.Container)me.nthAtom(1).getFunctor().getValue();
	try {
		boolean r = v0.isFocusCycleRoot(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=transferFocusBackward(_0) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.transferFocusBackward();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=setFocusTraversalPolicy(_0,_1) :- class(_0,"java.awt.Container"),class(_1,"java.awt.FocusTraversalPolicy") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.awt.FocusTraversalPolicy v1 = (java.awt.FocusTraversalPolicy)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setFocusTraversalPolicy(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getFocusTraversalPolicy(_0,_1) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.FocusTraversalPolicy r = v0.getFocusTraversalPolicy();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_FocusTraversalPolicy.use,(java_awt_FocusTraversalPolicy.use:-()).

H=isFocusTraversalPolicySet(_0,_1) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isFocusTraversalPolicySet();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setFocusCycleRoot(_0,true) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = true;
	try {
		v0.setFocusCycleRoot(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,true).

H=setFocusCycleRoot(_0,false) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = false;
	try {
		v0.setFocusCycleRoot(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,false).

H=isFocusCycleRoot(_0,_1) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isFocusCycleRoot();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setFocusTraversalPolicyProvider(_0,true) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = true;
	try {
		v0.setFocusTraversalPolicyProvider(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,true).

H=setFocusTraversalPolicyProvider(_0,false) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = false;
	try {
		v0.setFocusTraversalPolicyProvider(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,false).

H=isFocusTraversalPolicyProvider(_0,_1) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isFocusTraversalPolicyProvider();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=transferFocusDownCycle(_0) :- class(_0,"java.awt.Container") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.transferFocusDownCycle();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=applyComponentOrientation(_0,_1) :- class(_0,"java.awt.Container"),class(_1,"java.awt.ComponentOrientation") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.awt.ComponentOrientation v1 = (java.awt.ComponentOrientation)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.applyComponentOrientation(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=addPropertyChangeListener(_0,_1) :- class(_0,"java.awt.Container"),class(_1,"java.beans.PropertyChangeListener") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.beans.PropertyChangeListener v1 = (java.beans.PropertyChangeListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.addPropertyChangeListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=addPropertyChangeListener(_0,_1,_2) :- class(_0,"java.awt.Container"),string(_1),class(_2,"java.beans.PropertyChangeListener") | H=[:/*inline*/
	java.awt.Container v0 = (java.awt.Container)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	java.beans.PropertyChangeListener v2 = (java.beans.PropertyChangeListener)me.nthAtom(2).getFunctor().getValue();
	try {
		v0.addPropertyChangeListener(v1,v2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

}.
