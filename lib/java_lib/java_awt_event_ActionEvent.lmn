//-----------------------------------------------------
// The following code was generated by javalmn
// Wed Nov 22 20:46:45 2006
//-----------------------------------------------------
{module(java_awt_event_ActionEvent).
H=java_awt_event_ActionEvent.shift_mask :- H=[:/*inline*/
	int r = java.awt.event.ActionEvent.SHIFT_MASK;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_event_ActionEvent.ctrl_mask :- H=[:/*inline*/
	int r = java.awt.event.ActionEvent.CTRL_MASK;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_event_ActionEvent.meta_mask :- H=[:/*inline*/
	int r = java.awt.event.ActionEvent.META_MASK;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_event_ActionEvent.alt_mask :- H=[:/*inline*/
	int r = java.awt.event.ActionEvent.ALT_MASK;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_event_ActionEvent.action_first :- H=[:/*inline*/
	int r = java.awt.event.ActionEvent.ACTION_FIRST;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_event_ActionEvent.action_last :- H=[:/*inline*/
	int r = java.awt.event.ActionEvent.ACTION_LAST;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_event_ActionEvent.action_performed :- H=[:/*inline*/
	int r = java.awt.event.ActionEvent.ACTION_PERFORMED;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_event_ActionEvent.new(_0,_1,_2) :- class(_0,"java.lang.Object"),int(_1),string(_2) | H=[:/*inline*/
	java.lang.Object v0 = (java.lang.Object)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	java.lang.String v2 = ((StringFunctor)me.nthAtom(2).getFunctor()).stringValue();
	try {
		java.awt.event.ActionEvent r = new java.awt.event.ActionEvent(v0,v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 3);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2),java_awt_AWTEvent.use,(java_awt_AWTEvent.use:-()),java_util_EventObject.use,(java_util_EventObject.use:-()).

H=java_awt_event_ActionEvent.new(_0,_1,_2,_3) :- class(_0,"java.lang.Object"),int(_1),string(_2),int(_3) | H=[:/*inline*/
	java.lang.Object v0 = (java.lang.Object)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	java.lang.String v2 = ((StringFunctor)me.nthAtom(2).getFunctor()).stringValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	try {
		java.awt.event.ActionEvent r = new java.awt.event.ActionEvent(v0,v1,v2,v3);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 4);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.remove();
	:](_0,_1,_2,_3),java_awt_AWTEvent.use,(java_awt_AWTEvent.use:-()),java_util_EventObject.use,(java_util_EventObject.use:-()).

H=java_awt_event_ActionEvent.new(_0,_1,_2,_3,_4) :- class(_0,"java.lang.Object"),int(_1),string(_2),int(_3),int(_4) | H=[:/*inline*/
	java.lang.Object v0 = (java.lang.Object)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	java.lang.String v2 = ((StringFunctor)me.nthAtom(2).getFunctor()).stringValue();
	long v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	int v4 = ((IntegerFunctor)me.nthAtom(4).getFunctor()).intValue();
	try {
		java.awt.event.ActionEvent r = new java.awt.event.ActionEvent(v0,v1,v2,v3,v4);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 5);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 5);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.nthAtom(4).remove();
	me.remove();
	:](_0,_1,_2,_3,_4),java_awt_AWTEvent.use,(java_awt_AWTEvent.use:-()),java_util_EventObject.use,(java_util_EventObject.use:-()).

H=getActionCommand(_0,_1) :- class(_0,"java.awt.event.ActionEvent") | H=[:/*inline*/
	java.awt.event.ActionEvent v0 = (java.awt.event.ActionEvent)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.getActionCommand();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=getModifiers(_0,_1) :- class(_0,"java.awt.event.ActionEvent") | H=[:/*inline*/
	java.awt.event.ActionEvent v0 = (java.awt.event.ActionEvent)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.getModifiers();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=paramString(_0,_1) :- class(_0,"java.awt.event.ActionEvent") | H=[:/*inline*/
	java.awt.event.ActionEvent v0 = (java.awt.event.ActionEvent)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.paramString();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

}.
