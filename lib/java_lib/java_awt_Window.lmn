//-----------------------------------------------------
// The following code was generated by javalmn
// Wed Nov 22 20:46:44 2006
//-----------------------------------------------------
{module(java_awt_Window).
H=java_awt_Window.new(_0) :- class(_0,"java.awt.Frame") | H=[:/*inline*/
	java.awt.Frame v0 = (java.awt.Frame)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Window r = new java.awt.Window(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0),java_awt_Container.use,(java_awt_Container.use:-()),java_awt_Component.use,(java_awt_Component.use:-()).

H=java_awt_Window.new(_0) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Window r = new java.awt.Window(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0),java_awt_Container.use,(java_awt_Container.use:-()),java_awt_Component.use,(java_awt_Component.use:-()).

H=java_awt_Window.new(_0,_1) :- class(_0,"java.awt.Window"),class(_1,"java.awt.GraphicsConfiguration") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	java.awt.GraphicsConfiguration v1 = (java.awt.GraphicsConfiguration)me.nthAtom(1).getFunctor().getValue();
	try {
		java.awt.Window r = new java.awt.Window(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1),java_awt_Container.use,(java_awt_Container.use:-()),java_awt_Component.use,(java_awt_Component.use:-()).

H=addNotify(_0) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.addNotify();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=pack(_0) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.pack();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=show(_0) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.show();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=hide(_0) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.hide();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=dispose(_0) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.dispose();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=toFront(_0) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.toFront();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=toBack(_0) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.toBack();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=getToolkit(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Toolkit r = v0.getToolkit();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_Toolkit.use,(java_awt_Toolkit.use:-()).

H=getWarningString(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.getWarningString();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=getLocale(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		java.util.Locale r = v0.getLocale();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_util_Locale.use,(java_util_Locale.use:-()).

H=getInputContext(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.im.InputContext r = v0.getInputContext();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_im_InputContext.use,(java_awt_im_InputContext.use:-()).

H=setCursor(_0,_1) :- class(_0,"java.awt.Window"),class(_1,"java.awt.Cursor") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	java.awt.Cursor v1 = (java.awt.Cursor)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setCursor(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getOwner(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Window r = v0.getOwner();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_Window.use,(java_awt_Window.use:-()).

H=getOwnedWindows(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Window[] r = v0.getOwnedWindows();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=addWindowListener(_0,_1) :- class(_0,"java.awt.Window"),class(_1,"java.awt.event.WindowListener") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.WindowListener v1 = (java.awt.event.WindowListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.addWindowListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=addWindowStateListener(_0,_1) :- class(_0,"java.awt.Window"),class(_1,"java.awt.event.WindowStateListener") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.WindowStateListener v1 = (java.awt.event.WindowStateListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.addWindowStateListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=addWindowFocusListener(_0,_1) :- class(_0,"java.awt.Window"),class(_1,"java.awt.event.WindowFocusListener") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.WindowFocusListener v1 = (java.awt.event.WindowFocusListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.addWindowFocusListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=removeWindowListener(_0,_1) :- class(_0,"java.awt.Window"),class(_1,"java.awt.event.WindowListener") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.WindowListener v1 = (java.awt.event.WindowListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.removeWindowListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=removeWindowStateListener(_0,_1) :- class(_0,"java.awt.Window"),class(_1,"java.awt.event.WindowStateListener") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.WindowStateListener v1 = (java.awt.event.WindowStateListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.removeWindowStateListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=removeWindowFocusListener(_0,_1) :- class(_0,"java.awt.Window"),class(_1,"java.awt.event.WindowFocusListener") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.WindowFocusListener v1 = (java.awt.event.WindowFocusListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.removeWindowFocusListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getWindowListeners(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.event.WindowListener[] r = v0.getWindowListeners();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getWindowFocusListeners(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.event.WindowFocusListener[] r = v0.getWindowFocusListeners();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getWindowStateListeners(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.event.WindowStateListener[] r = v0.getWindowStateListeners();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getListeners(_0,_1,_2) :- class(_0,"java.awt.Window"),class(_1,"java.lang.Class") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	java.lang.Class v1 = (java.lang.Class)me.nthAtom(1).getFunctor().getValue();
	try {
		java.util.EventListener[] r = v0.getListeners(v1);
		runtime.Link l = new runtime.Link(me.nthAtom(2), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=setAlwaysOnTop(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = ((SymbolFunctor)me.nthAtom(1).getFunctor()).getName().equals("true")?true:false;
	try {
		v0.setAlwaysOnTop(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=isAlwaysOnTop(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isAlwaysOnTop();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getFocusOwner(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Component r = v0.getFocusOwner();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_Component.use,(java_awt_Component.use:-()).

H=getMostRecentFocusOwner(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Component r = v0.getMostRecentFocusOwner();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_Component.use,(java_awt_Component.use:-()).

H=isActive(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isActive();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=isFocused(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isFocused();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getFocusTraversalKeys(_0,_1,_2) :- class(_0,"java.awt.Window"),int(_1) | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.util.Set r = v0.getFocusTraversalKeys(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_util_Set.use,(java_util_Set.use:-()).

H=setFocusCycleRoot(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = ((SymbolFunctor)me.nthAtom(1).getFunctor()).getName().equals("true")?true:false;
	try {
		v0.setFocusCycleRoot(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=isFocusCycleRoot(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isFocusCycleRoot();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getFocusCycleRootAncestor(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Container r = v0.getFocusCycleRootAncestor();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_Container.use,(java_awt_Container.use:-()).

H=isFocusableWindow(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isFocusableWindow();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getFocusableWindowState(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.getFocusableWindowState();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setFocusableWindowState(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = ((SymbolFunctor)me.nthAtom(1).getFunctor()).getName().equals("true")?true:false;
	try {
		v0.setFocusableWindowState(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=addPropertyChangeListener(_0,_1) :- class(_0,"java.awt.Window"),class(_1,"java.beans.PropertyChangeListener") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	java.beans.PropertyChangeListener v1 = (java.beans.PropertyChangeListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.addPropertyChangeListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=addPropertyChangeListener(_0,_1,_2) :- class(_0,"java.awt.Window"),string(_1),class(_2,"java.beans.PropertyChangeListener") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	java.beans.PropertyChangeListener v2 = (java.beans.PropertyChangeListener)me.nthAtom(2).getFunctor().getValue();
	try {
		v0.addPropertyChangeListener(v1,v2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=postEvent(_0,_1,_2) :- class(_0,"java.awt.Window"),class(_1,"java.awt.Event") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	java.awt.Event v1 = (java.awt.Event)me.nthAtom(1).getFunctor().getValue();
	try {
		boolean r = v0.postEvent(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=isShowing(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isShowing();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=applyResourceBundle(_0,_1) :- class(_0,"java.awt.Window"),class(_1,"java.util.ResourceBundle") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	java.util.ResourceBundle v1 = (java.util.ResourceBundle)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.applyResourceBundle(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=applyResourceBundle(_0,_1) :- class(_0,"java.awt.Window"),string(_1) | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		v0.applyResourceBundle(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getAccessibleContext(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.accessibility.AccessibleContext r = v0.getAccessibleContext();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),javax_accessibility_AccessibleContext.use,(javax_accessibility_AccessibleContext.use:-()).

H=getGraphicsConfiguration(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.GraphicsConfiguration r = v0.getGraphicsConfiguration();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_GraphicsConfiguration.use,(java_awt_GraphicsConfiguration.use:-()).

H=setLocationRelativeTo(_0,_1) :- class(_0,"java.awt.Window"),class(_1,"java.awt.Component") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	java.awt.Component v1 = (java.awt.Component)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setLocationRelativeTo(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=createBufferStrategy(_0,_1) :- class(_0,"java.awt.Window"),int(_1) | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		v0.createBufferStrategy(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=createBufferStrategy(_0,_1,_2) :- class(_0,"java.awt.Window"),int(_1),class(_2,"java.awt.BufferCapabilities") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	java.awt.BufferCapabilities v2 = (java.awt.BufferCapabilities)me.nthAtom(2).getFunctor().getValue();
	try {
		v0.createBufferStrategy(v1,v2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=getBufferStrategy(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.image.BufferStrategy r = v0.getBufferStrategy();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_image_BufferStrategy.use,(java_awt_image_BufferStrategy.use:-()).

H=setLocationByPlatform(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = ((SymbolFunctor)me.nthAtom(1).getFunctor()).getName().equals("true")?true:false;
	try {
		v0.setLocationByPlatform(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=isLocationByPlatform(_0,_1) :- class(_0,"java.awt.Window") | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isLocationByPlatform();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setBounds(_0,_1,_2,_3,_4) :- class(_0,"java.awt.Window"),int(_1),int(_2),int(_3),int(_4) | H=[:/*inline*/
	java.awt.Window v0 = (java.awt.Window)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	int v4 = ((IntegerFunctor)me.nthAtom(4).getFunctor()).intValue();
	try {
		v0.setBounds(v1,v2,v3,v4);
		mem.relink(me.nthAtom(0), 0, me, 5);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 5);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.nthAtom(4).remove();
	me.remove();
	:](_0,_1,_2,_3,_4).

}.
