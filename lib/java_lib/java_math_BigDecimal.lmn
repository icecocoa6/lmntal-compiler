//-----------------------------------------------------
// The following code was generated by class2module.pl 
// Mon Jan 15 21:52:33 2007
//-----------------------------------------------------
{module(java_math_BigDecimal).
H=java_math_BigDecimal.zero :- H=[:/*inline*/
	java.math.BigDecimal r = java.math.BigDecimal.ZERO;
	Atom res = mem.newAtom(new ObjectFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=java_math_BigDecimal.one :- H=[:/*inline*/
	java.math.BigDecimal r = java.math.BigDecimal.ONE;
	Atom res = mem.newAtom(new ObjectFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=java_math_BigDecimal.ten :- H=[:/*inline*/
	java.math.BigDecimal r = java.math.BigDecimal.TEN;
	Atom res = mem.newAtom(new ObjectFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=java_math_BigDecimal.round_up :- H=[:/*inline*/
	int r = java.math.BigDecimal.ROUND_UP;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_math_BigDecimal.round_down :- H=[:/*inline*/
	int r = java.math.BigDecimal.ROUND_DOWN;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_math_BigDecimal.round_ceiling :- H=[:/*inline*/
	int r = java.math.BigDecimal.ROUND_CEILING;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_math_BigDecimal.round_floor :- H=[:/*inline*/
	int r = java.math.BigDecimal.ROUND_FLOOR;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_math_BigDecimal.round_half_up :- H=[:/*inline*/
	int r = java.math.BigDecimal.ROUND_HALF_UP;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_math_BigDecimal.round_half_down :- H=[:/*inline*/
	int r = java.math.BigDecimal.ROUND_HALF_DOWN;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_math_BigDecimal.round_half_even :- H=[:/*inline*/
	int r = java.math.BigDecimal.ROUND_HALF_EVEN;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_math_BigDecimal.round_unnecessary :- H=[:/*inline*/
	int r = java.math.BigDecimal.ROUND_UNNECESSARY;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_math_BigDecimal.new(_0) :- string(_0) | H=[:/*inline*/
	java.lang.String v0 = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	try {
		java.math.BigDecimal r = new java.math.BigDecimal(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0),java_lang_Number.use,(java_lang_Number.use:-()).

H=java_math_BigDecimal.new(_0,_1) :- string(_0),class(_1,"java.math.MathContext") | H=[:/*inline*/
	java.lang.String v0 = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	java.math.MathContext v1 = (java.math.MathContext)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigDecimal r = new java.math.BigDecimal(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1),java_lang_Number.use,(java_lang_Number.use:-()).

H=java_math_BigDecimal.new(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		java.math.BigDecimal r = new java.math.BigDecimal(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0),java_lang_Number.use,(java_lang_Number.use:-()).

H=java_math_BigDecimal.new(_0,_1) :- float(_0),class(_1,"java.math.MathContext") | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	java.math.MathContext v1 = (java.math.MathContext)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigDecimal r = new java.math.BigDecimal(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1),java_lang_Number.use,(java_lang_Number.use:-()).

H=java_math_BigDecimal.new(_0) :- class(_0,"java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	try {
		java.math.BigDecimal r = new java.math.BigDecimal(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0),java_lang_Number.use,(java_lang_Number.use:-()).

H=java_math_BigDecimal.new(_0,_1) :- class(_0,"java.math.BigInteger"),class(_1,"java.math.MathContext") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	java.math.MathContext v1 = (java.math.MathContext)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigDecimal r = new java.math.BigDecimal(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1),java_lang_Number.use,(java_lang_Number.use:-()).

H=java_math_BigDecimal.new(_0,_1) :- class(_0,"java.math.BigInteger"),int(_1) | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.math.BigDecimal r = new java.math.BigDecimal(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1),java_lang_Number.use,(java_lang_Number.use:-()).

H=java_math_BigDecimal.new(_0,_1,_2) :- class(_0,"java.math.BigInteger"),int(_1),class(_2,"java.math.MathContext") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	java.math.MathContext v2 = (java.math.MathContext)me.nthAtom(2).getFunctor().getValue();
	try {
		java.math.BigDecimal r = new java.math.BigDecimal(v0,v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 3);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2),java_lang_Number.use,(java_lang_Number.use:-()).

H=java_math_BigDecimal.new(_0) :- int(_0) | H=[:/*inline*/
	int v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	try {
		java.math.BigDecimal r = new java.math.BigDecimal(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0),java_lang_Number.use,(java_lang_Number.use:-()).

H=java_math_BigDecimal.new(_0,_1) :- int(_0),class(_1,"java.math.MathContext") | H=[:/*inline*/
	int v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	java.math.MathContext v1 = (java.math.MathContext)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigDecimal r = new java.math.BigDecimal(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1),java_lang_Number.use,(java_lang_Number.use:-()).

H=java_math_BigDecimal.new(_0) :- int(_0) | H=[:/*inline*/
	long v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	try {
		java.math.BigDecimal r = new java.math.BigDecimal(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0),java_lang_Number.use,(java_lang_Number.use:-()).

H=java_math_BigDecimal.new(_0,_1) :- int(_0),class(_1,"java.math.MathContext") | H=[:/*inline*/
	long v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	java.math.MathContext v1 = (java.math.MathContext)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigDecimal r = new java.math.BigDecimal(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1),java_lang_Number.use,(java_lang_Number.use:-()).

H=java_math_BigDecimal.valueOf(_0,_1) :- int(_0),int(_1) | H=[:/*inline*/
	long v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.math.BigDecimal r = java.math.BigDecimal.valueOf(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=java_math_BigDecimal.valueOf(_0) :- int(_0) | H=[:/*inline*/
	long v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	try {
		java.math.BigDecimal r = java.math.BigDecimal.valueOf(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=java_math_BigDecimal.valueOf(_0) :- float(_0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		java.math.BigDecimal r = java.math.BigDecimal.valueOf(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=add(_0,_1,_2) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.BigDecimal v1 = (java.math.BigDecimal)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.add(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=add(_0,_1,_2,_3) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.BigDecimal"),class(_2,"java.math.MathContext") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.BigDecimal v1 = (java.math.BigDecimal)me.nthAtom(1).getFunctor().getValue();
	java.math.MathContext v2 = (java.math.MathContext)me.nthAtom(2).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.add(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=subtract(_0,_1,_2) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.BigDecimal v1 = (java.math.BigDecimal)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.subtract(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=subtract(_0,_1,_2,_3) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.BigDecimal"),class(_2,"java.math.MathContext") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.BigDecimal v1 = (java.math.BigDecimal)me.nthAtom(1).getFunctor().getValue();
	java.math.MathContext v2 = (java.math.MathContext)me.nthAtom(2).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.subtract(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=multiply(_0,_1,_2) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.BigDecimal v1 = (java.math.BigDecimal)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.multiply(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=multiply(_0,_1,_2,_3) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.BigDecimal"),class(_2,"java.math.MathContext") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.BigDecimal v1 = (java.math.BigDecimal)me.nthAtom(1).getFunctor().getValue();
	java.math.MathContext v2 = (java.math.MathContext)me.nthAtom(2).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.multiply(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=divide(_0,_1,_2,_3,_4) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.BigDecimal"),int(_2),int(_3) | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.BigDecimal v1 = (java.math.BigDecimal)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	try {
		java.math.BigDecimal r = v0.divide(v1,v2,v3);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 4);
		mem.relink(me.nthAtom(0), 0, me, 5);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 4);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 5);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.remove();
	:](_0,_1,_2,_3,_4),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=divide(_0,_1,_2,_3,_4) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.BigDecimal"),int(_2),class(_3,"java.math.RoundingMode") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.BigDecimal v1 = (java.math.BigDecimal)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	java.math.RoundingMode v3 = (java.math.RoundingMode)me.nthAtom(3).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.divide(v1,v2,v3);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 4);
		mem.relink(me.nthAtom(0), 0, me, 5);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 4);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 5);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.remove();
	:](_0,_1,_2,_3,_4),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=divide(_0,_1,_2,_3) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.BigDecimal"),int(_2) | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.BigDecimal v1 = (java.math.BigDecimal)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		java.math.BigDecimal r = v0.divide(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=divide(_0,_1,_2,_3) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.BigDecimal"),class(_2,"java.math.RoundingMode") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.BigDecimal v1 = (java.math.BigDecimal)me.nthAtom(1).getFunctor().getValue();
	java.math.RoundingMode v2 = (java.math.RoundingMode)me.nthAtom(2).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.divide(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=divide(_0,_1,_2) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.BigDecimal v1 = (java.math.BigDecimal)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.divide(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=divide(_0,_1,_2,_3) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.BigDecimal"),class(_2,"java.math.MathContext") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.BigDecimal v1 = (java.math.BigDecimal)me.nthAtom(1).getFunctor().getValue();
	java.math.MathContext v2 = (java.math.MathContext)me.nthAtom(2).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.divide(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=divideToIntegralValue(_0,_1,_2) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.BigDecimal v1 = (java.math.BigDecimal)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.divideToIntegralValue(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=divideToIntegralValue(_0,_1,_2,_3) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.BigDecimal"),class(_2,"java.math.MathContext") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.BigDecimal v1 = (java.math.BigDecimal)me.nthAtom(1).getFunctor().getValue();
	java.math.MathContext v2 = (java.math.MathContext)me.nthAtom(2).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.divideToIntegralValue(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=remainder(_0,_1,_2) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.BigDecimal v1 = (java.math.BigDecimal)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.remainder(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=remainder(_0,_1,_2,_3) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.BigDecimal"),class(_2,"java.math.MathContext") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.BigDecimal v1 = (java.math.BigDecimal)me.nthAtom(1).getFunctor().getValue();
	java.math.MathContext v2 = (java.math.MathContext)me.nthAtom(2).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.remainder(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=divideAndRemainder(_0,_1,_2) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.BigDecimal v1 = (java.math.BigDecimal)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigDecimal[] r = v0.divideAndRemainder(v1);
		runtime.Link l = new runtime.Link(me.nthAtom(2), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=divideAndRemainder(_0,_1,_2,_3) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.BigDecimal"),class(_2,"java.math.MathContext") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.BigDecimal v1 = (java.math.BigDecimal)me.nthAtom(1).getFunctor().getValue();
	java.math.MathContext v2 = (java.math.MathContext)me.nthAtom(2).getFunctor().getValue();
	try {
		java.math.BigDecimal[] r = v0.divideAndRemainder(v1,v2);
		runtime.Link l = new runtime.Link(me.nthAtom(3), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=pow(_0,_1,_2) :- class(_0,"java.math.BigDecimal"),int(_1) | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.math.BigDecimal r = v0.pow(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=pow(_0,_1,_2,_3) :- class(_0,"java.math.BigDecimal"),int(_1),class(_2,"java.math.MathContext") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	java.math.MathContext v2 = (java.math.MathContext)me.nthAtom(2).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.pow(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=abs(_0,_1) :- class(_0,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.abs();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=abs(_0,_1,_2) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.MathContext") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.MathContext v1 = (java.math.MathContext)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.abs(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=negate(_0,_1) :- class(_0,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.negate();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=negate(_0,_1,_2) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.MathContext") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.MathContext v1 = (java.math.MathContext)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.negate(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=plus(_0,_1) :- class(_0,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.plus();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=plus(_0,_1,_2) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.MathContext") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.MathContext v1 = (java.math.MathContext)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.plus(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=signum(_0,_1) :- class(_0,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.signum();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=scale(_0,_1) :- class(_0,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.scale();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=precision(_0,_1) :- class(_0,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.precision();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=unscaledValue(_0,_1) :- class(_0,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	try {
		java.math.BigInteger r = v0.unscaledValue();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=round(_0,_1,_2) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.MathContext") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.MathContext v1 = (java.math.MathContext)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.round(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=setScale(_0,_1,_2,_3) :- class(_0,"java.math.BigDecimal"),int(_1),class(_2,"java.math.RoundingMode") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	java.math.RoundingMode v2 = (java.math.RoundingMode)me.nthAtom(2).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.setScale(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=setScale(_0,_1,_2,_3) :- class(_0,"java.math.BigDecimal"),int(_1),int(_2) | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		java.math.BigDecimal r = v0.setScale(v1,v2);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=setScale(_0,_1,_2) :- class(_0,"java.math.BigDecimal"),int(_1) | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.math.BigDecimal r = v0.setScale(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=movePointLeft(_0,_1,_2) :- class(_0,"java.math.BigDecimal"),int(_1) | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.math.BigDecimal r = v0.movePointLeft(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=movePointRight(_0,_1,_2) :- class(_0,"java.math.BigDecimal"),int(_1) | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.math.BigDecimal r = v0.movePointRight(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=scaleByPowerOfTen(_0,_1,_2) :- class(_0,"java.math.BigDecimal"),int(_1) | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.math.BigDecimal r = v0.scaleByPowerOfTen(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=stripTrailingZeros(_0,_1) :- class(_0,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.stripTrailingZeros();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=compareTo(_0,_1,_2) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.BigDecimal v1 = (java.math.BigDecimal)me.nthAtom(1).getFunctor().getValue();
	try {
		int r = v0.compareTo(v1);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=equals(_0,_1,_2) :- class(_0,"java.math.BigDecimal"),class(_1,"java.lang.Object") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.lang.Object v1 = (java.lang.Object)me.nthAtom(1).getFunctor().getValue();
	try {
		boolean r = v0.equals(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=min(_0,_1,_2) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.BigDecimal v1 = (java.math.BigDecimal)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.min(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=max(_0,_1,_2) :- class(_0,"java.math.BigDecimal"),class(_1,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	java.math.BigDecimal v1 = (java.math.BigDecimal)me.nthAtom(1).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.max(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

H=hashCode(_0,_1) :- class(_0,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.hashCode();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=toString(_0,_1) :- class(_0,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.toString();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=toEngineeringString(_0,_1) :- class(_0,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.toEngineeringString();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=toPlainString(_0,_1) :- class(_0,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.toPlainString();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=toBigInteger(_0,_1) :- class(_0,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	try {
		java.math.BigInteger r = v0.toBigInteger();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=toBigIntegerExact(_0,_1) :- class(_0,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	try {
		java.math.BigInteger r = v0.toBigIntegerExact();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_math_BigInteger.use,(java_math_BigInteger.use:-()).

H=intValue(_0,_1) :- class(_0,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.intValue();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=intValueExact(_0,_1) :- class(_0,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.intValueExact();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=doubleValue(_0,_1) :- class(_0,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	try {
		double r = v0.doubleValue();
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=ulp(_0,_1) :- class(_0,"java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal v0 = (java.math.BigDecimal)me.nthAtom(0).getFunctor().getValue();
	try {
		java.math.BigDecimal r = v0.ulp();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_math_BigDecimal.use,(java_math_BigDecimal.use:-()).

}.
