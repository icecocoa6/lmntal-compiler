//-----------------------------------------------------
// The following code was generated by javalmn
// Tue Nov 21 22:05:42 2006
//-----------------------------------------------------
{module(java_awt_AWTEvent).
H=java_awt_AWTEvent.component_event_mask :- H=[:/*inline*/
	long r = java.awt.AWTEvent.COMPONENT_EVENT_MASK;
	Atom res = mem.newAtom(new IntegerFunctor((int)r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_AWTEvent.container_event_mask :- H=[:/*inline*/
	long r = java.awt.AWTEvent.CONTAINER_EVENT_MASK;
	Atom res = mem.newAtom(new IntegerFunctor((int)r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_AWTEvent.focus_event_mask :- H=[:/*inline*/
	long r = java.awt.AWTEvent.FOCUS_EVENT_MASK;
	Atom res = mem.newAtom(new IntegerFunctor((int)r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_AWTEvent.key_event_mask :- H=[:/*inline*/
	long r = java.awt.AWTEvent.KEY_EVENT_MASK;
	Atom res = mem.newAtom(new IntegerFunctor((int)r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_AWTEvent.mouse_event_mask :- H=[:/*inline*/
	long r = java.awt.AWTEvent.MOUSE_EVENT_MASK;
	Atom res = mem.newAtom(new IntegerFunctor((int)r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_AWTEvent.mouse_motion_event_mask :- H=[:/*inline*/
	long r = java.awt.AWTEvent.MOUSE_MOTION_EVENT_MASK;
	Atom res = mem.newAtom(new IntegerFunctor((int)r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_AWTEvent.window_event_mask :- H=[:/*inline*/
	long r = java.awt.AWTEvent.WINDOW_EVENT_MASK;
	Atom res = mem.newAtom(new IntegerFunctor((int)r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_AWTEvent.action_event_mask :- H=[:/*inline*/
	long r = java.awt.AWTEvent.ACTION_EVENT_MASK;
	Atom res = mem.newAtom(new IntegerFunctor((int)r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_AWTEvent.adjustment_event_mask :- H=[:/*inline*/
	long r = java.awt.AWTEvent.ADJUSTMENT_EVENT_MASK;
	Atom res = mem.newAtom(new IntegerFunctor((int)r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_AWTEvent.item_event_mask :- H=[:/*inline*/
	long r = java.awt.AWTEvent.ITEM_EVENT_MASK;
	Atom res = mem.newAtom(new IntegerFunctor((int)r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_AWTEvent.text_event_mask :- H=[:/*inline*/
	long r = java.awt.AWTEvent.TEXT_EVENT_MASK;
	Atom res = mem.newAtom(new IntegerFunctor((int)r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_AWTEvent.input_method_event_mask :- H=[:/*inline*/
	long r = java.awt.AWTEvent.INPUT_METHOD_EVENT_MASK;
	Atom res = mem.newAtom(new IntegerFunctor((int)r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_AWTEvent.paint_event_mask :- H=[:/*inline*/
	long r = java.awt.AWTEvent.PAINT_EVENT_MASK;
	Atom res = mem.newAtom(new IntegerFunctor((int)r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_AWTEvent.invocation_event_mask :- H=[:/*inline*/
	long r = java.awt.AWTEvent.INVOCATION_EVENT_MASK;
	Atom res = mem.newAtom(new IntegerFunctor((int)r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_AWTEvent.hierarchy_event_mask :- H=[:/*inline*/
	long r = java.awt.AWTEvent.HIERARCHY_EVENT_MASK;
	Atom res = mem.newAtom(new IntegerFunctor((int)r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_AWTEvent.hierarchy_bounds_event_mask :- H=[:/*inline*/
	long r = java.awt.AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK;
	Atom res = mem.newAtom(new IntegerFunctor((int)r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_AWTEvent.mouse_wheel_event_mask :- H=[:/*inline*/
	long r = java.awt.AWTEvent.MOUSE_WHEEL_EVENT_MASK;
	Atom res = mem.newAtom(new IntegerFunctor((int)r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_AWTEvent.window_state_event_mask :- H=[:/*inline*/
	long r = java.awt.AWTEvent.WINDOW_STATE_EVENT_MASK;
	Atom res = mem.newAtom(new IntegerFunctor((int)r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_AWTEvent.window_focus_event_mask :- H=[:/*inline*/
	long r = java.awt.AWTEvent.WINDOW_FOCUS_EVENT_MASK;
	Atom res = mem.newAtom(new IntegerFunctor((int)r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_AWTEvent.reserved_id_max :- H=[:/*inline*/
	int r = java.awt.AWTEvent.RESERVED_ID_MAX;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=setSource(_0,_1) :- class(_0,"java.awt.AWTEvent"),class(_1,"java.lang.Object") | H=[:/*inline*/
	java.awt.AWTEvent v0 = (java.awt.AWTEvent)me.nthAtom(0).getFunctor().getValue();
	java.lang.Object v1 = (java.lang.Object)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setSource(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getID(_0,_1) :- class(_0,"java.awt.AWTEvent") | H=[:/*inline*/
	java.awt.AWTEvent v0 = (java.awt.AWTEvent)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.getID();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=toString(_0,_1) :- class(_0,"java.awt.AWTEvent") | H=[:/*inline*/
	java.awt.AWTEvent v0 = (java.awt.AWTEvent)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.toString();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=paramString(_0,_1) :- class(_0,"java.awt.AWTEvent") | H=[:/*inline*/
	java.awt.AWTEvent v0 = (java.awt.AWTEvent)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.paramString();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

}.
