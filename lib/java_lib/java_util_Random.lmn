//-----------------------------------------------------
// The following code was generated by javalmn
// Tue Nov 21 22:45:23 2006
//-----------------------------------------------------
{module(java_util_Random).
H=java_util_Random.new() :- H=[:/*inline*/
	try {
		java.util.Random r = new java.util.Random();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 0);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 0);
	}
	me.remove();
	:]().

H=java_util_Random.new(_0) :- int(_0) | H=[:/*inline*/
	long v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	try {
		java.util.Random r = new java.util.Random(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=setSeed(_0,_1) :- class(_0,"java.util.Random"),int(_1) | H=[:/*inline*/
	java.util.Random v0 = (java.util.Random)me.nthAtom(0).getFunctor().getValue();
	long v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		v0.setSeed(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=nextInt(_0,_1) :- class(_0,"java.util.Random") | H=[:/*inline*/
	java.util.Random v0 = (java.util.Random)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.nextInt();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=nextInt(_0,_1,_2) :- class(_0,"java.util.Random"),int(_1) | H=[:/*inline*/
	java.util.Random v0 = (java.util.Random)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		int r = v0.nextInt(v1);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=nextBoolean(_0,_1) :- class(_0,"java.util.Random") | H=[:/*inline*/
	java.util.Random v0 = (java.util.Random)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.nextBoolean();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=nextDouble(_0,_1) :- class(_0,"java.util.Random") | H=[:/*inline*/
	java.util.Random v0 = (java.util.Random)me.nthAtom(0).getFunctor().getValue();
	try {
		double r = v0.nextDouble();
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=nextGaussian(_0,_1) :- class(_0,"java.util.Random") | H=[:/*inline*/
	java.util.Random v0 = (java.util.Random)me.nthAtom(0).getFunctor().getValue();
	try {
		double r = v0.nextGaussian();
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

}.
