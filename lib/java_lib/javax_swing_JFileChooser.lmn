//-----------------------------------------------------
// The following code was generated by class2module.pl 
// Wed Dec 13 12:32:25 2006
//-----------------------------------------------------
{module(javax_swing_JFileChooser).
H=javax_swing_JFileChooser.open_dialog :- H=[:/*inline*/
	int r = javax.swing.JFileChooser.OPEN_DIALOG;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=javax_swing_JFileChooser.save_dialog :- H=[:/*inline*/
	int r = javax.swing.JFileChooser.SAVE_DIALOG;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=javax_swing_JFileChooser.custom_dialog :- H=[:/*inline*/
	int r = javax.swing.JFileChooser.CUSTOM_DIALOG;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=javax_swing_JFileChooser.cancel_option :- H=[:/*inline*/
	int r = javax.swing.JFileChooser.CANCEL_OPTION;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=javax_swing_JFileChooser.approve_option :- H=[:/*inline*/
	int r = javax.swing.JFileChooser.APPROVE_OPTION;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=javax_swing_JFileChooser.error_option :- H=[:/*inline*/
	int r = javax.swing.JFileChooser.ERROR_OPTION;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=javax_swing_JFileChooser.files_only :- H=[:/*inline*/
	int r = javax.swing.JFileChooser.FILES_ONLY;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=javax_swing_JFileChooser.directories_only :- H=[:/*inline*/
	int r = javax.swing.JFileChooser.DIRECTORIES_ONLY;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=javax_swing_JFileChooser.files_and_directories :- H=[:/*inline*/
	int r = javax.swing.JFileChooser.FILES_AND_DIRECTORIES;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=javax_swing_JFileChooser.cancel_selection :- H=[:/*inline*/
	java.lang.String r = javax.swing.JFileChooser.CANCEL_SELECTION;
	Atom res = mem.newAtom(new StringFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_lang_String.use,(java_lang_String.use:-()).

H=javax_swing_JFileChooser.approve_selection :- H=[:/*inline*/
	java.lang.String r = javax.swing.JFileChooser.APPROVE_SELECTION;
	Atom res = mem.newAtom(new StringFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_lang_String.use,(java_lang_String.use:-()).

H=javax_swing_JFileChooser.approve_button_text_changed_property :- H=[:/*inline*/
	java.lang.String r = javax.swing.JFileChooser.APPROVE_BUTTON_TEXT_CHANGED_PROPERTY;
	Atom res = mem.newAtom(new StringFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_lang_String.use,(java_lang_String.use:-()).

H=javax_swing_JFileChooser.approve_button_tool_tip_text_changed_property :- H=[:/*inline*/
	java.lang.String r = javax.swing.JFileChooser.APPROVE_BUTTON_TOOL_TIP_TEXT_CHANGED_PROPERTY;
	Atom res = mem.newAtom(new StringFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_lang_String.use,(java_lang_String.use:-()).

H=javax_swing_JFileChooser.approve_button_mnemonic_changed_property :- H=[:/*inline*/
	java.lang.String r = javax.swing.JFileChooser.APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY;
	Atom res = mem.newAtom(new StringFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_lang_String.use,(java_lang_String.use:-()).

H=javax_swing_JFileChooser.control_buttons_are_shown_changed_property :- H=[:/*inline*/
	java.lang.String r = javax.swing.JFileChooser.CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY;
	Atom res = mem.newAtom(new StringFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_lang_String.use,(java_lang_String.use:-()).

H=javax_swing_JFileChooser.directory_changed_property :- H=[:/*inline*/
	java.lang.String r = javax.swing.JFileChooser.DIRECTORY_CHANGED_PROPERTY;
	Atom res = mem.newAtom(new StringFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_lang_String.use,(java_lang_String.use:-()).

H=javax_swing_JFileChooser.selected_file_changed_property :- H=[:/*inline*/
	java.lang.String r = javax.swing.JFileChooser.SELECTED_FILE_CHANGED_PROPERTY;
	Atom res = mem.newAtom(new StringFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_lang_String.use,(java_lang_String.use:-()).

H=javax_swing_JFileChooser.selected_files_changed_property :- H=[:/*inline*/
	java.lang.String r = javax.swing.JFileChooser.SELECTED_FILES_CHANGED_PROPERTY;
	Atom res = mem.newAtom(new StringFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_lang_String.use,(java_lang_String.use:-()).

H=javax_swing_JFileChooser.multi_selection_enabled_changed_property :- H=[:/*inline*/
	java.lang.String r = javax.swing.JFileChooser.MULTI_SELECTION_ENABLED_CHANGED_PROPERTY;
	Atom res = mem.newAtom(new StringFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_lang_String.use,(java_lang_String.use:-()).

H=javax_swing_JFileChooser.file_system_view_changed_property :- H=[:/*inline*/
	java.lang.String r = javax.swing.JFileChooser.FILE_SYSTEM_VIEW_CHANGED_PROPERTY;
	Atom res = mem.newAtom(new StringFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_lang_String.use,(java_lang_String.use:-()).

H=javax_swing_JFileChooser.file_view_changed_property :- H=[:/*inline*/
	java.lang.String r = javax.swing.JFileChooser.FILE_VIEW_CHANGED_PROPERTY;
	Atom res = mem.newAtom(new StringFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_lang_String.use,(java_lang_String.use:-()).

H=javax_swing_JFileChooser.file_hiding_changed_property :- H=[:/*inline*/
	java.lang.String r = javax.swing.JFileChooser.FILE_HIDING_CHANGED_PROPERTY;
	Atom res = mem.newAtom(new StringFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_lang_String.use,(java_lang_String.use:-()).

H=javax_swing_JFileChooser.file_filter_changed_property :- H=[:/*inline*/
	java.lang.String r = javax.swing.JFileChooser.FILE_FILTER_CHANGED_PROPERTY;
	Atom res = mem.newAtom(new StringFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_lang_String.use,(java_lang_String.use:-()).

H=javax_swing_JFileChooser.file_selection_mode_changed_property :- H=[:/*inline*/
	java.lang.String r = javax.swing.JFileChooser.FILE_SELECTION_MODE_CHANGED_PROPERTY;
	Atom res = mem.newAtom(new StringFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_lang_String.use,(java_lang_String.use:-()).

H=javax_swing_JFileChooser.accessory_changed_property :- H=[:/*inline*/
	java.lang.String r = javax.swing.JFileChooser.ACCESSORY_CHANGED_PROPERTY;
	Atom res = mem.newAtom(new StringFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_lang_String.use,(java_lang_String.use:-()).

H=javax_swing_JFileChooser.accept_all_file_filter_used_changed_property :- H=[:/*inline*/
	java.lang.String r = javax.swing.JFileChooser.ACCEPT_ALL_FILE_FILTER_USED_CHANGED_PROPERTY;
	Atom res = mem.newAtom(new StringFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_lang_String.use,(java_lang_String.use:-()).

H=javax_swing_JFileChooser.dialog_title_changed_property :- H=[:/*inline*/
	java.lang.String r = javax.swing.JFileChooser.DIALOG_TITLE_CHANGED_PROPERTY;
	Atom res = mem.newAtom(new StringFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_lang_String.use,(java_lang_String.use:-()).

H=javax_swing_JFileChooser.dialog_type_changed_property :- H=[:/*inline*/
	java.lang.String r = javax.swing.JFileChooser.DIALOG_TYPE_CHANGED_PROPERTY;
	Atom res = mem.newAtom(new StringFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_lang_String.use,(java_lang_String.use:-()).

H=javax_swing_JFileChooser.choosable_file_filter_changed_property :- H=[:/*inline*/
	java.lang.String r = javax.swing.JFileChooser.CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY;
	Atom res = mem.newAtom(new StringFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_lang_String.use,(java_lang_String.use:-()).

H=javax_swing_JFileChooser.new() :- H=[:/*inline*/
	try {
		javax.swing.JFileChooser r = new javax.swing.JFileChooser();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 0);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 0);
	}
	me.remove();
	:](),javax_swing_JComponent.use,(javax_swing_JComponent.use:-()),java_awt_Container.use,(java_awt_Container.use:-()),java_awt_Component.use,(java_awt_Component.use:-()).

H=javax_swing_JFileChooser.new(_0) :- string(_0) | H=[:/*inline*/
	java.lang.String v0 = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	try {
		javax.swing.JFileChooser r = new javax.swing.JFileChooser(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0),javax_swing_JComponent.use,(javax_swing_JComponent.use:-()),java_awt_Container.use,(java_awt_Container.use:-()),java_awt_Component.use,(java_awt_Component.use:-()).

H=javax_swing_JFileChooser.new(_0) :- class(_0,"java.io.File") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.swing.JFileChooser r = new javax.swing.JFileChooser(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0),javax_swing_JComponent.use,(javax_swing_JComponent.use:-()),java_awt_Container.use,(java_awt_Container.use:-()),java_awt_Component.use,(java_awt_Component.use:-()).

H=javax_swing_JFileChooser.new(_0) :- class(_0,"javax.swing.filechooser.FileSystemView") | H=[:/*inline*/
	javax.swing.filechooser.FileSystemView v0 = (javax.swing.filechooser.FileSystemView)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.swing.JFileChooser r = new javax.swing.JFileChooser(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0),javax_swing_JComponent.use,(javax_swing_JComponent.use:-()),java_awt_Container.use,(java_awt_Container.use:-()),java_awt_Component.use,(java_awt_Component.use:-()).

H=javax_swing_JFileChooser.new(_0,_1) :- class(_0,"java.io.File"),class(_1,"javax.swing.filechooser.FileSystemView") | H=[:/*inline*/
	java.io.File v0 = (java.io.File)me.nthAtom(0).getFunctor().getValue();
	javax.swing.filechooser.FileSystemView v1 = (javax.swing.filechooser.FileSystemView)me.nthAtom(1).getFunctor().getValue();
	try {
		javax.swing.JFileChooser r = new javax.swing.JFileChooser(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1),javax_swing_JComponent.use,(javax_swing_JComponent.use:-()),java_awt_Container.use,(java_awt_Container.use:-()),java_awt_Component.use,(java_awt_Component.use:-()).

H=javax_swing_JFileChooser.new(_0,_1) :- string(_0),class(_1,"javax.swing.filechooser.FileSystemView") | H=[:/*inline*/
	java.lang.String v0 = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	javax.swing.filechooser.FileSystemView v1 = (javax.swing.filechooser.FileSystemView)me.nthAtom(1).getFunctor().getValue();
	try {
		javax.swing.JFileChooser r = new javax.swing.JFileChooser(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1),javax_swing_JComponent.use,(javax_swing_JComponent.use:-()),java_awt_Container.use,(java_awt_Container.use:-()),java_awt_Component.use,(java_awt_Component.use:-()).

H=setDragEnabled(_0,true) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = true;
	try {
		v0.setDragEnabled(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,true).

H=setDragEnabled(_0,false) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = false;
	try {
		v0.setDragEnabled(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,false).

H=getDragEnabled(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.getDragEnabled();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getSelectedFile(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		java.io.File r = v0.getSelectedFile();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_io_File.use,(java_io_File.use:-()).

H=setSelectedFile(_0,_1) :- class(_0,"javax.swing.JFileChooser"),class(_1,"java.io.File") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	java.io.File v1 = (java.io.File)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setSelectedFile(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getSelectedFiles(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		java.io.File[] r = v0.getSelectedFiles();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getCurrentDirectory(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		java.io.File r = v0.getCurrentDirectory();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_io_File.use,(java_io_File.use:-()).

H=setCurrentDirectory(_0,_1) :- class(_0,"javax.swing.JFileChooser"),class(_1,"java.io.File") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	java.io.File v1 = (java.io.File)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setCurrentDirectory(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=changeToParentDirectory(_0) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.changeToParentDirectory();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=rescanCurrentDirectory(_0) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.rescanCurrentDirectory();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=ensureFileIsVisible(_0,_1) :- class(_0,"javax.swing.JFileChooser"),class(_1,"java.io.File") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	java.io.File v1 = (java.io.File)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.ensureFileIsVisible(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=showOpenDialog(_0,_1,_2) :- class(_0,"javax.swing.JFileChooser"),class(_1,"java.awt.Component") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	java.awt.Component v1 = (java.awt.Component)me.nthAtom(1).getFunctor().getValue();
	try {
		int r = v0.showOpenDialog(v1);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=showSaveDialog(_0,_1,_2) :- class(_0,"javax.swing.JFileChooser"),class(_1,"java.awt.Component") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	java.awt.Component v1 = (java.awt.Component)me.nthAtom(1).getFunctor().getValue();
	try {
		int r = v0.showSaveDialog(v1);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=showDialog(_0,_1,_2,_3) :- class(_0,"javax.swing.JFileChooser"),class(_1,"java.awt.Component"),string(_2) | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	java.awt.Component v1 = (java.awt.Component)me.nthAtom(1).getFunctor().getValue();
	java.lang.String v2 = ((StringFunctor)me.nthAtom(2).getFunctor()).stringValue();
	try {
		int r = v0.showDialog(v1,v2);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=getControlButtonsAreShown(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.getControlButtonsAreShown();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setControlButtonsAreShown(_0,true) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = true;
	try {
		v0.setControlButtonsAreShown(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,true).

H=setControlButtonsAreShown(_0,false) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = false;
	try {
		v0.setControlButtonsAreShown(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,false).

H=getDialogType(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.getDialogType();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setDialogType(_0,_1) :- class(_0,"javax.swing.JFileChooser"),int(_1) | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		v0.setDialogType(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=setDialogTitle(_0,_1) :- class(_0,"javax.swing.JFileChooser"),string(_1) | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		v0.setDialogTitle(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getDialogTitle(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.getDialogTitle();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=setApproveButtonToolTipText(_0,_1) :- class(_0,"javax.swing.JFileChooser"),string(_1) | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		v0.setApproveButtonToolTipText(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getApproveButtonToolTipText(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.getApproveButtonToolTipText();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=getApproveButtonMnemonic(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.getApproveButtonMnemonic();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setApproveButtonMnemonic(_0,_1) :- class(_0,"javax.swing.JFileChooser"),int(_1) | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		v0.setApproveButtonMnemonic(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=setApproveButtonText(_0,_1) :- class(_0,"javax.swing.JFileChooser"),string(_1) | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		v0.setApproveButtonText(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getApproveButtonText(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.getApproveButtonText();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=getChoosableFileFilters(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.swing.filechooser.FileFilter[] r = v0.getChoosableFileFilters();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=addChoosableFileFilter(_0,_1) :- class(_0,"javax.swing.JFileChooser"),class(_1,"javax.swing.filechooser.FileFilter") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	javax.swing.filechooser.FileFilter v1 = (javax.swing.filechooser.FileFilter)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.addChoosableFileFilter(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=removeChoosableFileFilter(_0,_1,_2) :- class(_0,"javax.swing.JFileChooser"),class(_1,"javax.swing.filechooser.FileFilter") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	javax.swing.filechooser.FileFilter v1 = (javax.swing.filechooser.FileFilter)me.nthAtom(1).getFunctor().getValue();
	try {
		boolean r = v0.removeChoosableFileFilter(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=resetChoosableFileFilters(_0) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.resetChoosableFileFilters();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=getAcceptAllFileFilter(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.swing.filechooser.FileFilter r = v0.getAcceptAllFileFilter();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),javax_swing_filechooser_FileFilter.use,(javax_swing_filechooser_FileFilter.use:-()).

H=isAcceptAllFileFilterUsed(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isAcceptAllFileFilterUsed();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setAcceptAllFileFilterUsed(_0,true) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = true;
	try {
		v0.setAcceptAllFileFilterUsed(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,true).

H=setAcceptAllFileFilterUsed(_0,false) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = false;
	try {
		v0.setAcceptAllFileFilterUsed(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,false).

H=getAccessory(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.swing.JComponent r = v0.getAccessory();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),javax_swing_JComponent.use,(javax_swing_JComponent.use:-()).

H=setAccessory(_0,_1) :- class(_0,"javax.swing.JFileChooser"),class(_1,"javax.swing.JComponent") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	javax.swing.JComponent v1 = (javax.swing.JComponent)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setAccessory(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=setFileSelectionMode(_0,_1) :- class(_0,"javax.swing.JFileChooser"),int(_1) | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		v0.setFileSelectionMode(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getFileSelectionMode(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.getFileSelectionMode();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=isFileSelectionEnabled(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isFileSelectionEnabled();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=isDirectorySelectionEnabled(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isDirectorySelectionEnabled();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setMultiSelectionEnabled(_0,true) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = true;
	try {
		v0.setMultiSelectionEnabled(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,true).

H=setMultiSelectionEnabled(_0,false) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = false;
	try {
		v0.setMultiSelectionEnabled(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,false).

H=isMultiSelectionEnabled(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isMultiSelectionEnabled();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=isFileHidingEnabled(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isFileHidingEnabled();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setFileHidingEnabled(_0,true) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = true;
	try {
		v0.setFileHidingEnabled(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,true).

H=setFileHidingEnabled(_0,false) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = false;
	try {
		v0.setFileHidingEnabled(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,false).

H=setFileFilter(_0,_1) :- class(_0,"javax.swing.JFileChooser"),class(_1,"javax.swing.filechooser.FileFilter") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	javax.swing.filechooser.FileFilter v1 = (javax.swing.filechooser.FileFilter)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setFileFilter(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getFileFilter(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.swing.filechooser.FileFilter r = v0.getFileFilter();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),javax_swing_filechooser_FileFilter.use,(javax_swing_filechooser_FileFilter.use:-()).

H=setFileView(_0,_1) :- class(_0,"javax.swing.JFileChooser"),class(_1,"javax.swing.filechooser.FileView") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	javax.swing.filechooser.FileView v1 = (javax.swing.filechooser.FileView)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setFileView(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getFileView(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.swing.filechooser.FileView r = v0.getFileView();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),javax_swing_filechooser_FileView.use,(javax_swing_filechooser_FileView.use:-()).

H=getName(_0,_1,_2) :- class(_0,"javax.swing.JFileChooser"),class(_1,"java.io.File") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	java.io.File v1 = (java.io.File)me.nthAtom(1).getFunctor().getValue();
	try {
		java.lang.String r = v0.getName(v1);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_lang_String.use,(java_lang_String.use:-()).

H=getDescription(_0,_1,_2) :- class(_0,"javax.swing.JFileChooser"),class(_1,"java.io.File") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	java.io.File v1 = (java.io.File)me.nthAtom(1).getFunctor().getValue();
	try {
		java.lang.String r = v0.getDescription(v1);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_lang_String.use,(java_lang_String.use:-()).

H=getTypeDescription(_0,_1,_2) :- class(_0,"javax.swing.JFileChooser"),class(_1,"java.io.File") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	java.io.File v1 = (java.io.File)me.nthAtom(1).getFunctor().getValue();
	try {
		java.lang.String r = v0.getTypeDescription(v1);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_lang_String.use,(java_lang_String.use:-()).

H=getIcon(_0,_1,_2) :- class(_0,"javax.swing.JFileChooser"),class(_1,"java.io.File") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	java.io.File v1 = (java.io.File)me.nthAtom(1).getFunctor().getValue();
	try {
		javax.swing.Icon r = v0.getIcon(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),javax_swing_Icon.use,(javax_swing_Icon.use:-()).

H=isTraversable(_0,_1,_2) :- class(_0,"javax.swing.JFileChooser"),class(_1,"java.io.File") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	java.io.File v1 = (java.io.File)me.nthAtom(1).getFunctor().getValue();
	try {
		boolean r = v0.isTraversable(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=accept(_0,_1,_2) :- class(_0,"javax.swing.JFileChooser"),class(_1,"java.io.File") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	java.io.File v1 = (java.io.File)me.nthAtom(1).getFunctor().getValue();
	try {
		boolean r = v0.accept(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=setFileSystemView(_0,_1) :- class(_0,"javax.swing.JFileChooser"),class(_1,"javax.swing.filechooser.FileSystemView") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	javax.swing.filechooser.FileSystemView v1 = (javax.swing.filechooser.FileSystemView)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setFileSystemView(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getFileSystemView(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.swing.filechooser.FileSystemView r = v0.getFileSystemView();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),javax_swing_filechooser_FileSystemView.use,(javax_swing_filechooser_FileSystemView.use:-()).

H=approveSelection(_0) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.approveSelection();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=cancelSelection(_0) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.cancelSelection();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=addActionListener(_0,_1) :- class(_0,"javax.swing.JFileChooser"),class(_1,"java.awt.event.ActionListener") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.ActionListener v1 = (java.awt.event.ActionListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.addActionListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=removeActionListener(_0,_1) :- class(_0,"javax.swing.JFileChooser"),class(_1,"java.awt.event.ActionListener") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.ActionListener v1 = (java.awt.event.ActionListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.removeActionListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getActionListeners(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.event.ActionListener[] r = v0.getActionListeners();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=updateUI(_0) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.updateUI();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=getUIClassID(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.getUIClassID();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=getUI(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.swing.plaf.FileChooserUI r = v0.getUI();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),javax_swing_plaf_FileChooserUI.use,(javax_swing_plaf_FileChooserUI.use:-()).

H=getAccessibleContext(_0,_1) :- class(_0,"javax.swing.JFileChooser") | H=[:/*inline*/
	javax.swing.JFileChooser v0 = (javax.swing.JFileChooser)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.accessibility.AccessibleContext r = v0.getAccessibleContext();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),javax_accessibility_AccessibleContext.use,(javax_accessibility_AccessibleContext.use:-()).

}.
