//-----------------------------------------------------
// The following code was generated by javalmn
// Wed Nov 22 20:47:09 2006
//-----------------------------------------------------
{module(javax_swing_JMenuBar).
H=javax_swing_JMenuBar.new() :- H=[:/*inline*/
	try {
		javax.swing.JMenuBar r = new javax.swing.JMenuBar();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 0);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 0);
	}
	me.remove();
	:](),javax_swing_JComponent.use,(javax_swing_JComponent.use:-()),java_awt_Container.use,(java_awt_Container.use:-()),java_awt_Component.use,(java_awt_Component.use:-()).

H=getUI(_0,_1) :- class(_0,"javax.swing.JMenuBar") | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.swing.plaf.MenuBarUI r = v0.getUI();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),javax_swing_plaf_MenuBarUI.use,(javax_swing_plaf_MenuBarUI.use:-()).

H=setUI(_0,_1) :- class(_0,"javax.swing.JMenuBar"),class(_1,"javax.swing.plaf.MenuBarUI") | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	javax.swing.plaf.MenuBarUI v1 = (javax.swing.plaf.MenuBarUI)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setUI(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=updateUI(_0) :- class(_0,"javax.swing.JMenuBar") | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.updateUI();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=getUIClassID(_0,_1) :- class(_0,"javax.swing.JMenuBar") | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.getUIClassID();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=getSelectionModel(_0,_1) :- class(_0,"javax.swing.JMenuBar") | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.swing.SingleSelectionModel r = v0.getSelectionModel();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),javax_swing_SingleSelectionModel.use,(javax_swing_SingleSelectionModel.use:-()).

H=setSelectionModel(_0,_1) :- class(_0,"javax.swing.JMenuBar"),class(_1,"javax.swing.SingleSelectionModel") | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	javax.swing.SingleSelectionModel v1 = (javax.swing.SingleSelectionModel)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setSelectionModel(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=add(_0,_1,_2) :- class(_0,"javax.swing.JMenuBar"),class(_1,"javax.swing.JMenu") | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	javax.swing.JMenu v1 = (javax.swing.JMenu)me.nthAtom(1).getFunctor().getValue();
	try {
		javax.swing.JMenu r = v0.add(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),javax_swing_JMenu.use,(javax_swing_JMenu.use:-()).

H=getMenu(_0,_1,_2) :- class(_0,"javax.swing.JMenuBar"),int(_1) | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		javax.swing.JMenu r = v0.getMenu(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),javax_swing_JMenu.use,(javax_swing_JMenu.use:-()).

H=getMenuCount(_0,_1) :- class(_0,"javax.swing.JMenuBar") | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.getMenuCount();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setHelpMenu(_0,_1) :- class(_0,"javax.swing.JMenuBar"),class(_1,"javax.swing.JMenu") | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	javax.swing.JMenu v1 = (javax.swing.JMenu)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setHelpMenu(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getHelpMenu(_0,_1) :- class(_0,"javax.swing.JMenuBar") | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.swing.JMenu r = v0.getHelpMenu();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),javax_swing_JMenu.use,(javax_swing_JMenu.use:-()).

H=getComponentAtIndex(_0,_1,_2) :- class(_0,"javax.swing.JMenuBar"),int(_1) | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.awt.Component r = v0.getComponentAtIndex(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_awt_Component.use,(java_awt_Component.use:-()).

H=getComponentIndex(_0,_1,_2) :- class(_0,"javax.swing.JMenuBar"),class(_1,"java.awt.Component") | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	java.awt.Component v1 = (java.awt.Component)me.nthAtom(1).getFunctor().getValue();
	try {
		int r = v0.getComponentIndex(v1);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=setSelected(_0,_1) :- class(_0,"javax.swing.JMenuBar"),class(_1,"java.awt.Component") | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	java.awt.Component v1 = (java.awt.Component)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setSelected(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=isSelected(_0,_1) :- class(_0,"javax.swing.JMenuBar") | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isSelected();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=isBorderPainted(_0,_1) :- class(_0,"javax.swing.JMenuBar") | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isBorderPainted();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setBorderPainted(_0,_1) :- class(_0,"javax.swing.JMenuBar") | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = ((SymbolFunctor)me.nthAtom(1).getFunctor()).getName().equals("true")?true:false;
	try {
		v0.setBorderPainted(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=setMargin(_0,_1) :- class(_0,"javax.swing.JMenuBar"),class(_1,"java.awt.Insets") | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	java.awt.Insets v1 = (java.awt.Insets)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setMargin(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getMargin(_0,_1) :- class(_0,"javax.swing.JMenuBar") | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Insets r = v0.getMargin();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_Insets.use,(java_awt_Insets.use:-()).

H=menuSelectionChanged(_0,_1) :- class(_0,"javax.swing.JMenuBar") | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = ((SymbolFunctor)me.nthAtom(1).getFunctor()).getName().equals("true")?true:false;
	try {
		v0.menuSelectionChanged(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getSubElements(_0,_1) :- class(_0,"javax.swing.JMenuBar") | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.swing.MenuElement[] r = v0.getSubElements();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getComponent(_0,_1) :- class(_0,"javax.swing.JMenuBar") | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Component r = v0.getComponent();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_Component.use,(java_awt_Component.use:-()).

H=getAccessibleContext(_0,_1) :- class(_0,"javax.swing.JMenuBar") | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.accessibility.AccessibleContext r = v0.getAccessibleContext();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),javax_accessibility_AccessibleContext.use,(javax_accessibility_AccessibleContext.use:-()).

H=addNotify(_0) :- class(_0,"javax.swing.JMenuBar") | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.addNotify();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=removeNotify(_0) :- class(_0,"javax.swing.JMenuBar") | H=[:/*inline*/
	javax.swing.JMenuBar v0 = (javax.swing.JMenuBar)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.removeNotify();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

}.
