//-----------------------------------------------------
// The following code was generated by class2module.pl 
// Thu Nov 30 12:24:49 2006
//-----------------------------------------------------
{module(javax_swing_text_JTextComponent).
H=javax_swing_text_JTextComponent.focus_accelerator_key :- H=[:/*inline*/
	java.lang.String r = javax.swing.text.JTextComponent.FOCUS_ACCELERATOR_KEY;
	Atom res = mem.newAtom(new StringFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_lang_String.use,(java_lang_String.use:-()).

H=javax_swing_text_JTextComponent.default_keymap :- H=[:/*inline*/
	java.lang.String r = javax.swing.text.JTextComponent.DEFAULT_KEYMAP;
	Atom res = mem.newAtom(new StringFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:],java_lang_String.use,(java_lang_String.use:-()).

H=getUI(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.swing.plaf.TextUI r = v0.getUI();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),javax_swing_plaf_TextUI.use,(javax_swing_plaf_TextUI.use:-()).

H=setUI(_0,_1) :- class(_0,"javax.swing.text.JTextComponent"),class(_1,"javax.swing.plaf.TextUI") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	javax.swing.plaf.TextUI v1 = (javax.swing.plaf.TextUI)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setUI(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=updateUI(_0) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.updateUI();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=addCaretListener(_0,_1) :- class(_0,"javax.swing.text.JTextComponent"),class(_1,"javax.swing.event.CaretListener") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	javax.swing.event.CaretListener v1 = (javax.swing.event.CaretListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.addCaretListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=removeCaretListener(_0,_1) :- class(_0,"javax.swing.text.JTextComponent"),class(_1,"javax.swing.event.CaretListener") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	javax.swing.event.CaretListener v1 = (javax.swing.event.CaretListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.removeCaretListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getCaretListeners(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.swing.event.CaretListener[] r = v0.getCaretListeners();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setDocument(_0,_1) :- class(_0,"javax.swing.text.JTextComponent"),class(_1,"javax.swing.text.Document") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	javax.swing.text.Document v1 = (javax.swing.text.Document)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setDocument(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getDocument(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.swing.text.Document r = v0.getDocument();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),javax_swing_text_Document.use,(javax_swing_text_Document.use:-()).

H=setComponentOrientation(_0,_1) :- class(_0,"javax.swing.text.JTextComponent"),class(_1,"java.awt.ComponentOrientation") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	java.awt.ComponentOrientation v1 = (java.awt.ComponentOrientation)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setComponentOrientation(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getActions(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.swing.Action[] r = v0.getActions();
		runtime.Link l = new runtime.Link(me.nthAtom(1), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setMargin(_0,_1) :- class(_0,"javax.swing.text.JTextComponent"),class(_1,"java.awt.Insets") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	java.awt.Insets v1 = (java.awt.Insets)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setMargin(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getMargin(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Insets r = v0.getMargin();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_Insets.use,(java_awt_Insets.use:-()).

H=setNavigationFilter(_0,_1) :- class(_0,"javax.swing.text.JTextComponent"),class(_1,"javax.swing.text.NavigationFilter") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	javax.swing.text.NavigationFilter v1 = (javax.swing.text.NavigationFilter)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setNavigationFilter(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getNavigationFilter(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.swing.text.NavigationFilter r = v0.getNavigationFilter();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),javax_swing_text_NavigationFilter.use,(javax_swing_text_NavigationFilter.use:-()).

H=getCaret(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.swing.text.Caret r = v0.getCaret();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),javax_swing_text_Caret.use,(javax_swing_text_Caret.use:-()).

H=setCaret(_0,_1) :- class(_0,"javax.swing.text.JTextComponent"),class(_1,"javax.swing.text.Caret") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	javax.swing.text.Caret v1 = (javax.swing.text.Caret)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setCaret(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getHighlighter(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.swing.text.Highlighter r = v0.getHighlighter();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),javax_swing_text_Highlighter.use,(javax_swing_text_Highlighter.use:-()).

H=setHighlighter(_0,_1) :- class(_0,"javax.swing.text.JTextComponent"),class(_1,"javax.swing.text.Highlighter") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	javax.swing.text.Highlighter v1 = (javax.swing.text.Highlighter)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setHighlighter(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=setKeymap(_0,_1) :- class(_0,"javax.swing.text.JTextComponent"),class(_1,"javax.swing.text.Keymap") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	javax.swing.text.Keymap v1 = (javax.swing.text.Keymap)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setKeymap(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=setDragEnabled(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = ((SymbolFunctor)me.nthAtom(1).getFunctor()).getName().equals("true")?true:false;
	try {
		v0.setDragEnabled(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getDragEnabled(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.getDragEnabled();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getKeymap(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.swing.text.Keymap r = v0.getKeymap();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),javax_swing_text_Keymap.use,(javax_swing_text_Keymap.use:-()).

H=javax_swing_text_JTextComponent.addKeymap(_0,_1) :- string(_0),class(_1,"javax.swing.text.Keymap") | H=[:/*inline*/
	java.lang.String v0 = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	javax.swing.text.Keymap v1 = (javax.swing.text.Keymap)me.nthAtom(1).getFunctor().getValue();
	try {
		javax.swing.text.Keymap r = javax.swing.text.JTextComponent.addKeymap(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=javax_swing_text_JTextComponent.removeKeymap(_0) :- string(_0) | H=[:/*inline*/
	java.lang.String v0 = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	try {
		javax.swing.text.Keymap r = javax.swing.text.JTextComponent.removeKeymap(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=javax_swing_text_JTextComponent.getKeymap(_0) :- string(_0) | H=[:/*inline*/
	java.lang.String v0 = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	try {
		javax.swing.text.Keymap r = javax.swing.text.JTextComponent.getKeymap(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0).

H=getCaretColor(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Color r = v0.getCaretColor();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_Color.use,(java_awt_Color.use:-()).

H=setCaretColor(_0,_1) :- class(_0,"javax.swing.text.JTextComponent"),class(_1,"java.awt.Color") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	java.awt.Color v1 = (java.awt.Color)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setCaretColor(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getSelectionColor(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Color r = v0.getSelectionColor();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_Color.use,(java_awt_Color.use:-()).

H=setSelectionColor(_0,_1) :- class(_0,"javax.swing.text.JTextComponent"),class(_1,"java.awt.Color") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	java.awt.Color v1 = (java.awt.Color)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setSelectionColor(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getSelectedTextColor(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Color r = v0.getSelectedTextColor();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_Color.use,(java_awt_Color.use:-()).

H=setSelectedTextColor(_0,_1) :- class(_0,"javax.swing.text.JTextComponent"),class(_1,"java.awt.Color") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	java.awt.Color v1 = (java.awt.Color)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setSelectedTextColor(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getDisabledTextColor(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Color r = v0.getDisabledTextColor();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_Color.use,(java_awt_Color.use:-()).

H=setDisabledTextColor(_0,_1) :- class(_0,"javax.swing.text.JTextComponent"),class(_1,"java.awt.Color") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	java.awt.Color v1 = (java.awt.Color)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setDisabledTextColor(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=replaceSelection(_0,_1) :- class(_0,"javax.swing.text.JTextComponent"),string(_1) | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		v0.replaceSelection(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getText(_0,_1,_2,_3) :- class(_0,"javax.swing.text.JTextComponent"),int(_1),int(_2) | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		java.lang.String r = v0.getText(v1,v2);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3),java_lang_String.use,(java_lang_String.use:-()).

H=modelToView(_0,_1,_2) :- class(_0,"javax.swing.text.JTextComponent"),int(_1) | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		java.awt.Rectangle r = v0.modelToView(v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_awt_Rectangle.use,(java_awt_Rectangle.use:-()).

H=viewToModel(_0,_1,_2) :- class(_0,"javax.swing.text.JTextComponent"),class(_1,"java.awt.Point") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	java.awt.Point v1 = (java.awt.Point)me.nthAtom(1).getFunctor().getValue();
	try {
		int r = v0.viewToModel(v1);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=cut(_0) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.cut();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=copy(_0) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.copy();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=paste(_0) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.paste();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=moveCaretPosition(_0,_1) :- class(_0,"javax.swing.text.JTextComponent"),int(_1) | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		v0.moveCaretPosition(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=read(_0,_1,_2) :- class(_0,"javax.swing.text.JTextComponent"),class(_1,"java.io.Reader"),class(_2,"java.lang.Object") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	java.io.Reader v1 = (java.io.Reader)me.nthAtom(1).getFunctor().getValue();
	java.lang.Object v2 = (java.lang.Object)me.nthAtom(2).getFunctor().getValue();
	try {
		v0.read(v1,v2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=write(_0,_1) :- class(_0,"javax.swing.text.JTextComponent"),class(_1,"java.io.Writer") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	java.io.Writer v1 = (java.io.Writer)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.write(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=removeNotify(_0) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.removeNotify();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=setCaretPosition(_0,_1) :- class(_0,"javax.swing.text.JTextComponent"),int(_1) | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		v0.setCaretPosition(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getCaretPosition(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.getCaretPosition();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setText(_0,_1) :- class(_0,"javax.swing.text.JTextComponent"),string(_1) | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		v0.setText(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getText(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.getText();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=getSelectedText(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.getSelectedText();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=isEditable(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isEditable();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setEditable(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = ((SymbolFunctor)me.nthAtom(1).getFunctor()).getName().equals("true")?true:false;
	try {
		v0.setEditable(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getSelectionStart(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.getSelectionStart();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setSelectionStart(_0,_1) :- class(_0,"javax.swing.text.JTextComponent"),int(_1) | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		v0.setSelectionStart(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getSelectionEnd(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.getSelectionEnd();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setSelectionEnd(_0,_1) :- class(_0,"javax.swing.text.JTextComponent"),int(_1) | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		v0.setSelectionEnd(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=select(_0,_1,_2) :- class(_0,"javax.swing.text.JTextComponent"),int(_1),int(_2) | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	try {
		v0.select(v1,v2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=selectAll(_0) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.selectAll();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=getToolTipText(_0,_1,_2) :- class(_0,"javax.swing.text.JTextComponent"),class(_1,"java.awt.event.MouseEvent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.MouseEvent v1 = (java.awt.event.MouseEvent)me.nthAtom(1).getFunctor().getValue();
	try {
		java.lang.String r = v0.getToolTipText(v1);
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2),java_lang_String.use,(java_lang_String.use:-()).

H=getPreferredScrollableViewportSize(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Dimension r = v0.getPreferredScrollableViewportSize();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_Dimension.use,(java_awt_Dimension.use:-()).

H=getScrollableUnitIncrement(_0,_1,_2,_3,_4) :- class(_0,"javax.swing.text.JTextComponent"),class(_1,"java.awt.Rectangle"),int(_2),int(_3) | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	java.awt.Rectangle v1 = (java.awt.Rectangle)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	try {
		int r = v0.getScrollableUnitIncrement(v1,v2,v3);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 4);
		mem.relink(me.nthAtom(0), 0, me, 5);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 4);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 5);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.remove();
	:](_0,_1,_2,_3,_4).

H=getScrollableBlockIncrement(_0,_1,_2,_3,_4) :- class(_0,"javax.swing.text.JTextComponent"),class(_1,"java.awt.Rectangle"),int(_2),int(_3) | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	java.awt.Rectangle v1 = (java.awt.Rectangle)me.nthAtom(1).getFunctor().getValue();
	int v2 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	int v3 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	try {
		int r = v0.getScrollableBlockIncrement(v1,v2,v3);
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 4);
		mem.relink(me.nthAtom(0), 0, me, 5);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 4);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 5);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.remove();
	:](_0,_1,_2,_3,_4).

H=getScrollableTracksViewportWidth(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.getScrollableTracksViewportWidth();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getScrollableTracksViewportHeight(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.getScrollableTracksViewportHeight();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getAccessibleContext(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.accessibility.AccessibleContext r = v0.getAccessibleContext();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),javax_accessibility_AccessibleContext.use,(javax_accessibility_AccessibleContext.use:-()).

H=getInputMethodRequests(_0,_1) :- class(_0,"javax.swing.text.JTextComponent") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.im.InputMethodRequests r = v0.getInputMethodRequests();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_im_InputMethodRequests.use,(java_awt_im_InputMethodRequests.use:-()).

H=addInputMethodListener(_0,_1) :- class(_0,"javax.swing.text.JTextComponent"),class(_1,"java.awt.event.InputMethodListener") | H=[:/*inline*/
	javax.swing.text.JTextComponent v0 = (javax.swing.text.JTextComponent)me.nthAtom(0).getFunctor().getValue();
	java.awt.event.InputMethodListener v1 = (java.awt.event.InputMethodListener)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.addInputMethodListener(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

}.
