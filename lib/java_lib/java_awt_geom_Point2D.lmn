//-----------------------------------------------------
// The following code was generated by class2module.pl 
// Fri Nov 24 11:50:17 2006
//-----------------------------------------------------
{module(java_awt_geom_Point2D).
H=getX(_0,_1) :- class(_0,"java.awt.geom.Point2D") | H=[:/*inline*/
	java.awt.geom.Point2D v0 = (java.awt.geom.Point2D)me.nthAtom(0).getFunctor().getValue();
	try {
		double r = v0.getX();
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getY(_0,_1) :- class(_0,"java.awt.geom.Point2D") | H=[:/*inline*/
	java.awt.geom.Point2D v0 = (java.awt.geom.Point2D)me.nthAtom(0).getFunctor().getValue();
	try {
		double r = v0.getY();
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setLocation(_0,_1,_2) :- class(_0,"java.awt.geom.Point2D"),float(_1),float(_2) | H=[:/*inline*/
	java.awt.geom.Point2D v0 = (java.awt.geom.Point2D)me.nthAtom(0).getFunctor().getValue();
	double v1 = ((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
	double v2 = ((FloatingFunctor)me.nthAtom(2).getFunctor()).floatValue();
	try {
		v0.setLocation(v1,v2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2).

H=setLocation(_0,_1) :- class(_0,"java.awt.geom.Point2D"),class(_1,"java.awt.geom.Point2D") | H=[:/*inline*/
	java.awt.geom.Point2D v0 = (java.awt.geom.Point2D)me.nthAtom(0).getFunctor().getValue();
	java.awt.geom.Point2D v1 = (java.awt.geom.Point2D)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setLocation(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=java_awt_geom_Point2D.distanceSq(_0,_1,_2,_3) :- float(_0),float(_1),float(_2),float(_3) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	double v1 = ((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
	double v2 = ((FloatingFunctor)me.nthAtom(2).getFunctor()).floatValue();
	double v3 = ((FloatingFunctor)me.nthAtom(3).getFunctor()).floatValue();
	try {
		double r = java.awt.geom.Point2D.distanceSq(v0,v1,v2,v3);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 4);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=java_awt_geom_Point2D.distance(_0,_1,_2,_3) :- float(_0),float(_1),float(_2),float(_3) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	double v1 = ((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
	double v2 = ((FloatingFunctor)me.nthAtom(2).getFunctor()).floatValue();
	double v3 = ((FloatingFunctor)me.nthAtom(3).getFunctor()).floatValue();
	try {
		double r = java.awt.geom.Point2D.distance(v0,v1,v2,v3);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 4);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.nthAtom(3).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=distanceSq(_0,_1,_2,_3) :- class(_0,"java.awt.geom.Point2D"),float(_1),float(_2) | H=[:/*inline*/
	java.awt.geom.Point2D v0 = (java.awt.geom.Point2D)me.nthAtom(0).getFunctor().getValue();
	double v1 = ((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
	double v2 = ((FloatingFunctor)me.nthAtom(2).getFunctor()).floatValue();
	try {
		double r = v0.distanceSq(v1,v2);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=distanceSq(_0,_1,_2) :- class(_0,"java.awt.geom.Point2D"),class(_1,"java.awt.geom.Point2D") | H=[:/*inline*/
	java.awt.geom.Point2D v0 = (java.awt.geom.Point2D)me.nthAtom(0).getFunctor().getValue();
	java.awt.geom.Point2D v1 = (java.awt.geom.Point2D)me.nthAtom(1).getFunctor().getValue();
	try {
		double r = v0.distanceSq(v1);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=distance(_0,_1,_2,_3) :- class(_0,"java.awt.geom.Point2D"),float(_1),float(_2) | H=[:/*inline*/
	java.awt.geom.Point2D v0 = (java.awt.geom.Point2D)me.nthAtom(0).getFunctor().getValue();
	double v1 = ((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
	double v2 = ((FloatingFunctor)me.nthAtom(2).getFunctor()).floatValue();
	try {
		double r = v0.distance(v1,v2);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 3);
		mem.relink(me.nthAtom(0), 0, me, 4);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 3);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 4);
	}
	me.nthAtom(1).remove();
	me.nthAtom(2).remove();
	me.remove();
	:](_0,_1,_2,_3).

H=distance(_0,_1,_2) :- class(_0,"java.awt.geom.Point2D"),class(_1,"java.awt.geom.Point2D") | H=[:/*inline*/
	java.awt.geom.Point2D v0 = (java.awt.geom.Point2D)me.nthAtom(0).getFunctor().getValue();
	java.awt.geom.Point2D v1 = (java.awt.geom.Point2D)me.nthAtom(1).getFunctor().getValue();
	try {
		double r = v0.distance(v1);
		Atom res = mem.newAtom(new FloatingFunctor(r));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

H=clone(_0,_1) :- class(_0,"java.awt.geom.Point2D") | H=[:/*inline*/
	java.awt.geom.Point2D v0 = (java.awt.geom.Point2D)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.Object r = v0.clone();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_Object.use,(java_lang_Object.use:-()).

H=hashCode(_0,_1) :- class(_0,"java.awt.geom.Point2D") | H=[:/*inline*/
	java.awt.geom.Point2D v0 = (java.awt.geom.Point2D)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.hashCode();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=equals(_0,_1,_2) :- class(_0,"java.awt.geom.Point2D"),class(_1,"java.lang.Object") | H=[:/*inline*/
	java.awt.geom.Point2D v0 = (java.awt.geom.Point2D)me.nthAtom(0).getFunctor().getValue();
	java.lang.Object v1 = (java.lang.Object)me.nthAtom(1).getFunctor().getValue();
	try {
		boolean r = v0.equals(v1);
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 2);
		mem.relink(me.nthAtom(0), 0, me, 3);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 2);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 3);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1,_2).

}.
