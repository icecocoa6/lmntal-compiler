//-----------------------------------------------------
// The following code was generated by javalmn
// Wed Nov 22 20:46:42 2006
//-----------------------------------------------------
{module(java_awt_Frame).
H=java_awt_Frame.default_cursor :- H=[:/*inline*/
	int r = java.awt.Frame.DEFAULT_CURSOR;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Frame.crosshair_cursor :- H=[:/*inline*/
	int r = java.awt.Frame.CROSSHAIR_CURSOR;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Frame.text_cursor :- H=[:/*inline*/
	int r = java.awt.Frame.TEXT_CURSOR;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Frame.wait_cursor :- H=[:/*inline*/
	int r = java.awt.Frame.WAIT_CURSOR;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Frame.sw_resize_cursor :- H=[:/*inline*/
	int r = java.awt.Frame.SW_RESIZE_CURSOR;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Frame.se_resize_cursor :- H=[:/*inline*/
	int r = java.awt.Frame.SE_RESIZE_CURSOR;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Frame.nw_resize_cursor :- H=[:/*inline*/
	int r = java.awt.Frame.NW_RESIZE_CURSOR;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Frame.ne_resize_cursor :- H=[:/*inline*/
	int r = java.awt.Frame.NE_RESIZE_CURSOR;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Frame.n_resize_cursor :- H=[:/*inline*/
	int r = java.awt.Frame.N_RESIZE_CURSOR;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Frame.s_resize_cursor :- H=[:/*inline*/
	int r = java.awt.Frame.S_RESIZE_CURSOR;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Frame.w_resize_cursor :- H=[:/*inline*/
	int r = java.awt.Frame.W_RESIZE_CURSOR;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Frame.e_resize_cursor :- H=[:/*inline*/
	int r = java.awt.Frame.E_RESIZE_CURSOR;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Frame.hand_cursor :- H=[:/*inline*/
	int r = java.awt.Frame.HAND_CURSOR;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Frame.move_cursor :- H=[:/*inline*/
	int r = java.awt.Frame.MOVE_CURSOR;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Frame.normal :- H=[:/*inline*/
	int r = java.awt.Frame.NORMAL;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Frame.iconified :- H=[:/*inline*/
	int r = java.awt.Frame.ICONIFIED;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Frame.maximized_horiz :- H=[:/*inline*/
	int r = java.awt.Frame.MAXIMIZED_HORIZ;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Frame.maximized_vert :- H=[:/*inline*/
	int r = java.awt.Frame.MAXIMIZED_VERT;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Frame.maximized_both :- H=[:/*inline*/
	int r = java.awt.Frame.MAXIMIZED_BOTH;
	Atom res = mem.newAtom(new IntegerFunctor(r));
	mem.relink(res, 0, me, 0);
	me.remove();
	:].

H=java_awt_Frame.new() :- H=[:/*inline*/
	try {
		java.awt.Frame r = new java.awt.Frame();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 0);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 0);
	}
	me.remove();
	:](),java_awt_Window.use,(java_awt_Window.use:-()),java_awt_Container.use,(java_awt_Container.use:-()),java_awt_Component.use,(java_awt_Component.use:-()).

H=java_awt_Frame.new(_0) :- class(_0,"java.awt.GraphicsConfiguration") | H=[:/*inline*/
	java.awt.GraphicsConfiguration v0 = (java.awt.GraphicsConfiguration)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Frame r = new java.awt.Frame(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0),java_awt_Window.use,(java_awt_Window.use:-()),java_awt_Container.use,(java_awt_Container.use:-()),java_awt_Component.use,(java_awt_Component.use:-()).

H=java_awt_Frame.new(_0) :- string(_0) | H=[:/*inline*/
	java.lang.String v0 = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	try {
		java.awt.Frame r = new java.awt.Frame(v0);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](_0),java_awt_Window.use,(java_awt_Window.use:-()),java_awt_Container.use,(java_awt_Container.use:-()),java_awt_Component.use,(java_awt_Component.use:-()).

H=java_awt_Frame.new(_0,_1) :- string(_0),class(_1,"java.awt.GraphicsConfiguration") | H=[:/*inline*/
	java.lang.String v0 = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	java.awt.GraphicsConfiguration v1 = (java.awt.GraphicsConfiguration)me.nthAtom(1).getFunctor().getValue();
	try {
		java.awt.Frame r = new java.awt.Frame(v0,v1);
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 2);
	}
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1),java_awt_Window.use,(java_awt_Window.use:-()),java_awt_Container.use,(java_awt_Container.use:-()),java_awt_Component.use,(java_awt_Component.use:-()).

H=addNotify(_0) :- class(_0,"java.awt.Frame") | H=[:/*inline*/
	java.awt.Frame v0 = (java.awt.Frame)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.addNotify();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=getTitle(_0,_1) :- class(_0,"java.awt.Frame") | H=[:/*inline*/
	java.awt.Frame v0 = (java.awt.Frame)me.nthAtom(0).getFunctor().getValue();
	try {
		java.lang.String r = v0.getTitle();
		Atom res = mem.newAtom(new StringFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_lang_String.use,(java_lang_String.use:-()).

H=setTitle(_0,_1) :- class(_0,"java.awt.Frame"),string(_1) | H=[:/*inline*/
	java.awt.Frame v0 = (java.awt.Frame)me.nthAtom(0).getFunctor().getValue();
	java.lang.String v1 = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	try {
		v0.setTitle(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getIconImage(_0,_1) :- class(_0,"java.awt.Frame") | H=[:/*inline*/
	java.awt.Frame v0 = (java.awt.Frame)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Image r = v0.getIconImage();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_Image.use,(java_awt_Image.use:-()).

H=setIconImage(_0,_1) :- class(_0,"java.awt.Frame"),class(_1,"java.awt.Image") | H=[:/*inline*/
	java.awt.Frame v0 = (java.awt.Frame)me.nthAtom(0).getFunctor().getValue();
	java.awt.Image v1 = (java.awt.Image)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setIconImage(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getMenuBar(_0,_1) :- class(_0,"java.awt.Frame") | H=[:/*inline*/
	java.awt.Frame v0 = (java.awt.Frame)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.MenuBar r = v0.getMenuBar();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_MenuBar.use,(java_awt_MenuBar.use:-()).

H=setMenuBar(_0,_1) :- class(_0,"java.awt.Frame"),class(_1,"java.awt.MenuBar") | H=[:/*inline*/
	java.awt.Frame v0 = (java.awt.Frame)me.nthAtom(0).getFunctor().getValue();
	java.awt.MenuBar v1 = (java.awt.MenuBar)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setMenuBar(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=isResizable(_0,_1) :- class(_0,"java.awt.Frame") | H=[:/*inline*/
	java.awt.Frame v0 = (java.awt.Frame)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isResizable();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setResizable(_0,_1) :- class(_0,"java.awt.Frame") | H=[:/*inline*/
	java.awt.Frame v0 = (java.awt.Frame)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = ((SymbolFunctor)me.nthAtom(1).getFunctor()).getName().equals("true")?true:false;
	try {
		v0.setResizable(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=setState(_0,_1) :- class(_0,"java.awt.Frame"),int(_1) | H=[:/*inline*/
	java.awt.Frame v0 = (java.awt.Frame)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		v0.setState(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=setExtendedState(_0,_1) :- class(_0,"java.awt.Frame"),int(_1) | H=[:/*inline*/
	java.awt.Frame v0 = (java.awt.Frame)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		v0.setExtendedState(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getState(_0,_1) :- class(_0,"java.awt.Frame") | H=[:/*inline*/
	java.awt.Frame v0 = (java.awt.Frame)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.getState();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=getExtendedState(_0,_1) :- class(_0,"java.awt.Frame") | H=[:/*inline*/
	java.awt.Frame v0 = (java.awt.Frame)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.getExtendedState();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=setMaximizedBounds(_0,_1) :- class(_0,"java.awt.Frame"),class(_1,"java.awt.Rectangle") | H=[:/*inline*/
	java.awt.Frame v0 = (java.awt.Frame)me.nthAtom(0).getFunctor().getValue();
	java.awt.Rectangle v1 = (java.awt.Rectangle)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.setMaximizedBounds(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getMaximizedBounds(_0,_1) :- class(_0,"java.awt.Frame") | H=[:/*inline*/
	java.awt.Frame v0 = (java.awt.Frame)me.nthAtom(0).getFunctor().getValue();
	try {
		java.awt.Rectangle r = v0.getMaximizedBounds();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),java_awt_Rectangle.use,(java_awt_Rectangle.use:-()).

H=setUndecorated(_0,_1) :- class(_0,"java.awt.Frame") | H=[:/*inline*/
	java.awt.Frame v0 = (java.awt.Frame)me.nthAtom(0).getFunctor().getValue();
	boolean v1 = ((SymbolFunctor)me.nthAtom(1).getFunctor()).getName().equals("true")?true:false;
	try {
		v0.setUndecorated(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=isUndecorated(_0,_1) :- class(_0,"java.awt.Frame") | H=[:/*inline*/
	java.awt.Frame v0 = (java.awt.Frame)me.nthAtom(0).getFunctor().getValue();
	try {
		boolean r = v0.isUndecorated();
		Atom res = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=remove(_0,_1) :- class(_0,"java.awt.Frame"),class(_1,"java.awt.MenuComponent") | H=[:/*inline*/
	java.awt.Frame v0 = (java.awt.Frame)me.nthAtom(0).getFunctor().getValue();
	java.awt.MenuComponent v1 = (java.awt.MenuComponent)me.nthAtom(1).getFunctor().getValue();
	try {
		v0.remove(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=removeNotify(_0) :- class(_0,"java.awt.Frame") | H=[:/*inline*/
	java.awt.Frame v0 = (java.awt.Frame)me.nthAtom(0).getFunctor().getValue();
	try {
		v0.removeNotify();
		mem.relink(me.nthAtom(0), 0, me, 1);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 1);
	}
	me.remove();
	:](_0).

H=setCursor(_0,_1) :- class(_0,"java.awt.Frame"),int(_1) | H=[:/*inline*/
	java.awt.Frame v0 = (java.awt.Frame)me.nthAtom(0).getFunctor().getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	try {
		v0.setCursor(v1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.remove();
	:](_0,_1).

H=getCursorType(_0,_1) :- class(_0,"java.awt.Frame") | H=[:/*inline*/
	java.awt.Frame v0 = (java.awt.Frame)me.nthAtom(0).getFunctor().getValue();
	try {
		int r = v0.getCursorType();
		Atom res = mem.newAtom(new IntegerFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1).

H=java_awt_Frame.getFrames() :- H=[:/*inline*/
	try {
		java.awt.Frame[] r = java.awt.Frame.getFrames();
		runtime.Link l = new runtime.Link(me.nthAtom(0), 0);
		util.Util.makeList(l, java.util.Arrays.asList(r));
	} catch (Exception e) {
		Atom res = mem.newAtom(new ObjectFunctor(e));
		mem.relink(res, 0, me, 0);
	}
	me.remove();
	:]().

H=getAccessibleContext(_0,_1) :- class(_0,"java.awt.Frame") | H=[:/*inline*/
	java.awt.Frame v0 = (java.awt.Frame)me.nthAtom(0).getFunctor().getValue();
	try {
		javax.accessibility.AccessibleContext r = v0.getAccessibleContext();
		Atom res = mem.newAtom(new ObjectFunctor(r));
		mem.relink(res, 0, me, 1);
		mem.relink(me.nthAtom(0), 0, me, 2);
	} catch (Exception e) {
		Atom res = mem.newAtom(new SymbolFunctor("nil", 1));
		mem.relink(res, 0, me, 1);
		Atom o = mem.newAtom(new ObjectFunctor(e));
		mem.relink(o, 0, me, 2);
	}
	me.remove();
	:](_0,_1),javax_accessibility_AccessibleContext.use,(javax_accessibility_AccessibleContext.use:-()).

}.
