/*
NAME
	BigFloat module

SYNOPSIS
	pi=bigfloat.new("3.14") で多倍長浮動小数点を生成．
	bigfloat 型かどうかの検査は custom_i_bigfloat(PI)．
	比較演算子のガードは例えば custom_ii_bigfloat_eq(PI, "3.14")．
	引数は bigint 型または多倍長浮動小数点を表す文字列型．
	
AUTHOR
	Atsuyuki Inui

HISTORY
	2006/09/22(Fri)

NOTE
	ボディの四則演算などのルールは make_module.pl で自動生成．

*/

//テスト
//pi=bigfloat.new("3.14").
//r=bigfloat.new("5").
//pi(PI), r(R) :- custom_i_bigfloat(R), custom_ii_bigfloat_eq(PI, "3.14") |
//	area=bigfloat.mul(PI, bigfloat.mul(R, R)).
////pi(PI) :- custom_i_bigfloat(PI), custom_ii_bigfloat_lt(PI, "3.15") | ok(PI).

{
module(bigfloat).

//ガード演算
bigfloat.use :-
[:/*inline_define*/
import java.math.*;
//#/*__UNITNAME__*/CustomGuardImpl.java
	/*__PACKAGE__*/
	import runtime.*;
	import java.util.*;
	import java.util.regex.*;
	import java.math.*;
	import util.Util;
	public class /*__UNITNAME__*/CustomGuardImpl implements CustomGuard {
		public boolean run(String guardID, Membrane mem, Object obj) {
			ArrayList ary = (ArrayList)obj;
//			System.err.println(ary.size());
//			for(int i=0;i<ary.size();i++) {
//				System.err.println("ary.get("+i+")="+ary.get(i).getClass());
//			}
//			System.err.println("guardID="+guardID);

			if (guardID.equals("bigfloat")) {
				Atom a = ((Link)ary.get(0)).getAtom();
//				System.err.println("a="+a);
				return (a.getFunctor().getValue() instanceof BigDecimal);
			}

			Atom a = ((Link)ary.get(0)).getAtom();
//			System.err.println("a="+a);
			Atom b = (Atom)ary.get(1);
//			System.err.println("b="+b);

			//getFunctor で返ってくるのは
			//  「StringFunctor」か「BigDecimal を持った ObjectFunctor」
			String s1 = a.getFunctor().getValue().toString();
			String s2 = b.getFunctor().getValue().toString();
			
//			System.out.println("s1="+s1);
//			System.out.println("s2="+s2);
			
			BigDecimal b1 = new BigDecimal(s1);
			BigDecimal b2 = new BigDecimal(s2);
			
			     if (guardID.equals("bigfloat_lt")) return (b1.compareTo(b2) <  0);
			else if (guardID.equals("bigfloat_le")) return (b1.compareTo(b2) <= 0);
			else if (guardID.equals("bigfloat_gt")) return (b1.compareTo(b2) >  0);
			else if (guardID.equals("bigfloat_ge")) return (b1.compareTo(b2) >= 0);
			else if (guardID.equals("bigfloat_eq")) return (b1.compareTo(b2) == 0);
			else if (guardID.equals("bigfloat_ne")) return (b1.compareTo(b2) != 0);
			
			return false;
		}
	}
//#
:].

//----------------------------------------------------
// The following code was generated by make_module.pl
// Sat Sep 23 22:11:14 2006
//----------------------------------------------------
H=bigfloat.zero :- H=[:/*inline*/
	java.math.BigDecimal r = java.math.BigDecimal.ZERO;
	Atom result = mem.newAtom(new ObjectFunctor(r));
	mem.relink(result, 0, me, 0);
	me.remove();
	:].

H=bigfloat.one :- H=[:/*inline*/
	java.math.BigDecimal r = java.math.BigDecimal.ONE;
	Atom result = mem.newAtom(new ObjectFunctor(r));
	mem.relink(result, 0, me, 0);
	me.remove();
	:].

H=bigfloat.ten :- H=[:/*inline*/
	java.math.BigDecimal r = java.math.BigDecimal.TEN;
	Atom result = mem.newAtom(new ObjectFunctor(r));
	mem.relink(result, 0, me, 0);
	me.remove();
	:].

H=bigfloat.round_up :- H=[:/*inline*/
	int r = java.math.BigDecimal.ROUND_UP;
	Atom result = mem.newAtom(new IntegerFunctor(r));
	mem.relink(result, 0, me, 0);
	me.remove();
	:].

H=bigfloat.round_down :- H=[:/*inline*/
	int r = java.math.BigDecimal.ROUND_DOWN;
	Atom result = mem.newAtom(new IntegerFunctor(r));
	mem.relink(result, 0, me, 0);
	me.remove();
	:].

H=bigfloat.round_ceiling :- H=[:/*inline*/
	int r = java.math.BigDecimal.ROUND_CEILING;
	Atom result = mem.newAtom(new IntegerFunctor(r));
	mem.relink(result, 0, me, 0);
	me.remove();
	:].

H=bigfloat.round_floor :- H=[:/*inline*/
	int r = java.math.BigDecimal.ROUND_FLOOR;
	Atom result = mem.newAtom(new IntegerFunctor(r));
	mem.relink(result, 0, me, 0);
	me.remove();
	:].

H=bigfloat.round_half_up :- H=[:/*inline*/
	int r = java.math.BigDecimal.ROUND_HALF_UP;
	Atom result = mem.newAtom(new IntegerFunctor(r));
	mem.relink(result, 0, me, 0);
	me.remove();
	:].

H=bigfloat.round_half_down :- H=[:/*inline*/
	int r = java.math.BigDecimal.ROUND_HALF_DOWN;
	Atom result = mem.newAtom(new IntegerFunctor(r));
	mem.relink(result, 0, me, 0);
	me.remove();
	:].

H=bigfloat.round_half_even :- H=[:/*inline*/
	int r = java.math.BigDecimal.ROUND_HALF_EVEN;
	Atom result = mem.newAtom(new IntegerFunctor(r));
	mem.relink(result, 0, me, 0);
	me.remove();
	:].

H=bigfloat.round_unnecessary :- H=[:/*inline*/
	int r = java.math.BigDecimal.ROUND_UNNECESSARY;
	Atom result = mem.newAtom(new IntegerFunctor(r));
	mem.relink(result, 0, me, 0);
	me.remove();
	:].

H=bigfloat.new(Arg0) :- string(Arg0) | H=[:/*inline*/
	java.lang.String v0 = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	try {
		Atom o = mem.newAtom(new ObjectFunctor(new java.math.BigDecimal(v0)));
		mem.relink(o, 0, me, 1);
	} catch (Exception e) { System.err.println(e); }
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigfloat.new(Arg0) :- float(Arg0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	try {
		Atom o = mem.newAtom(new ObjectFunctor(new java.math.BigDecimal(v0)));
		mem.relink(o, 0, me, 1);
	} catch (Exception e) { System.err.println(e); }
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigfloat.new(Arg0) :- class(Arg0, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger v0 = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getValue();
	try {
		Atom o = mem.newAtom(new ObjectFunctor(new java.math.BigDecimal(v0)));
		mem.relink(o, 0, me, 1);
	} catch (Exception e) { System.err.println(e); }
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigfloat.new(Arg0) :- int(Arg0) | H=[:/*inline*/
	int v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	try {
		Atom o = mem.newAtom(new ObjectFunctor(new java.math.BigDecimal(v0)));
		mem.relink(o, 0, me, 1);
	} catch (Exception e) { System.err.println(e); }
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigfloat.new(Arg0) :- int(Arg0) | H=[:/*inline*/
	long v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	try {
		Atom o = mem.newAtom(new ObjectFunctor(new java.math.BigDecimal(v0)));
		mem.relink(o, 0, me, 1);
	} catch (Exception e) { System.err.println(e); }
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigfloat.valueOf(Arg0,Arg1) :- int(Arg0),int(Arg1) | H=[:/*inline*/
	long v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	int v1 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	Atom result = null;
	try {
		java.math.BigDecimal r = java.math.BigDecimal.valueOf(v0,v1);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigfloat.valueOf(Arg0) :- int(Arg0) | H=[:/*inline*/
	long v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	Atom result = null;
	try {
		java.math.BigDecimal r = java.math.BigDecimal.valueOf(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigfloat.valueOf(Arg0) :- float(Arg0) | H=[:/*inline*/
	double v0 = ((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
	Atom result = null;
	try {
		java.math.BigDecimal r = java.math.BigDecimal.valueOf(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigfloat.add(Arg0,Arg1) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigDecimal v0 = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.add(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigfloat.add(Arg0,Arg1,Arg2) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.BigDecimal"),class(Arg2, "java.math.MathContext") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigDecimal v0 = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	java.math.MathContext v1 = (java.math.MathContext) ((ObjectFunctor)me.nthAtom(2).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 3);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.add(v0,v1);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 3);
	}
	me.nthAtom(2).remove();
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1,Arg2).

H=bigfloat.subtract(Arg0,Arg1) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigDecimal v0 = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.subtract(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigfloat.subtract(Arg0,Arg1,Arg2) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.BigDecimal"),class(Arg2, "java.math.MathContext") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigDecimal v0 = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	java.math.MathContext v1 = (java.math.MathContext) ((ObjectFunctor)me.nthAtom(2).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 3);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.subtract(v0,v1);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 3);
	}
	me.nthAtom(2).remove();
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1,Arg2).

H=bigfloat.multiply(Arg0,Arg1) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigDecimal v0 = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.multiply(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigfloat.multiply(Arg0,Arg1,Arg2) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.BigDecimal"),class(Arg2, "java.math.MathContext") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigDecimal v0 = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	java.math.MathContext v1 = (java.math.MathContext) ((ObjectFunctor)me.nthAtom(2).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 3);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.multiply(v0,v1);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 3);
	}
	me.nthAtom(2).remove();
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1,Arg2).

H=bigfloat.divide(Arg0,Arg1,Arg2,Arg3) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.BigDecimal"),int(Arg2),int(Arg3) | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigDecimal v0 = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	int v2 = ((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
	mem.relink(me.nthAtom(0), 0, me, 4);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.divide(v0,v1,v2);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 4);
	}
	me.nthAtom(3).remove();
	me.nthAtom(2).remove();
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1,Arg2,Arg3).

H=bigfloat.divide(Arg0,Arg1,Arg2,Arg3) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.BigDecimal"),int(Arg2),class(Arg3, "java.math.RoundingMode") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigDecimal v0 = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	java.math.RoundingMode v2 = (java.math.RoundingMode) ((ObjectFunctor)me.nthAtom(3).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 4);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.divide(v0,v1,v2);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 4);
	}
	me.nthAtom(3).remove();
	me.nthAtom(2).remove();
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1,Arg2,Arg3).

H=bigfloat.divide(Arg0,Arg1,Arg2) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.BigDecimal"),int(Arg2) | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigDecimal v0 = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	int v1 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	mem.relink(me.nthAtom(0), 0, me, 3);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.divide(v0,v1);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 3);
	}
	me.nthAtom(2).remove();
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1,Arg2).

H=bigfloat.divide(Arg0,Arg1,Arg2) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.BigDecimal"),class(Arg2, "java.math.RoundingMode") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigDecimal v0 = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	java.math.RoundingMode v1 = (java.math.RoundingMode) ((ObjectFunctor)me.nthAtom(2).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 3);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.divide(v0,v1);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 3);
	}
	me.nthAtom(2).remove();
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1,Arg2).

H=bigfloat.divide(Arg0,Arg1) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigDecimal v0 = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.divide(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigfloat.divide(Arg0,Arg1,Arg2) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.BigDecimal"),class(Arg2, "java.math.MathContext") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigDecimal v0 = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	java.math.MathContext v1 = (java.math.MathContext) ((ObjectFunctor)me.nthAtom(2).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 3);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.divide(v0,v1);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 3);
	}
	me.nthAtom(2).remove();
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1,Arg2).

H=bigfloat.divideToIntegralValue(Arg0,Arg1) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigDecimal v0 = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.divideToIntegralValue(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigfloat.divideToIntegralValue(Arg0,Arg1,Arg2) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.BigDecimal"),class(Arg2, "java.math.MathContext") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigDecimal v0 = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	java.math.MathContext v1 = (java.math.MathContext) ((ObjectFunctor)me.nthAtom(2).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 3);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.divideToIntegralValue(v0,v1);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 3);
	}
	me.nthAtom(2).remove();
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1,Arg2).

H=bigfloat.remainder(Arg0,Arg1) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigDecimal v0 = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.remainder(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigfloat.remainder(Arg0,Arg1,Arg2) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.BigDecimal"),class(Arg2, "java.math.MathContext") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigDecimal v0 = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	java.math.MathContext v1 = (java.math.MathContext) ((ObjectFunctor)me.nthAtom(2).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 3);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.remainder(v0,v1);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 3);
	}
	me.nthAtom(2).remove();
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1,Arg2).

H=bigfloat.divideAndRemainder(Arg0,Arg1) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigDecimal v0 = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigDecimal[] r = o.divideAndRemainder(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigfloat.divideAndRemainder(Arg0,Arg1,Arg2) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.BigDecimal"),class(Arg2, "java.math.MathContext") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigDecimal v0 = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	java.math.MathContext v1 = (java.math.MathContext) ((ObjectFunctor)me.nthAtom(2).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 3);
	Atom result = null;
	try {
		java.math.BigDecimal[] r = o.divideAndRemainder(v0,v1);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 3);
	}
	me.nthAtom(2).remove();
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1,Arg2).

H=bigfloat.pow(Arg0,Arg1) :- class(Arg0, "java.math.BigDecimal"),int(Arg1) | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	int v0 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.pow(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigfloat.pow(Arg0,Arg1,Arg2) :- class(Arg0, "java.math.BigDecimal"),int(Arg1),class(Arg2, "java.math.MathContext") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	int v0 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	java.math.MathContext v1 = (java.math.MathContext) ((ObjectFunctor)me.nthAtom(2).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 3);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.pow(v0,v1);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 3);
	}
	me.nthAtom(2).remove();
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1,Arg2).

H=bigfloat.abs(Arg0) :- class(Arg0, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.abs();
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigfloat.abs(Arg0,Arg1) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.MathContext") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.MathContext v0 = (java.math.MathContext) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.abs(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigfloat.negate(Arg0) :- class(Arg0, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.negate();
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigfloat.negate(Arg0,Arg1) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.MathContext") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.MathContext v0 = (java.math.MathContext) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.negate(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigfloat.plus(Arg0) :- class(Arg0, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.plus();
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigfloat.plus(Arg0,Arg1) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.MathContext") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.MathContext v0 = (java.math.MathContext) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.plus(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigfloat.signum(Arg0) :- class(Arg0, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		int r = o.signum();
		result = mem.newAtom(new IntegerFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigfloat.scale(Arg0) :- class(Arg0, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		int r = o.scale();
		result = mem.newAtom(new IntegerFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigfloat.precision(Arg0) :- class(Arg0, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		int r = o.precision();
		result = mem.newAtom(new IntegerFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigfloat.unscaledValue(Arg0) :- class(Arg0, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		java.math.BigInteger r = o.unscaledValue();
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigfloat.round(Arg0,Arg1) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.MathContext") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.MathContext v0 = (java.math.MathContext) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.round(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigfloat.setScale(Arg0,Arg1,Arg2) :- class(Arg0, "java.math.BigDecimal"),int(Arg1),class(Arg2, "java.math.RoundingMode") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	int v0 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	java.math.RoundingMode v1 = (java.math.RoundingMode) ((ObjectFunctor)me.nthAtom(2).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 3);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.setScale(v0,v1);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 3);
	}
	me.nthAtom(2).remove();
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1,Arg2).

H=bigfloat.setScale(Arg0,Arg1,Arg2) :- class(Arg0, "java.math.BigDecimal"),int(Arg1),int(Arg2) | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	int v0 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	int v1 = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	mem.relink(me.nthAtom(0), 0, me, 3);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.setScale(v0,v1);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 3);
	}
	me.nthAtom(2).remove();
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1,Arg2).

H=bigfloat.setScale(Arg0,Arg1) :- class(Arg0, "java.math.BigDecimal"),int(Arg1) | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	int v0 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.setScale(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigfloat.movePointLeft(Arg0,Arg1) :- class(Arg0, "java.math.BigDecimal"),int(Arg1) | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	int v0 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.movePointLeft(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigfloat.movePointRight(Arg0,Arg1) :- class(Arg0, "java.math.BigDecimal"),int(Arg1) | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	int v0 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.movePointRight(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigfloat.scaleByPowerOfTen(Arg0,Arg1) :- class(Arg0, "java.math.BigDecimal"),int(Arg1) | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	int v0 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.scaleByPowerOfTen(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigfloat.stripTrailingZeros(Arg0) :- class(Arg0, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.stripTrailingZeros();
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigfloat.compareTo(Arg0,Arg1) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigDecimal v0 = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		int r = o.compareTo(v0);
		result = mem.newAtom(new IntegerFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigfloat.equals(Arg0,Arg1) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.lang.Object") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.lang.Object v0 = (java.lang.Object) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		boolean r = o.equals(v0);
		result = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigfloat.min(Arg0,Arg1) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigDecimal v0 = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.min(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigfloat.max(Arg0,Arg1) :- class(Arg0, "java.math.BigDecimal"),class(Arg1, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigDecimal v0 = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.max(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigfloat.hashCode(Arg0) :- class(Arg0, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		int r = o.hashCode();
		result = mem.newAtom(new IntegerFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigfloat.toString(Arg0) :- class(Arg0, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		java.lang.String r = o.toString();
		result = mem.newAtom(new StringFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigfloat.toEngineeringString(Arg0) :- class(Arg0, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		java.lang.String r = o.toEngineeringString();
		result = mem.newAtom(new StringFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigfloat.toPlainString(Arg0) :- class(Arg0, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		java.lang.String r = o.toPlainString();
		result = mem.newAtom(new StringFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigfloat.toBigInteger(Arg0) :- class(Arg0, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		java.math.BigInteger r = o.toBigInteger();
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigfloat.toBigIntegerExact(Arg0) :- class(Arg0, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		java.math.BigInteger r = o.toBigIntegerExact();
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigfloat.intValue(Arg0) :- class(Arg0, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		int r = o.intValue();
		result = mem.newAtom(new IntegerFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigfloat.intValueExact(Arg0) :- class(Arg0, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		int r = o.intValueExact();
		result = mem.newAtom(new IntegerFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigfloat.doubleValue(Arg0) :- class(Arg0, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		double r = o.doubleValue();
		result = mem.newAtom(new FloatingFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigfloat.ulp(Arg0) :- class(Arg0, "java.math.BigDecimal") | H=[:/*inline*/
	java.math.BigDecimal o = (java.math.BigDecimal) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		java.math.BigDecimal r = o.ulp();
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

}.
