/**
NAME
	Random module

SYNOPSIS
	Java の Random クラスのラッパー

AUTHOR
	Atsuyuki Inui

HISTORY
	2006/02/03(Fri) 至急必要な random.init, random.nextInt を実装
	2006/02/04(Sat) random.nextInt(N)
	2006/06/25(Sun) random.init --> random.new
	2006/06/26(Mon) nextFloat, nextGaussian, setSeed
*/
{
module(random).

/**
 * int 型のシードを使って乱数ジェネレータを作成します。
 */
H=random.new(Seed) :- int(Seed) | H=[:/*inline*/
	int seed = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	me.nthAtom(0).remove();
	
	Atom random = mem.newAtom(new ObjectFunctor(new java.util.Random(seed)));
	mem.relink(random, 0, me, 1);
	me.remove();
	:](Seed).

/**
 * 新規乱数ジェネレータを作成します。
 */
H=random.new :- H=[:/*inline*/
	Atom random = mem.newAtom(new ObjectFunctor(new java.util.Random()));
	mem.relink(random, 0, me, 0);
	me.remove();
	:].

/**
 * 乱数ジェネレータのシーケンスを使って、一様分布の int 型の擬似乱数を返します。
 */		
H=random.nextInt(Random) :- class(Random, "java.util.Random") | H=[:/*inline*/
	java.util.Random random = (java.util.Random) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	int n = random.nextInt();
	mem.relink(me.nthAtom(0), 0, me, 1);

	Atom result = mem.newAtom(new IntegerFunctor(n));
	mem.relink(result, 0, me, 1);
	me.nthAtom(0).remove();
	me.remove();
	:](Random).

/**
 * 乱数ジェネレータのシーケンスを使って、0 から指定された値の範囲 (0 は含むが、
 * その指定された値は含まない) で一様分布の int 型の擬似乱数を返します。
 */		
H=random.nextInt(Random, N) :- int(N), class(Random, "java.util.Random") | H=[:/*inline*/
	java.util.Random random = (java.util.Random) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	int n = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	me.nthAtom(1).remove();
	
	int rn = random.nextInt(n);
	mem.relink(me.nthAtom(0), 0, me, 2);
	
	Atom result = mem.newAtom(new IntegerFunctor(rn));
	mem.relink(result, 0, me, 2);
	me.nthAtom(0).remove();
	me.remove();
	:](Random, N).

/**
 * 乱数ジェネレータのシーケンスを使って、0.0 〜 1.0 の範囲で一様分布の
 * double 型 (FloatingFunctor) の擬似乱数を返します。
 */
H=random.nextFloat(Random) :- class(Random, "java.util.Random") | H=[:/*inline*/
	java.util.Random random = (java.util.Random)((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	double n = random.nextDouble();
	mem.relink(me.nthAtom(0), 0, me, 1);

	Atom result = mem.newAtom(new FloatingFunctor(n));
	mem.relink(result, 0, me, 1);
	me.nthAtom(0).remove();
	me.remove();
	:](Random).

/**
 * 乱数ジェネレータのシーケンスを使って、平均 0.0、標準偏差 1.0 の
 * ガウス (「正規」) 分布の double 型 (FloatingFunctor) の擬似乱数を返します。
 */
H=random.nextGaussian(Random) :- class(Random, "java.util.Random") | H=[:/*inline*/
	java.util.Random random = (java.util.Random)((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	double n = random.nextGaussian();
	mem.relink(me.nthAtom(0), 0, me, 1);

	Atom result = mem.newAtom(new FloatingFunctor(n));
	mem.relink(result, 0, me, 1);
	me.nthAtom(0).remove();
	me.remove();
	:](Random).

random.setSeed(Random, Seed) :- class(Random, "java.util.Random"), int(Seed) | [:/*inline*/
	java.util.Random random = (java.util.Random)((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	int seed = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	random.setSeed(seed);
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](Random, Seed).
}.

//テスト用コード
//n(10).
//r=random.new(5).
//r(R) :- unary(R) | random.setSeed(R, 5), r2(R).
//r(R) :- a=random.nextInt(R).
//r(R), n(N) :- N > 0, unary(R) | a=random.nextFloat(R), r(R), n(N-1).