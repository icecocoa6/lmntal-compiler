/*
NAME
	Reference module

SYNOPSIS
	
	label_a = ref(some_object({x=1,y=2})).  // some_object への参照を label_a と関連付ける
	label_b = copy(label_a).                // 参照のコピー
	res     = msg(label_b, setX(3)).        // 参照に対してメッセージを送る
	
DESCRIPTION
	
	ref(Target, Ret) : pt(<int>, Ret)
		Target : Any
		Ret    : Any
		
		Target への参照を Ret に返す。参照は一意な数字で区別される。
		
	copy(Ref, Ret) : pt(<int>, Ret)
		Ref    : <unary>
		Ret    : Any
		
		名前 Ref が参照しているモノへの参照を Ret に返す。
	
	msg(Ref, Content, Ret) : msg(Some, Content, Ret, pt(<int>))
		Ref    : <unary>
		Content: Any
		Res    : Any
		
		名前 Ref が参照しているモノに Content を送りつけ、結果を Ret に返すように頼む。
		送りつけるとは、モノの最終引数に msg を付け足すこと。
	
AUTHOR
	Koji Hara

HISTORY
	2005/05/09(Mon) 23:27:16

*/


{
module(ref).

[:/*inline_define*/
class Pointer {
	static int id=0;
	static synchronized int next() {
		return id++;
	}
}
:].

H=ref(Some) :- H=pt2(gen_unique_id, Some).
H=pt2(I, Some) :- int(I) | H=pt(I), Some=pt(I).

H=copy(S), S2=pt(I) :- S=S2, int(I) | H=pt(I), S2=pt(I).

msg(S, Content, Res), S2=pt(I), Some=pt(I2) :- S=S2, int(I), I=I2 |
	pt(I2, msg(Some, Content, Res)), S2=pt(I).

H=gen_unique_id :- H=[:/*inline*/
	Atom p = mem.newAtom(new IntegerFunctor(Pointer.next()));
	mem.relinkAtomArgs(p, 0, me, 0);
	mem.removeAtom(me);
	:].


/* test

r=ref(some_obj).
r2=ref(some_obj2).

r3=copy(r).

ret = msg(r, print).

*/

}.
