/*

NAME

	Distributed LMNtal Toolkit

SYNOPSIS

AUTHOR

	Ryo Okabe

HISTORY

	05/12/02 unreleased

*/

[:/*inline_define*/
import java.net.*;

/*
 *  class: AcceptThread
 */
class AcceptThread implements Runnable {
  volatile Thread th = null;
  ServerSocket servSock;
  final Membrane mem;
  
  /*
   *  AcceptThread.AcceptThread()
   */
  AcceptThread(ServerSocket servSock, Membrane mem) {
    this.servSock = servSock;
    this.mem = mem;
  }
  
  /*
   *  AcceptThread.start()
   */
  public void start() {
    if(th == null) {
      th = new Thread(this);
      th.start();
    }
  }
  
  /*
   *  AcceptThread.run()
   */
  public void run() {
    Thread thisThread = Thread.currentThread();
    while(th == thisThread) {
      try {
        Socket sock = servSock.accept();
        //System.out.println("ServerSocket accepted: "+sock.toString());
        BufferedReader reader = 
          new BufferedReader(new InputStreamReader(sock.getInputStream()));
        //System.out.println("reader created: "+reader.toString());
        PrintWriter writer = new PrintWriter(sock.getOutputStream());
        //System.out.println("writer created: "+writer.toString());
        mem.newAtom(new Functor("$in",2));
        mem.newAtom(new Functor("socket",);
      } catch(IOException e) {
        e.printStackTrace();
      }
      try {
        th.sleep(100);
      } catch(InterruptedException e) {
        e.printStackTrace();
      }
    }
    th = null;
  }
  
  /*
   *  AcceptThread.stop()
   */
  public void stop() {
    th = null;
  }
}

/* 
 *  class: ReaderThread
 */
class ReaderThread implements Runnable {
  volatile Thread th = null;
  Socket sock;
  BufferedReader reader;
  final Membrane mem;
  final Atom me;
  
  /*
   *  ReaderThread.ReaderThread()
   */
  ReaderThread(Socket sock, BufferedReader reader, Membrane mem) {
    this.sock = sock;
    this.reader = reader;
    this.mem = mem;
  }
  
  /*
   *  ReaderThread.start()
   */
  public void start() {
    if(th == null) {
      th = new Thread(this);
      th.start();
    }
  }
  
  /*
   *  ReaderThread.run()
   */
  public void run(){
    Thread thisThread = Thread.currentThread();
    while(th == thisThread) {
      try {
        if(reader.ready()) {
          //System.out.println("reader: ready");
          String msg = reader.readLine();
          //System.out.println("message received: "+msg);
          //リストにつなぐ
          
        }
      } catch(IOException e) {
        e.printStackTrace();
      }
      try {
        th.sleep(100);
      } catch(InterruptedException e) {
        e.printStackTrace();
      }
    }
    th = null;
  }
  
  /*
   *  ReaderThread.stop()
   */
  public void stop() {
    th = null;
    try {
      reader.close();
    } catch(IOException e) {
      e.printStackTrace();
    }
    System.out.println("ReaderThread: stopped");
  }
}
:]

/*
 *  module: connect
 */ 
dlt.connect(Host,Port,Id) :- string(host),int(port),string(id) |
  dlt.socket($in,[],[],P,Q),
  P=[:/*inline*/
    string id = me.nth(0);
    Atom idAtom = mem.newAtom(new Functor(id,2));
    Atom nilAtom = mem.newAtom(new Functor("[]",1));
    mem.newLink(idAtom,1,nilAtom,0);
    mem.relinkAtomArgs(idAtom,0,me,1);
    me.nthAtom(0).remove();
    me.remove();
    :](Id),
  Q=[:/*inline*/
    String host = me.nth(0);
    int port = Integer.parseInt(me.nth(1));
    try {
      InetAddress ip = InetAddress.getByName(host);
      Socket sock = new Socket(ip,port);
      BufferedReader reader = 
        new BufferedReader(new InputStreamReader(sock.getInputStream()));
      ReaderThread rThread = new ReaderThread(sock,reader,(Membrane)mem);
      PrintWriter writer = new PrintWriter(sock.getOutputStream());
      Object[] array = {sock,rThread,writer};
      Functor arrayFunc = new ObjectFunctor(array);
      Atom arrayAtom = mem.newAtom(arrayFunc);
      mem.relinkAtomArgs(arrayAtom,0,me,2);
      rThread.me = arrayAtom;
      rThread.start();
    } catch(IOException e) {
      e.printStackTrace();
    }
    me.nthAtom(0).remove();
    me.nthAtom(1).remove();
    me.remove();
    :](Host,Port)