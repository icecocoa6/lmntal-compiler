/*

NAME

	decoder module

SYNOPSIS

	decoder.stringDecoder(String str)
          str -> (parse -> compile -> react) -> process & ruleset
        decoder.fileDecoder(String filename)
          str -> (parse -> compile -> react) -> process & ruleset
Sample

        sample/okabe/decoder.lmn

AUTHOR

	Ryo Okabe

HISTORY

	1.0  2005/12/17(Sat)

*/


[:/*inline_define*/
import java.io.*;
import compile.*;
import compile.parser.LMNParser;
import compile.parser.ParseException;
import compile.parser.intermediate.RulesetParser;
:].

{
module(decoder).

decoder.stringDecoder(S) :- string(S) |
  [:/*inline*/
    String str = me.nth(0);
    LMNParser lp;
    compile.structure.Membrane m;
    Ruleset rs;
    try {
      lp = new LMNParser(new StringReader(str));
      m = lp.parse();
      //System.out.println("parse succeeded: "+m.toString());
      rs = RulesetCompiler.compileMembrane(m);
      //System.out.println("ruleset generated: "+rs.toString());
      rs.react((Membrane)mem);
      //System.out.println("react succeeded: "+mem.toString());
    } catch(ParseException e) {
      e.printStackTrace();
    }
    me.nthAtom(0).remove();
    me.remove();
  :](S).

decoder.fileDecoder(F) :- string(F) |
  [:/*inline*/
    try {
      String filename = me.nth(0);
      FileInputStream fis = new FileInputStream(filename);
      InputStreamReader isr = new InputStreamReader(fis);
      BufferedReader reader = new BufferedReader(isr);
      LMNParser lp;
      compile.structure.Membrane m;
      Ruleset rs;
      lp = new LMNParser(reader);
      m = lp.parse();
      //System.out.println("parse succeeded: "+m.toString());
      rs = RulesetCompiler.compileMembrane(m);
      //System.out.println("ruleset generated: "+rs.toString());
      rs.react((Membrane)mem);
      //System.out.println("react succeeded: "+mem.toString());
    } catch(FileNotFoundException e) {
      e.printStackTrace();
    } catch(ParseException e) {
      e.printStackTrace();
    }
    me.nthAtom(0).remove();
    me.remove();
  :](F).
}