/*
NAME
	BigInteger module

SYNOPSIS
	a=bigint.new("123") で多倍長整数を生成．
	bigint 型かどうかの検査は custom_i_bigint(A)．
	比較演算子のガードは例えば custom_ii_bigint_eq(A, "123")．
	引数は bigint 型または多倍長整数を表す文字列型．
	
AUTHOR
	Atsuyuki Inui

HISTORY
	2006/09/22(Fri)

NOTE
	ボディの四則演算などのルールは make_module.pl で自動生成．

*/

{
module(bigint).

//ガード演算
bigint.use :-
[:/*inline_define*/
import java.math.*;
//#/*__UNITNAME__*/CustomGuardImpl.java
	/*__PACKAGE__*/
	import runtime.*;
	import java.util.*;
	import java.util.regex.*;
	import java.math.*;
	import util.Util;
	public class /*__UNITNAME__*/CustomGuardImpl implements CustomGuard {
		public boolean run(String guardID, Membrane mem, Object obj) {
			ArrayList ary = (ArrayList)obj;
//			System.err.println(ary.size());
//			for(int i=0;i<ary.size();i++) {
//				System.err.println(ary.get(i).getClass());
//			}
//			System.err.println("guardID="+guardID);

			if (guardID.equals("bigint")) {
				Atom a = ((Link)ary.get(0)).getAtom();
//				System.err.println("a="+a);
				return (a.getFunctor().getValue() instanceof BigInteger);
			}

			Atom a = ((Link)ary.get(0)).getAtom();
//			System.err.println(a);
			Atom b = (Atom)ary.get(1);
//			System.err.println(b);

			//getFunctor で返ってくるのは
			//  「StringFunctor」か「BigInteger を持った ObjectFunctor」
			String s1 = a.getFunctor().getValue().toString();
			String s2 = b.getFunctor().getValue().toString();
			
			BigInteger b1 = new BigInteger(s1);
			BigInteger b2 = new BigInteger(s2);
			
			     if (guardID.equals("bigint_lt")) return (b1.compareTo(b2) <  0);
			else if (guardID.equals("bigint_le")) return (b1.compareTo(b2) <= 0);
			else if (guardID.equals("bigint_gt")) return (b1.compareTo(b2) >  0);
			else if (guardID.equals("bigint_ge")) return (b1.compareTo(b2) >= 0);
			else if (guardID.equals("bigint_eq")) return (b1.compareTo(b2) == 0);
			else if (guardID.equals("bigint_ne")) return (b1.compareTo(b2) != 0);
			
			return false;
		}
	}
//#
:].

//----------------------------------------------------
// The following code was generated by make_module.pl
// Fri Sep 22 15:51:20 2006
//----------------------------------------------------
H=java_math_BigInteger.zero :- H=[:/*inline*/
	Atom zero = mem.newAtom(new ObjectFunctor(java.math.BigInteger.ZERO));
	mem.relink(zero, 0, me, 0);
	me.remove();
	:].

H=bigint.one :- H=[:/*inline*/
	Atom one = mem.newAtom(new ObjectFunctor(java.math.BigInteger.ONE));
	mem.relink(one, 0, me, 0);
	me.remove();
	:].

H=bigint.ten :- H=[:/*inline*/
	Atom ten = mem.newAtom(new ObjectFunctor(java.math.BigInteger.TEN));
	mem.relink(ten, 0, me, 0);
	me.remove();
	:].

H=bigint.new(Arg0) :- string(Arg0) | H=[:/*inline*/
	java.lang.String v0 = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	try {
		Atom o = mem.newAtom(new ObjectFunctor(new java.math.BigInteger(v0)));
		mem.relink(o, 0, me, 1);
	} catch (Exception e) { System.err.println(e); }
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigint.probablePrime(Arg0,Arg1) :- int(Arg0),class(Arg1, "java.util.Random") | H=[:/*inline*/
	int v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	java.util.Random v1 = (java.util.Random) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	Atom result = null;
	try {
		java.math.BigInteger r = java.math.BigInteger.probablePrime(v0,v1);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.nextProbablePrime(Arg0) :- class(Arg0, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		java.math.BigInteger r = o.nextProbablePrime();
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigint.valueOf(Arg0) :- int(Arg0) | H=[:/*inline*/
	long v0 = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	Atom result = null;
	try {
		java.math.BigInteger r = java.math.BigInteger.valueOf(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigint.add(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),class(Arg1, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigInteger v0 = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigInteger r = o.add(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.subtract(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),class(Arg1, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigInteger v0 = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigInteger r = o.subtract(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.multiply(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),class(Arg1, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigInteger v0 = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigInteger r = o.multiply(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.divide(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),class(Arg1, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigInteger v0 = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigInteger r = o.divide(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.divideAndRemainder(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),class(Arg1, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigInteger v0 = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigInteger[] r = o.divideAndRemainder(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.remainder(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),class(Arg1, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigInteger v0 = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigInteger r = o.remainder(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.pow(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),int(Arg1) | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	int v0 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigInteger r = o.pow(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.gcd(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),class(Arg1, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigInteger v0 = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigInteger r = o.gcd(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.abs(Arg0) :- class(Arg0, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		java.math.BigInteger r = o.abs();
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigint.negate(Arg0) :- class(Arg0, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		java.math.BigInteger r = o.negate();
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigint.signum(Arg0) :- class(Arg0, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		int r = o.signum();
		result = mem.newAtom(new IntegerFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigint.mod(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),class(Arg1, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigInteger v0 = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigInteger r = o.mod(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.modPow(Arg0,Arg1,Arg2) :- class(Arg0, "java.math.BigInteger"),class(Arg1, "java.math.BigInteger"),class(Arg2, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigInteger v0 = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	java.math.BigInteger v1 = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(2).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 3);
	Atom result = null;
	try {
		java.math.BigInteger r = o.modPow(v0,v1);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 3);
	}
	me.nthAtom(2).remove();
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1,Arg2).

H=bigint.modInverse(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),class(Arg1, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigInteger v0 = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigInteger r = o.modInverse(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.shiftLeft(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),int(Arg1) | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	int v0 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigInteger r = o.shiftLeft(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.shiftRight(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),int(Arg1) | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	int v0 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigInteger r = o.shiftRight(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.and(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),class(Arg1, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigInteger v0 = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigInteger r = o.and(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.or(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),class(Arg1, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigInteger v0 = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigInteger r = o.or(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.xor(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),class(Arg1, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigInteger v0 = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigInteger r = o.xor(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.not(Arg0) :- class(Arg0, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		java.math.BigInteger r = o.not();
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigint.andNot(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),class(Arg1, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigInteger v0 = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigInteger r = o.andNot(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.testBit(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),int(Arg1) | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	int v0 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		boolean r = o.testBit(v0);
		result = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.setBit(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),int(Arg1) | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	int v0 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigInteger r = o.setBit(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.clearBit(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),int(Arg1) | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	int v0 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigInteger r = o.clearBit(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.flipBit(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),int(Arg1) | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	int v0 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigInteger r = o.flipBit(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.getLowestSetBit(Arg0) :- class(Arg0, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		int r = o.getLowestSetBit();
		result = mem.newAtom(new IntegerFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigint.bitLength(Arg0) :- class(Arg0, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		int r = o.bitLength();
		result = mem.newAtom(new IntegerFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigint.bitCount(Arg0) :- class(Arg0, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		int r = o.bitCount();
		result = mem.newAtom(new IntegerFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigint.isProbablePrime(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),int(Arg1) | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	int v0 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		boolean r = o.isProbablePrime(v0);
		result = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.compareTo(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),class(Arg1, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigInteger v0 = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		int r = o.compareTo(v0);
		result = mem.newAtom(new IntegerFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.equals(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),class(Arg1, "java.lang.Object") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.lang.Object v0 = (java.lang.Object) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		boolean r = o.equals(v0);
		result = mem.newAtom(new SymbolFunctor(r?"true":"false", 1));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.min(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),class(Arg1, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigInteger v0 = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigInteger r = o.min(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.max(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),class(Arg1, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	java.math.BigInteger v0 = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.math.BigInteger r = o.max(v0);
		result = mem.newAtom(new ObjectFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.hashCode(Arg0) :- class(Arg0, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		int r = o.hashCode();
		result = mem.newAtom(new IntegerFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigint.toString(Arg0,Arg1) :- class(Arg0, "java.math.BigInteger"),int(Arg1) | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	int v0 = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	mem.relink(me.nthAtom(0), 0, me, 2);
	Atom result = null;
	try {
		java.lang.String r = o.toString(v0);
		result = mem.newAtom(new StringFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 2);
	}
	me.nthAtom(1).remove();
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0,Arg1).

H=bigint.toString(Arg0) :- class(Arg0, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		java.lang.String r = o.toString();
		result = mem.newAtom(new StringFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigint.intValue(Arg0) :- class(Arg0, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		int r = o.intValue();
		result = mem.newAtom(new IntegerFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

H=bigint.doubleValue(Arg0) :- class(Arg0, "java.math.BigInteger") | H=[:/*inline*/
	java.math.BigInteger o = (java.math.BigInteger) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	mem.relink(me.nthAtom(0), 0, me, 1);
	Atom result = null;
	try {
		double r = o.doubleValue();
		result = mem.newAtom(new FloatingFunctor(r));
	} catch (Exception e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
	}
	me.nthAtom(0).remove();
	me.remove();
	:](Arg0).

}.
