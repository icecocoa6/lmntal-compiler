/**
NAME
	Scanner module

SYNOPSIS
	
	# scanner.use.
	  n=scanner.nextInt().

	12
	n(12), scanner.stdin('java.util.Sc..'), @scanner603

AUTHOR
	Atsuyuki Inui

HISTORY
	2006/06/23(Fri) nextInt, nextFloat
	2006/06/25(Sun) コンストラクタの引数にストリームを追加
*/

{
module(scanner).

/**
 * scanner.use
 * 
 * initialize scanner module.
 */
scanner.use :- scanner.stdin=[:/*inline*/
	Atom stdin = mem.newAtom(new ObjectFunctor(new java.util.Scanner(System.in)));
	mem.relink(stdin, 0, me, 0);
	me.remove();
	:].

/**
 * scanner.nextInt(-Result)
 * 
 * Result: One integer when succeeded. java.lang.Exception when exception caught.
 */
H=scanner.nextInt(), scanner.stdin(STDIN) :- class(STDIN, "java.util.Scanner") |
	H=scanner.nextInt(STDIN), scanner.stdin(STDIN).

H=scanner.nextInt(Object) :- class(Object, "java.util.Scanner") |
	H=[:/*inline*/
		Atom result = null;
		try {
			java.util.Scanner br = (java.util.Scanner)((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
			int n = br.nextInt();
			result = mem.newAtom(new IntegerFunctor(n));
			mem.relink(result, 0, me, 1);
		} catch(Exception e) {
		System.out.println(e);
			result = mem.newAtom(new ObjectFunctor(e));
		} finally {
			mem.relink(result, 0, me, 1);
			me.nthAtom(0).remove();
			me.remove();
		}
	:](Object).

/**
 * scanner.nextFloat(-Result)
 * 
 * Result: One float when succeeded. java.lang.Exception when exception caught.
 */
H=scanner.nextFloat(), scanner.stdin(STDIN) :- class(STDIN, "java.util.Scanner") |
	H=scanner.nextFloat(STDIN), scanner.stdin(STDIN).

H=scanner.nextFloat(Object) :- class(Object, "java.util.Scanner") |
	H=[:/*inline*/
		Atom result = null;
		try {
			java.util.Scanner br = (java.util.Scanner)((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
			double n = br.nextDouble();
			result = mem.newAtom(new FloatingFunctor(n));
			mem.relink(result, 0, me, 1);
		} catch(Exception e) {
		System.out.println(e);
			result = mem.newAtom(new ObjectFunctor(e));
		} finally {
			mem.relink(result, 0, me, 1);
			me.nthAtom(0).remove();
			me.remove();
		}
	:](Object).
}.
