/*
NAME
	File Lock module

SYNOPSIS

	flock.get, flock.release

AUTHOR
	Atsuyuki Inui

HISTORY
	2006/07/25(Tue)

TODO

*/


{
module(flock).

/**
 * ファイルのロックを取得します
 * String -> String
 */
H=flock.get(Filename) :- string(Filename) | H={
	flock(0).
	file(string.concat(Filename, ".lock")), try.
	//ロックファイルの存在を確認する
	try, file(Filename) :- string(Filename) |
		lockFileExists=file.exists(Filename), file(Filename).
	//ロックファイルがある間は 1000 ミリ秒待って再確認
	lockFileExists(true), flock(N) :- N = 100 | lockFileExists(false).
	lockFileExists(true), flock(N) :- N < 100 | {r=sys.sleep(1000)}, flock(N+1).
	file(Filename), {r(_UR), @p}/ :- string(Filename) |
		lockFileExists=file.exists(Filename), file(Filename).
	
	//ロックファイルがなければロックファイルを作って終了
	file(Filename), lockFileExists(false) :- r=file.create(Filename).
	}.
H={flock(_IN), r(_UR), $p[], @p} :- H=done.

/**
 * ファイルのロックを開放します
 * String -> Boolean
 */
H=flock.release(Filename) :- string(Filename) |
	H=file.delete(string.concat(Filename, ".lock")).
}.
