{
module(lmnsrcparser).

[:/*inline_define*/
import java.util.Iterator;
import java.io.StringReader;
import java.util.Map;
import java.util.HashMap;

import compile.parser.LMNParser;
import compile.parser.ParseException;
import compile.structure.LinkOccurrence;
import compile.structure.ProcessContext;
import compile.structure.RuleStructure;
import compile.structure.RuleContext;
import compile.structure.ContextDef;

class SrcToProc{
	runtime.Membrane m;
	compile.structure.Membrane target;
	Map clink2rlink;
	Map ccdef2rcdef;
	SrcToProc(runtime.Membrane place, compile.structure.Membrane tm){
		m = place;
		target = tm;
		clink2rlink = new HashMap();
		ccdef2rcdef = new HashMap();
	}
	public Link parse(){
		runtime.Membrane parsed = parseMem(m, target);
		runtime.Atom plus = parsed.newAtom(new SymbolFunctor("+",1));
		runtime.Atom ins = parsed.newAtom(Functor.INSIDE_PROXY);
		runtime.Atom outs = m.newAtom(Functor.OUTSIDE_PROXY);
		parsed.newLink(plus,0,ins,1);
		m.newLink(ins,0,outs,0);
		return new Link(outs,1);
	}
	public runtime.Membrane parseMem(runtime.Membrane place, compile.structure.Membrane tm){
		runtime.Membrane thismem = place.newMem();
		thismem.setName("mem");
	
		Iterator itm = tm.mems.iterator();
		while(itm.hasNext()){
			compile.structure.Membrane child = (compile.structure.Membrane)itm.next();
			runtime.Membrane runchild = parseMem(place, child);
			makeRefAtom(thismem, runchild, "mem");
			makeRefAtom(runchild, thismem, "parent");
		}
		Iterator ita = tm.atoms.iterator();
		while(ita.hasNext()){
			compile.structure.Atom atom = (compile.structure.Atom)ita.next();
			runtime.Membrane runatom = parseAtom(place, atom);
			makeRefAtom(thismem, runatom, "atom");
			makeRefAtom(runatom, thismem, "mem");
		}
		Iterator itp = tm.processContexts.iterator();
		while(itp.hasNext()){
			ProcessContext pc = (ProcessContext)itp.next();
			runtime.Membrane runpc = parseProcessContext(place, pc);
			makeRefAtom(thismem, runpc, "proccxt");
			makeRefAtom(runpc, thismem, "mem");
		}
		Iterator ittp = tm.typedProcessContexts.iterator();
		while(ittp.hasNext()){
			ProcessContext tpc = (ProcessContext)ittp.next();
			runtime.Membrane runtpc = parseTypedProcessContext(place, tpc);
			makeRefAtom(thismem, runtpc, "typedproccxt");
			makeRefAtom(runtpc, thismem, "mem");
		}
		Iterator itr = tm.rules.iterator();
		while(itr.hasNext()){
			RuleStructure rs = (RuleStructure)itr.next();
			runtime.Membrane runrs = parseRule(place, rs);
			makeRefAtom(thismem, runrs, "rule");
			makeRefAtom(runrs, thismem, "mem");
		}
		Iterator itrp = tm.ruleContexts.iterator();
		while(itrp.hasNext()){
			RuleContext rc = (RuleContext)itrp.next();
			runtime.Membrane runrc = parseRuleContext(place, rc);
			makeRefAtom(thismem, runrc, "rulecxt");
			makeRefAtom(runrc, thismem, "mem");
		}
		return thismem;
	}
	public runtime.Membrane parseAtom(runtime.Membrane place, compile.structure.Atom atom){
		runtime.Membrane thisatom = place.newMem();
		thisatom.setName("atom");
		makeFunctorField(thisatom, atom.functor);
		for(int i=0;i<atom.getArity();i++){
			LinkOccurrence lo = atom.args[i];
			runtime.Membrane runlo = parseLink(place, lo);
			makeRefAtom(thisatom, runlo, "link", lo.pos);
			makeRefAtom(runlo, thisatom, "atom", lo.pos);
		}
		return thisatom;
	}
	public runtime.Membrane parseLink(runtime.Membrane place, LinkOccurrence lo){
		runtime.Membrane thislink = place.newMem();
		thislink.setName("link");
		makeField(thislink, "name", new StringFunctor(lo.name));
		if(clink2rlink.containsKey(lo.buddy)){
			runtime.Membrane bm = (runtime.Membrane)clink2rlink.get(lo.buddy);
			makeRefAtom(thislink, bm, "buddy");
			makeRefAtom(bm, thislink, "buddy");
			clink2rlink.remove(lo.buddy);
		}
		else{
			clink2rlink.put(lo, thislink);
		}
		return thislink;
	}
	public runtime.Membrane parseProcessContext(runtime.Membrane place, ProcessContext pc){
		runtime.Membrane thispc = place.newMem();
		thispc.setName("proccxt");
		makeField(thispc, "name", new StringFunctor(pc.getName()));
		runtime.Membrane rundef = parseContextDef(place, pc.def);
		makeRefAtom(thispc, rundef, "def");
		if(pc.def.lhsOcc == pc)
			makeRefAtom(rundef, thispc, "lhsOcc");
		else
			makeRefAtom(rundef, thispc, "rhsOcc");
		for(int i=0;i<pc.getArity();i++){
			LinkOccurrence lo = pc.args[i];
			runtime.Membrane runlo = parseLink(place, lo);
			makeRefAtom(thispc, runlo, "link", lo.pos);
			makeRefAtom(runlo, thispc, "atom", lo.pos);
		}
		return thispc;
	}
	public runtime.Membrane parseTypedProcessContext(runtime.Membrane place, ProcessContext tpc){
		runtime.Membrane thistpc = place.newMem();
		thistpc.setName("typedproccxt");
		makeField(thistpc, "name", new StringFunctor(tpc.getName()));
		runtime.Membrane rundef = parseContextDef(place, tpc.def);
		makeRefAtom(thistpc, rundef, "def");
		if(tpc.def.lhsOcc == tpc)
			makeRefAtom(rundef, thistpc, "lhsOcc");
		else
			makeRefAtom(rundef, thistpc, "rhsOcc");
		for(int i=0;i<tpc.getArity();i++){
			LinkOccurrence lo = tpc.args[i];
			runtime.Membrane runlo = parseLink(place, lo);
			makeRefAtom(thistpc, runlo, "link", lo.pos);
			makeRefAtom(runlo, thistpc, "atom", lo.pos);
		}
		return thistpc;
	}
	public runtime.Membrane parseRule(runtime.Membrane place, RuleStructure rs){
		runtime.Membrane thisrule = place.newMem();
		thisrule.setName("rule");
		runtime.Membrane runlhs = parseMem(place, rs.leftMem);
		makeRefAtom(thisrule, runlhs, "lhs");
		runtime.Membrane runrhs = parseMem(place, rs.rightMem);
		makeRefAtom(thisrule, runrhs, "rhs");
		return thisrule;
	}
	public runtime.Membrane parseRuleContext(runtime.Membrane place, RuleContext rc){
		runtime.Membrane thisrc = place.newMem();
		thisrc.setName("rulecxt");
		makeField(thisrc, "name", new StringFunctor(rc.getName()));
		runtime.Membrane rundef = parseContextDef(place, rc.def);
		makeRefAtom(thisrc, rundef, "def");
		if(rc.def.lhsOcc == rc)
			makeRefAtom(rundef, thisrc, "lhsOcc");
		else
			makeRefAtom(rundef, thisrc, "rhsOcc");
		return thisrc;
	}
	public runtime.Membrane parseContextDef(runtime.Membrane place, ContextDef def){
		if(ccdef2rcdef.containsKey(def))
			return (runtime.Membrane)ccdef2rcdef.get(def);
		runtime.Membrane thisdef = place.newMem();
		thisdef.setName("cxtdef");
		ccdef2rcdef.put(def,thisdef);
		return thisdef;
	}
	public void makeRefAtom(runtime.Membrane from, runtime.Membrane to, String refname){
		makeRefAtom(from, to, refname, -1);
	}
	/** p == -1 の時、参照アトムは1引数、それ以外の時は2引数 */
	public void makeRefAtom(runtime.Membrane from, runtime.Membrane to, String refname, int p){
		runtime.Atom plus = to.newAtom(new SymbolFunctor("+",1));
		runtime.Atom toIn = to.newAtom(Functor.INSIDE_PROXY);
		runtime.Atom toOut = to.getParent().newAtom(Functor.OUTSIDE_PROXY);
		runtime.Atom fromOut = from.getParent().newAtom(Functor.OUTSIDE_PROXY);
		runtime.Atom fromIn = from.newAtom(Functor.INSIDE_PROXY);
		runtime.Atom ref = (p == -1)?
			(from.newAtom(new SymbolFunctor(refname,1))):
			(from.newAtom(new SymbolFunctor(refname,2)));
		if(p >= 0){
			runtime.Atom posatom = from.newAtom(new IntegerFunctor(p));
			from.newLink(ref, 1, posatom, 0);
		}
		to.newLink(plus,0,toIn,1);
		to.getParent().newLink(toIn,0,toOut,0);
		to.getParent().newLink(fromOut,1,toOut,1);
		from.getParent().newLink(fromIn,0,fromOut,0);
		from.newLink(ref,0,fromIn,1);
	}
	public void makeField(runtime.Membrane procmem, String fieldname, Functor func){
		runtime.Atom froot = procmem.newAtom(new SymbolFunctor(fieldname,1));
		runtime.Atom fcont = procmem.newAtom(func);
		procmem.newLink(froot,0,fcont,0);
	}
	public void makeFunctorField(runtime.Membrane atommem, Functor func){
		runtime.Atom froot = atommem.newAtom(new SymbolFunctor("functor",1));
		Link flink = null;
		if(func instanceof SymbolFunctor){
			SymbolFunctor sfunc = (SymbolFunctor)func;
			runtime.Atom fatom = atommem.newAtom(new SymbolFunctor("normalfunc",3));
			runtime.Atom natom = atommem.newAtom(new StringFunctor(sfunc.getName()));
			runtime.Atom aatom = atommem.newAtom(new IntegerFunctor(sfunc.getArity()));
			atommem.newLink(fatom,0,natom,0);
			atommem.newLink(fatom,1,aatom,0);
			flink = new Link(fatom,2);
		}
		else if(func instanceof IntegerFunctor){
			IntegerFunctor ifunc = (IntegerFunctor)func;
			runtime.Atom fatom = atommem.newAtom(new SymbolFunctor("intfunc",2));
			runtime.Atom iatom = atommem.newAtom(new IntegerFunctor(ifunc.intValue()));
			atommem.newLink(fatom,0,iatom,0);
			flink = new Link(fatom,1);
		}
		else if(func instanceof FloatingFunctor){
			FloatingFunctor ffunc = (FloatingFunctor)func;
			runtime.Atom fatom = atommem.newAtom(new SymbolFunctor("floatfunc",2));
			runtime.Atom flatom = atommem.newAtom(new FloatingFunctor(ffunc.floatValue()));
			atommem.newLink(fatom,0,flatom,0);
			flink = new Link(fatom,1);
		}
		else if(func instanceof StringFunctor){
			StringFunctor sfunc = (StringFunctor)func;
			runtime.Atom fatom = atommem.newAtom(new SymbolFunctor("stringfunc",2));
			runtime.Atom satom = atommem.newAtom(new StringFunctor(sfunc.stringValue()));
			atommem.newLink(fatom,0,satom,0);
			flink = new Link(fatom,1);
		}
		else if(func.equals(Functor.INSIDE_PROXY)){
			runtime.Atom fatom = atommem.newAtom(new SymbolFunctor("inside_proxy",1));
			flink = new Link(fatom,0);
		}
		else if(func.equals(Functor.OUTSIDE_PROXY)){
			runtime.Atom fatom = atommem.newAtom(new SymbolFunctor("outside_proxy",1));
			flink = new Link(fatom,0);
		}
		else{
			System.err.println("unknown functor:" + func.toString());
		}
		atommem.unifyLinkBuddies(new Link(froot,0),flink);
	}
}

:].

H=lmnsrcparser.parse($srctext) :- string($srctext) | H=[:/*inline*/
	String srctext = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();

	try{
		compile.structure.Membrane m = new LMNParser(new StringReader(srctext)).parse();
		Link retlink = new SrcToProc(mem,m).parse();
		mem.unifyLinkBuddies(retlink, me.getArg(1));
	}
	catch(ParseException e){
		Atom er = mem.newAtom(new SymbolFunctor("parse_error",1));
		mem.relinkAtomArgs(er,0,me,1);
	}
	me.nthAtom(0).remove();
	me.remove();
:]($srctext).

}.