/**
  Coyright(C) 2006 Ueda Laboratory LMNtal Group, All rights reserved.
  $Author: Atsushi NAKANO $

  SYNOPSIS
	graphic=option.use.
	とやると、グラフィックモードを実行しgoアトムを生成する。
	かならず、グラフィックモードを実行されてから反応が始まってほしい場合は、goアトムを利用する。
*/
[:/*inline_define*/
	import java.awt.*;
	import java.awt.event.*;
	import java.awt.MouseInfo.*;
:]
{
module(graphic).

//グラフィックオプション指定無でグラフィックモードにする
graphic.use :- [:/*inline*/
	Env.fGraphic = true;
	Env.initGraphic();
	Atom atom = mem.newAtom(new Functor("go", 0));
	me.remove();
:].

//再描画を停止する
graphic.norepaint :- [:/*inline*/
	if(null != Env.LMNgraphic){
		Env.LMNgraphic.setRepaint((Membrane)mem, false);
		Atom atom = mem.newAtom(new Functor("norepaint_go", 0));
		me.remove();
	}	
:].
//再描画を再開する
graphic.repaint :- [:/*inline*/
	if(null != Env.LMNgraphic){
		Env.LMNgraphic.setRepaint((Membrane)mem, true);
		Atom atom = mem.newAtom(new Functor("repaint_go", 0));
		me.remove();
	}
:].

//グラフィックオプション指定無でグラフィックモードにする
//反応するものがない場合でも終了しない
graphic.perpetualUse :- [:/*inline*/
	Env.fGraphic = true;
	Env.initGraphic();
	mem.makePerpetual();
	Atom atom = mem.newAtom(new Functor("go", 0));
	me.remove();
:].

H=graphic.mousePointX:- H=[:/*inline*/
	PointerInfo pointerInfo = MouseInfo.getPointerInfo();
	int point = (int)(pointerInfo.getLocation().x);
	Atom atom = mem.newAtom(new IntegerFunctor(point));
	mem.relink(atom,0,me,0);
	mem.removeAtom(me);
  :].


H=graphic.mousePointY :- H=[:/*inline*/
	PointerInfo pointerInfo = MouseInfo.getPointerInfo();
	int point = (int)(pointerInfo.getLocation().y);
	Atom atom = mem.newAtom(new IntegerFunctor(point));
	mem.relink(atom,0,me,0);
	mem.removeAtom(me);
  :].

  
 /**ウィンドウ上にマウスがある場合はその位置を返す。なければ-1を返す*/
H=graphic.mouseFramePointX(X) :- int(X)|H=[:/*inline*/

	int x = ((IntegerFunctor)(me.nthAtom(0).getFunctor())).intValue();
	Point p = null;
	if(Env.LMNgraphic != null)
		p= Env.LMNgraphic.getMousePoint((Membrane)mem);
	if(p != null)
		x = (int)(p.x);
	Atom atom = mem.newAtom(new IntegerFunctor(x));
	mem.relink(atom, 0, me, 1);
	me.nthAtom(0).remove();
	me.remove();
	
	
	:](X).
  
H=graphic.mouseFramePointY(Y) :- int(Y)|H=[:/*inline*/
	int y = ((IntegerFunctor)(me.nthAtom(0).getFunctor())).intValue();
	Point p = null;
	if(Env.LMNgraphic != null)
		p= Env.LMNgraphic.getMousePoint((Membrane)mem);
	if(p != null)
		y = (int)(p.y);
	Atom atom = mem.newAtom(new IntegerFunctor(y));
	mem.relink(atom, 0, me, 1);
	me.nthAtom(0).remove();
	me.remove();
	:](Y).
	
	  
 /**ウィンドウ上にマウスがある場合はその位置を返す。なければ-1を返す*/
H=graphic.mouseFramePointX :- H=[:/*inline*/
	int x = -1;
	Point p = null;
	if(Env.LMNgraphic != null)
		p= Env.LMNgraphic.getMousePoint((Membrane)mem);
	if(p != null)
		x = (int)(p.x);
	Atom atom = mem.newAtom(new IntegerFunctor(x));
	mem.relink(atom,0,me,0);
	mem.removeAtom(me);
	
	:].
  
H=graphic.mouseFramePointY :- H=[:/*inline*/
	int y = -1;
	Point p = null;
	if(Env.LMNgraphic != null)
		p= Env.LMNgraphic.getMousePoint((Membrane)mem);
	if(p != null)
		y = (int)(p.y);
	Atom atom = mem.newAtom(new IntegerFunctor(y));
	mem.relink(atom,0,me,0);
	mem.removeAtom(me);
	:].
	
/** ウィンドウサイズを取得する */
H=graphic.windowWidth :- H=[:/*inline*/
	int width = 0;
	if(Env.LMNgraphic != null){
		Dimension d = (Dimension)Env.LMNgraphic.getWindowSize((Membrane)mem);
		if(null != d){ width = d.width; }
	}
	Atom atom = mem.newAtom(new IntegerFunctor(width));
	mem.relink(atom,0,me,0);
	me.remove();
  :].
  
H=graphic.windowHeight :- H=[:/*inline*/
	int height = 0;
	if(Env.LMNgraphic != null){
		Dimension d = (Dimension)Env.LMNgraphic.getWindowSize((Membrane)mem);
		if(null != d){ height = d.height; }
	}
	Atom atom = mem.newAtom(new IntegerFunctor(height));
	mem.relink(atom,0,me,0);
	me.remove();
  :].
}.