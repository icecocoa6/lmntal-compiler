/*

NAME

	codec module

SYNOPSIS

    ret1=codec.memEncoder({a. b:-c}).
      encode 'a' and 'b:-c'
    ret2=codec.memRulesetsEncoder({a. b:-c}).
      encode 'b:-c'
    ret3=codec.memProcessEncoder({a. b:-c}).
      encode 'a'
      
AUTHOR

	Ryo Okabe

HISTORY

    06/01/10 released
	06/01/12 2.0
	06/01/30 3.0 memRulesetsEncoder,memProcessEncoderを追加．
	06/04/11 3.1 decodeFilter とencodeFilter を追加．encoded @@ でlib/src/nlmem.lmn のnlmem.kill を使うように変更．

*/

[:/*inline_define*/
import java.io.*;
import compile.*;
import compile.parser.LMNParser;
import compile.parser.ParseException;
import compile.parser.intermediate.RulesetParser;
:].

{
module(codec).

/**
 *  module: memEncoder
 *  membrane -> string
 *  Example
 *    ret=codec.memEncoder({a. a:-b}) -> "{a. a:-b}"
 */
memEncoder @@
Ret=codec.memEncoder({$p,@p}) :-
  Ret=codec.encoded(X),{X=codec.encode,$p,@p}.

encode @@
{Ret=codec.encode,$p,@p} :-
  {Ret=
  [:/*inline*/
    me.remove();
    StringFunctor sFunc =
      new StringFunctor(((Membrane)mem).encode());
    Atom sAtom = mem.newAtom(sFunc);
    mem.relinkAtomArgs(sAtom,0,me,0);
  :],$p,@p}.

/**
 *  module: memRulesetsEncoder
 *  membrane -> string
 *  Example
 *    ret=codec.memRulesetsEncoder({a. a:-b}) -> "{a:-b}"
 */
memRulesetsEncoder @@
Ret=codec.memRulesetsEncoder({$p,@p}) :-
  Ret=codec.encoded(X),{X=codec.encodeRulesets,$p,@p}.

encodeRulesets @@
{Ret=codec.encodeRulesets,$p,@p} :-
  {Ret=
  [:/*inline*/
    me.remove();
    StringFunctor sFunc =
      new StringFunctor(((Membrane)mem).encodeRulesets());
    Atom sAtom = mem.newAtom(sFunc);
    mem.relinkAtomArgs(sAtom,0,me,0);
  :],$p,@p}.

/**
 *  module: memProcessEncoder
 *  membrane -> string
 *  Example
 *    ret=codec.memProcessEncoder({a. a:-b}) -> "{a}"
 */
memProcessEncoder @@
Ret=codec.memProcessEncoder({$p,@p}) :-
  Ret=codec.encoded(X),{X=codec.encodeProcess,$p,@p}.

encodeProcess @@
{Ret=codec.encodeProcess,$p,@p} :-
  {Ret=
  [:/*inline*/
    me.remove();
    StringFunctor sFunc =
      new StringFunctor(((Membrane)mem).encodeProcess());
    Atom sAtom = mem.newAtom(sFunc);
    mem.relinkAtomArgs(sAtom,0,me,0);
  :],$p,@p}.

encoded @@
Ret=codec.encoded(X),{X=S,$p[|*X],@p} :- string(S) | 
  Ret=S,nlmem.kill({$p[|*X]}).

/**
 *  module: strDecoder
 *  string -> membrane
 *  Example
 *    strDecoder("{a. a:-b}") -> {a. a:-b}
 */
strDecoder @@
codec.strDecoder(S) :- string(S) |
  [:/*inline*/
    String str = me.nth(0);
    LMNParser lp;
    compile.structure.Membrane m;
    Ruleset rs;
    try {
      lp = new LMNParser(new StringReader(str));
      m = lp.parse();
      rs = RulesetCompiler.compileMembrane(m);
      rs.react((Membrane)mem);
    } catch(ParseException e) {
      e.printStackTrace();
    }
    me.nthAtom(0).remove();
    me.remove();
  :](S).

/**
 *  module: fileDecoder
 *  file(.lmn) -> membrane
 *  Example
 *    codec.fileDecoder("hoge.lmn") -> {a. a:-b}
 */
fileDecoder @@
codec.fileDecoder(S) :- string(S) |
  [:/*inline*/
    try {
      String filename = me.nth(0);
      FileInputStream fis = new FileInputStream(filename);
      InputStreamReader isr = new InputStreamReader(fis);
      BufferedReader br = new BufferedReader(isr);
      LMNParser lp;
      compile.structure.Membrane m;
      Ruleset rs;
      lp = new LMNParser(br);
      m = lp.parse();
      rs = RulesetCompiler.compileMembrane(m);
      rs.react((Membrane)mem);
      br.close();
    } catch(IOException e) {
      e.printStackTrace();
    } catch(ParseException e) {
      e.printStackTrace();
    }
    me.nthAtom(0).remove();
    me.remove();
  :](S).

/**
 *  module: encodeFilter
 *  membrane list -> string list
 *  Example
 *    nothing
 */
encodeFilter @@
Ret=codec.encodeFilter([H|T]) :-
  Ret=[codec.memEncoder(H)|codec.encodeFilter(T)].
  
/**
 *  module: decodeFilter
 *  list -> membrane
 *  Example
 *    codec.decodeFilter([M1,M2]),M1="{a}",M2="{b}" -> {a},{b}
 */
decodeFilter @@
codec.decodeFilter([H|T]) :- string(H) | 
  codec.decodeFilter(T),codec.strDecoder(H).
}
