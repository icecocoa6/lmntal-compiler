/**
NAME
	Double module

SYNOPSIS

AUTHOR
	Shintaro Kudo

HISTORY
	2004/06/04(Fri)

*/

//いくつか気になること:
//1. doubleというモジュール名は適当ではない。(floatにすべき)
//2. 演算子があちこちで定義されている。(組み込み、integer, double)
//3. 中置記法演算子はともかく、absはfloat.absとかのほうがいいのか?

{

module(double).

/**
 * '>'(+Operand1, +Operand2, -Res) :
 *
 * @param +Operand1,+Operand2 浮動小数点数アトム
 * @param -Res 結果(true/1 or false/1)
 * @example r(3.5 > 2.5) ==> r=true
 * @example r(3.0 > 3.5) ==> r=false
 */
H= '>'(A,B) :- float(A),float(B) | H = [:/*inline*/		

		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();

		Atom result = mem.newAtom(
		new Functor((( a0 > a1 )?"true":"false"), 1)
		);
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	
	:](A,B).

/**
 * '<'(+Operand1, +Operand2, -Res):
 *
 * @param +Operand1,+Operand2 浮動小数点アトム
 * @param -Res 結果(true/1 or false/1)
 * @example r(3.5 < 3.0) ==> r=false
 * @example r(2.5 < 3.5) ==> r=true
 */
H= '<'(A,B) :- float(A),float(B) | H = [:/*inline*/		

		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();

		Atom result = mem.newAtom(
		new Functor((( a0 < a1 )?"true":"false"), 1)
		);
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	
	:](A,B).

/**
 * '=<'(+Operand1, +Operand2, -Res):
 * 
 * @param +Operand1,+Operand2 浮動小数点アトム
 * @param -Res 結果(true/1 or false/1)
 * @example r(3.5 =< 3.0) ==> r=false
 * @example r(2.5 =< 3.5) ==> r=true
 */
H= '=<'(A,B) :- float(A),float(B) | H = [:/*inline*/		

		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();

		Atom result = mem.newAtom(
		new Functor((( a0 <= a1 )?"true":"false"), 1)
		);
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	
	:](A,B).

/**
 * '>='(+Operand1, +Operand2, -Res):
 * 
 * @param +Operand1,+Operand2 浮動小数点アトム
 * @param -Res 結果(true/1 or false/1)
 * @example r(3.5 >= 3.0) ==> r=true
 * @example r(2.5 >= 3.5) ==> r=false
 */
H= '>='(A,B) :- float(A),float(B) | H = [:/*inline*/		

		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();

		Atom result = mem.newAtom(
		new Functor((( a0 >= a1 )?"true":"false"), 1)
		);
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	
	:](A,B).

/**
 * '=='(+Operand1, +Operand2, -Res):
 *
 * @param +Operand1,+Operand2 浮動小数点アトム
 * @param -Res 結果(true/1 or false/1)
 * @example r(3.5 == 3.0) ==> r=false
 * @example r(2.5 == 2.5) ==> r=true
 */
H= '=='(A,B) :- float(A),float(B) | H= [:/*inline*/

		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();

		Atom result = mem.newAtom(
		new Functor((( a0 == a1 )?"true":"false"), 1)
		);
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	
	:](A,B).
	
/**
 * '!='(+Operand1, +Operand2, -Res):
 *
 * @param +Operand1,+Operand2 浮動小数点アトム
 * @param -Res 結果(true/1 or false/1)
 * @example r(3.5 != 3.0) ==> r=false
 * @example r(2.5 != 2.5) ==> r=true
 */
H= '!='(A,B) :- float(A),float(B) | H= [:/*inline*/
		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
		Atom result = mem.newAtom(
		new Functor((( a0 != a1 )?"true":"false"), 1)
		);
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).

/**
 * abs(+Float, -Res):
 *
 * 浮動小数点数Floatの絶対値をResに返します。
 * @param +Float 浮動小数点数アトム
 * @param -Res 結果
 */
H= abs(A) :- float(A) | H= [:/*inline*/
		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		Atom result = mem.newAtom(new FloatingFunctor((a0 >= 0 )?a0:-a0));
		mem.relink(result, 0, me, 1);
		me.nthAtom(0).remove();
		me.remove();
	:](A).

/**
 * '+'(+Operand1, +Operand2, -Res):
 *
 * 浮動小数点数と整数もしくは浮動小数点数の加算結果を返します。
 * @param +Operand1,+Operand2 整数もしくは浮動小数点数
 * @param -Res 結果 (浮動小数点数)
 * @example r=(1.5 + 2) ==> r=(3.5)
 */
H= '+'(A,B) :- float(A),float(B) | H= [:/*inline*/
		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
		Atom result = mem.newAtom(new FloatingFunctor(a0 + a1));
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).
H= '+'(A,B) :- float(A),int(B) | H= [:/*inline*/
		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
		Atom result = mem.newAtom(new FloatingFunctor(a0 + a1));
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).
H= '+'(A,B) :- int(A),float(B) | H= [:/*inline*/
		double a0=
		((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
		Atom result = mem.newAtom(new FloatingFunctor(a0 + a1));
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).

/**
 * '-'(+Operand1, +Operand2, -Res):
 *
 * 浮動小数点数と整数もしくは浮動小数点数の減算結果を返します。
 * @param +Operand1,+Operand2 整数もしくは浮動小数点数
 * @param -Res 結果 (浮動小数点数)
 * @example r=(2.5 - 2) ==> r=(0.5)
 */
H= '-'(A,B) :- float(A),float(B) | H= [:/*inline*/
		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
		Atom result = mem.newAtom(new FloatingFunctor(a0 - a1));
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).
H= '-'(A,B) :- float(A),int(B) | H= [:/*inline*/
		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
		Atom result = mem.newAtom(new FloatingFunctor(a0 - a1));
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).
H= '-'(A,B) :- int(A),float(B) | H= [:/*inline*/
		double a0=
		((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
		Atom result = mem.newAtom(new FloatingFunctor(a0 - a1));
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).

/**
 * '*'(+Operand1, +Operand2, -Res):
 *
 * 浮動小数点数と整数もしくは浮動小数点数の乗算結果を返します。
 * @param +Operand1,+Operand2 整数もしくは浮動小数点数
 * @param -Res 結果 (浮動小数点数)
 * @example r=(1.5 * 2) ==> r=(3.0)
 */
H= '*'(A,B) :- float(A),float(B) | H= [:/*inline*/
		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
		Atom result = mem.newAtom(new FloatingFunctor(a0 * a1));
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).
H= '*'(A,B) :- float(A),int(B) | H= [:/*inline*/
		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
		Atom result = mem.newAtom(new FloatingFunctor(a0 * a1));
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).
H= '*'(A,B) :- int(A),float(B) | H= [:/*inline*/
		double a0=
		((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
		Atom result = mem.newAtom(new FloatingFunctor(a0 * a1));
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).
	
/**
 * '/'(+Operand1, +Operand2, -Res):
 *
 * 浮動小数点数と整数もしくは浮動小数点数の除算結果を返します。
 * @param +Operand1,+Operand2 整数もしくは浮動小数点数
 * @param -Res 結果 (浮動小数点数)
 * @example r=(3.0 / 2) ==> r=(1.5)
 */
H= '/'(A,B) :- float(A),float(B) | H= [:/*inline*/
		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
		Atom result = mem.newAtom(new FloatingFunctor(a0 / a1));
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).
H= '/'(A,B) :- float(A),int(B) | H= [:/*inline*/
		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
		Atom result = mem.newAtom(new FloatingFunctor(a0 / a1));
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).
H= '/'(A,B) :- int(A),float(B) | H= [:/*inline*/
		double a0=
		((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
		Atom result = mem.newAtom(new FloatingFunctor(a0 / a1));
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).

}