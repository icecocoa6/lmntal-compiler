/*
NAME
	Integer module

SYNOPSIS  
	
AUTHOR
	Koji Hara
	Ken Sakurai
	Atsushi Nakano

HISTORY
	2004/06/04(Fri)

*/

{
module(integer).

/**
 * integer.set($a,$b,$g):
 *
 * Creates a (multi)set $g[$a], $g[$a+1], ..., $g[$b].
 * (e.g., a=set(1,100) --> a=1, ..., a=100)
 * $a and $b must be integers.
 * $g must be a ground term.
 */
H = integer.set(A, B) :- ground(H), int(A), int(B), A > B | .
H = integer.set(A, B) :- int(A), int(B), A =< B | H=[:/*inline*/
  int start =
 ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
  int stop =
 ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
  
  Atom result = mem.newAtom(new IntegerFunctor(start));
  mem.relink(result, 0, me, 2);
  me.nthAtom(0).remove();
  me.nthAtom(1).remove();
  me.remove();
  Atom toLink = result.nthAtom(0);
  int toArg=0;
  
  for(int i = 0; i < toLink.getEdgeCount(); i++){
    if(toLink.nthAtom(i) == result){
      toArg = i;
      break;
    }
  }

  for(int i = start; i < stop; i++){
    /* copying */
  	Map atomMap = new HashMap();
    atomMap.put(result, mem.newAtom(result.getFunctor()));
    atomMap = mem.copyAtoms(result, atomMap);
    
    result.remove();
    result = mem.newAtom(new IntegerFunctor(i+1));
    mem.newLink(result, 0, toLink, toArg);
    toLink = result.nthAtom(0);
  }
 :](A, B).

/**
 * H = '+'(A,B):
 *
 * H is bound to A+B
 */
H='+'(A, B) :- int(A),int(B),A+B=C | H=C.

/**
 * H = '-'(A,B):
 *
 * H is bound to A-B
 */
H='-'(A, B) :- int(A),int(B),A-B=C | H=C.

/**
 * H = '*'(A,B):
 *
 * H is bound to A*B
 */
H='*'(A, B) :- int(A),int(B),A*B=C | H=C.

/**
 * H = '/'(A,B):
 *
 * H is bound to A/B
 */
H='/'(A, B) :- int(A),int(B),A/B=C | H=C.

/**
 * H = mod(A,B):
 *
 * H is bound to A mod B
 */
H=mod(A, B) :- int(A),int(B),A mod B = C | H=C.

/*
 * H = abs(N):
 *
 * H is bound to abs(N)
 */
H=integer.abs(N) :- int(N),N<0 | H=-1*N.
H=integer.abs(N) :- int(N),N>=0 | H=N.

/*
 * H='>'(A,B):
 *
 * H is bound to true when A>B, false otherwise
 */
H='>'(A, B) :- int(A),int(B),A>B | H=true.
H='>'(A, B) :- int(A),int(B),A=<B | H=false.

/*
 * H='<'(A,B):
 *
 * H is bound to true when A<B, false otherwise
 */
H='<'(A, B) :- int(A),int(B),A>=B | H=false.
H='<'(A, B) :- int(A),int(B),A<B | H=true.

/*
 * H='>='(A,B):
 *
 * H is bound to true when A>=B, false otherwise
 */
H='>='(A, B) :- int(A),int(B),A>=B | H=true.
H='>='(A, B) :- int(A),int(B),A<B | H=false.

/*
 * H='=<'(A,B):
 *
 * H is bound to true when A=<B, false otherwise
 */
H='=<'(A, B) :- int(A),int(B),A>B | H=false.
H='=<'(A, B) :- int(A),int(B),A=<B | H=true.

/*
 * H='=='(A,B):
 *
 * H is bound to true when A==B, false otherwise
 */
H='=='(A, B) :- int(A),int(B),A=B | H=true.
H='=='(A, B) :- int(A),int(B),A-B>0 | H=false.
H='=='(A, B) :- int(A),int(B),A-B<0 | H=false.

/* 
 * H='!='(A,B):
 *
 * H is bound to true when A!=B, false otherwise
 */
H='!='(A, B) :- int(A),int(B),A=B | H=false.
H='!='(A, B) :- int(A),int(B),A-B>0 | H=true.
H='!='(A, B) :- int(A),int(B),A-B<0 | H=true.

/*
 * H='<<'(A,B):
 *
 * H is bound to A shift left by N bits
 */
H = '<<'(A, N) :- int(A),int(N),N>0 | H='<<'(A*2,N-1).
H = '<<'(A, 0) :- H=A.

/*
 * H='>>'(A,B):
 *
 * H is bound to A shift right by N bits
 */
H = '>>'(A, N) :- int(A),int(N),N>0 | H='>>'(A/2,N-1).
H = '>>'(A, 0) :- H=A.

/*
 * H = '|'(A,B):
 *
 * H is bound to bitwise AND of A and B
 *
 */
H = '&'(A,B) :- int(A),int(B) | H=[:/*inline*/
 int a = 
  ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
  int b =
  ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
  Atom result = mem.newAtom(new IntegerFunctor(a & b));
  mem.relink(result, 0, me, 2);
  me.nthAtom(0).remove();
  me.nthAtom(1).remove();
  me.remove();
 :](A,B).

/*
 * H = '|'(A,B):
 *
 * H is bound to bitwise OR of A and B
 *
 */
H = '|'(A,B) :- int(A),int(B) | H=[:/*inline*/
 int a = 
  ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
  int b =
  ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
  Atom result = mem.newAtom(new IntegerFunctor(a | b));
  mem.relink(result, 0, me, 2);
  me.nthAtom(0).remove();
  me.nthAtom(1).remove();
  me.remove();
 :](A,B).

/*
 * H = '^'(A,B):
 *
 * H is bound to bitwise XOR of A and B
 *
 */
H = '^'(A,B) :- int(A),int(B) | H=[:/*inline*/
 int a = 
  ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
  int b =
  ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
  Atom result = mem.newAtom(new IntegerFunctor(a ^ b));
  mem.relink(result, 0, me, 2);
  me.nthAtom(0).remove();
  me.nthAtom(1).remove();
  me.remove();
 :](A,B).

  
/*
 * H = integer.power(A,N):
 *
 * H is bound to A to the power of N
 */
H = integer.power(A, N) :- int(A),int(N) | H=[:/*inline*/
  int a = 
  ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
  int n =
  ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
  int r = 1;  
  for(int i=n;i>0;i--) r*=a;
  Atom result = mem.newAtom(new IntegerFunctor(r));
  mem.relink(result, 0, me, 2);
  me.nthAtom(0).remove();
  me.nthAtom(1).remove();
  me.remove();
 :](A,N).

/*
 * H = integer.rnd(N):
 * 
 * H is bound to a random number between 0 and N-1.
 */
H = integer.rnd(N) :- int(N) | H=[:/*inline*/
  int n = 
  ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
  Random rand = new Random();
  int rn = (int)(n*Math.random());
  Atom result = mem.newAtom(new IntegerFunctor(rn));
  mem.relink(result, 0, me, 1);
  me.nthAtom(0).remove();
  me.remove();
  :](N).
  
/*
 * H = integer.gcd(M, N):
 *
 * H is bound to the gcd of M and N (not fast)
 */
H = integer.gcd(M, N) :- M > N | H=integer.gcd(M-N, N).
H = integer.gcd(M, N) :- N > M | H=integer.gcd(M, N-M).
H = integer.gcd(M, N) :- N = M | H=M.

/*
 * H = lcm(M, N):
 *
 * H is bound to the lcm of M and N (not fast)
 */
H = integer.lcm(M, N) :- int(M),int(N) | H = M*N/integer.gcd(M, N).

/*
 * H = integer.factorial(N):
 *
 * H is bound to the factorial of N
 */
H = integer.factorial(N) :- N =< 1 | H = 1.
H = integer.factorial(N) :- N >= 2 | H = N*integer.factorial(N-1).

/*
 * H = integer.parse(String):
 *
 * parse String and binds the resulting value to H
 *
 */
H = integer.parse(S) :- string(S) | H=[:/*inline*/
	String s = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	Random rand = new Random();
	int v=0;
	try{
		v = Integer.parseInt(s);
	} catch(NumberFormatException e) {
	}
	Atom result = mem.newAtom(new IntegerFunctor(v));
	mem.relink(result, 0, me, 1);
	me.nthAtom(0).remove();
	me.remove();
	:](S).

/*
 * integer.rndList(+Max,+Count):
 *
 * Generate a list of random numbers between 0 and Max.
 * Count specifies the length of the list.
 */
H=integer.rndList(_IMax, Count) :- Count=0 | H=[].
H=integer.rndList(_IMax, Count) :- Count>0 | H=[integer.rnd(_IMax)|integer.rndList(_IMax, Count-1)].

}.
