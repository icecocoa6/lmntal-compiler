/**

NAME

	Array module

SYNOPSIS

	array.new(Size,Array)
	array.put(Array,Index,NewInt,NewArray)
	array.get(Array,Index,OldInt,NewArray)
	array.update(Array,Index,OldValue,NewValue,NewArray)	

AUTHOR

	Koji Hara and Kazunori Ueda
	and Atsushi Nakano

HISTORY

	2005/06/24 original
	2005/11/05 representation changed and array.update added

COMMENTS

- representation: int_array('@'(A0,...,An-1), Out)
  or array('@'(A0,...,An-1), Out) after general values are stored.
- array.new creates int_array('@'(0,0,...,0), Out).
- only integers can be array.put into int_array so that all its
  elements remain to be integers and array.get returns an integer.
- on the other hand, array.update can be used to store anything into
  the array.
- once array.update is used, int_array('@'(...), Out) becomes
  array('@'(...), Out).
  
*/
{
	module(array).

/**
 * array.new(Length, Res):
 *
 * Lengthで指定された長さの配列を生成してResにつなぎます。
 */	

	H=array.new(Length) :- int(Length) | H=[:/*inline*/
		int l = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
		Atom result = mem.newAtom(new Functor("int_array", 2));
		Atom result2 = mem.newAtom(new Functor("@", l+1));
		for(int i=0;i<l;i++) {
			Atom el = mem.newAtom(new IntegerFunctor(0));
			mem.newLink(el, 0, result2, i);
		}
		mem.newLink(result, 0, result2, l);
		mem.relink(result, 1, me, 1);
		me.nthAtom(0).remove();
		me.remove();
		:](Length).

/**
 * array.new(Length, Value, Res):
 *
 * Lengthで指定された長さの配列を生成してResにつなぎます。
 * 生成されたリストの初期値にValueが繋がる．int型のみ．
 * by nakano
 */	

	H=array.new(Length, Value) :- int(Length), int(Value) | H=[:/*inline*/
		int l = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
		int value = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
		Atom result = mem.newAtom(new Functor("int_array", 2));
		Atom result2 = mem.newAtom(new Functor("@", l+1));
		for(int i=0;i<l;i++) {
			Atom el = mem.newAtom(new IntegerFunctor(value));
			mem.newLink(el, 0, result2, i);
		}
		mem.newLink(result, 0, result2, l);
		mem.relink(result, 1, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
		:](Length, Value).

/**
 * array.update(Array, Index, OldValue, NewValue, NewArray):
 *
 * 配列ArrayのIndexで指定された要素をNewValueにつなぎ、
 * OldValueに与えられた要素が代わりにセットされた配列を
 * NewArrayにつなぎます。
 */
  H=array.update(int_array(A), I, OldValue, NewValue) :- int(I) |
	  H=array(X), [:/*inline*/
		int i = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
		int len = me.nthAtom(0).getFunctor().getArity()-1;
		i = (i+len) % len;
		
		mem.swapAtomArgs(me.nthAtom(0), i, me, 3);
		mem.unifyAtomArgs(me, 4, me, 0);
		mem.unifyAtomArgs(me, 3, me, 2);
		me.nthAtom(1).remove();
		me.remove();
		:](A, I, OldValue, NewValue, X).

/*
 * array.update(Array, Index, OldValue, NewValue):
 * 
 * ?
 */
		
  H=array.update(array(A), I, OldValue, NewValue) :- int(I) |
  /* just duplicating the array.update(int_array(A),...) case */
	  H=array(X), [:/*inline*/
	  int i = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
		int len = me.nthAtom(0).getFunctor().getArity()-1;
		i = (i+len) % len;
		
		mem.swapAtomArgs(me.nthAtom(0), i, me, 3);
		mem.unifyAtomArgs(me, 4, me, 0);
		mem.unifyAtomArgs(me, 3, me, 2);
		me.nthAtom(1).remove();
		me.remove();
		:](A, I, OldValue, NewValue, X).

/**
 * array.get(+Array, +Index, -Res, -NewArray):
 * 配列ArrayのIndexで指定された要素をResにつなぎ、
 * (更新されていない)配列をNewArrayにつなぎます。
 */	
	H=array.get(int_array(A), I, Result) :- int(I)/*, unary(Result)*/ |
	  H=int_array(X), [:/*inline*/
		int i = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
		int len = me.nthAtom(0).getFunctor().getArity()-1;
		i = (i+len) % len;
		
	  int v = ((IntegerFunctor)me.nthAtom(0).nthAtom(i).getFunctor()).intValue();
		Atom result = mem.newAtom(new IntegerFunctor(v));
		/* Functor f = me.nthAtom(0).nthAtom(i).getFunctor(); */
		/* Atom result = mem.newAtom(f); */
		mem.relink(result, 0, me, 2);
		mem.unifyAtomArgs(me, 3, me, 0);
		me.nthAtom(1).remove();
		me.remove();
		:](A, I, Result, X).
	
/**
 * array.put(Array, Index, Value, NewArray):
 * 配列ArrayのIndexにValueをセットし、
 * 更新された配列をNewArrayにつなぎます。
 */
	H=array.put(int_array(A), I, Value) :- int(I), int(Value) |
	  H=int_array(X), [:/*inline*/
		int i = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
		int len = me.nthAtom(0).getFunctor().getArity()-1;
		i = (i+len) % len;
		
		me.nthAtom(0).nthAtom(i).remove();
		mem.relink(me.nthAtom(0), i, me, 2);
		mem.unifyAtomArgs(me, 3, me, 0);
		me.nthAtom(1).remove();
		me.remove();
		:](A, I, Value, X).
}
