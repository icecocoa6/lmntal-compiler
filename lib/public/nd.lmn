//  Coyright(C) 2006 Ueda Laboratory LMNtal Group, All rights reserved.
//  Author: mizuno

{module(nd).

/**
 * nd.exec(MemWithNDMem).
 * 引数に渡された膜の子膜を非決定的に実行し、リダクショングラフを生成する。
 * リダクショングラフは、各状態を表す膜と、その膜間を繋ぐアトム reduce/3 から成る。
 * reduce の第 1 引数は遷移元の状態を表す膜内のアトム from/1 に接続している。
 * 第 2 引数は遷移先の状態を表す膜内のアトム to/1 に接続している。
 * 第 3 引数は、その遷移に利用したルール名を表す文字列アトムに接続している。
 *
 *  @param MemWithNDMem 非決定的実行膜をちょうど1つもつ膜
 */
nd.exec({$p,@p,{$q,@q}*})
	:- 	[:/*inline*/
			Atom out = me.nthAtom(0);
			Atom in = out.nthAtom(0);
			Atom plus = in.nthAtom(1);
			Membrane mem1 = (Membrane)in.getMem();
			Iterator it = mem1.memIterator();
			Membrane mem2 = (Membrane)it.next();
			((Task)mem.getTask()).nondeterministicExec(mem2);
			mem.removeAtom(me);
			mem.removeAtom(out);
			mem1.removeAtom(in);
			plus.dequeue();
			mem1.removeAtom(plus);
		:]({$p,@p,{$q,@q}*}).

//ID生成
nd.genid :- nd.nextid(0).
nd.nextid(N), {$p,@p} :- \+($p=(id(X),$pp)), N2=N+1 | nd.nextid(N2), {id(N),$p,@p}.

//from のリスト化
nd.gen_from_list, {id(N),$p,@p} :- uniq(N) | nd.gen_from_list, {id(N),fl([]),$p,@p}.
reduce(F,T,R),{id(N),from(F),fl(FL),$p[FL|*W],@p},{id(N2),to(T),$q,@q} :- uniq(N,N2) |
	reduce(F,T,R),{id(N),from(F),fl([N2|FL]),$p[FL|*W],@p},{id(N2),to(T),$q,@q}.
//to のリスト化
nd.gen_to_list, {id(N),$p,@p} :- uniq(N) | nd.gen_to_list, {id(N),tl([]),$p,@p}.
reduce(F,T,R),{id(NF),from(F),$p,@p},{id(NT),to(T),tl(TL),$q[TL|*W],@q} :- uniq(NF,NT) |
	reduce(F,T,R),{id(NF),from(F),$p,@p},{id(NT),to(T),tl([NF|TL]),$q[TL|*W],@q}.
}.
