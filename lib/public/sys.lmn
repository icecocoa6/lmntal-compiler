/**
NAME
	System module

SYNOPSIS

AUTHOR
	Koji Hara
	Atsushi Nakano

HISTORY
	2006/07/25(Tue) sys.sleep (by inui)
	2006/07/23(Sun) sys.getenv (by inui)
	2004/05/23(Sun)

*/

{
module(sys).

/**
 * sys.dump :
 * 
 * Dump this membrane.
 */
sys.dump :- [:/*inline*/
	me.setName("nil");
	System.out.println(Dumper.dump(mem));
	:].

/**
 * sys.trace(+Flag):
 * 
 * Flagがonの時、trace modeに入ります。
 * Flagがoffの時、trace modeから抜けます。
 * @example
 *   sys.trace(on) ==> nil (trace mode on)
 *   sys.trace(off) ==> nil (trace mode off)
 */
sys.trace(on) :- [:/*inline*/
	Env.fTrace=true;
	me.setName("nil");
	:].
sys.trace(off) :- [:/*inline*/
	Env.fTrace=false;
	me.setName("nil");
	:].

/**
 * sys.argv(-Res) :
 * 
 * Return argv
 */
H=sys.argv :- H=[:/*inline*/
	util.Util.makeList(me.getArg(0), Env.argv);
	me.remove();
	:].

/**
 * sys.exec(+Cmd, +Argv, -Res) : String -> List of String -> Process
 * 
 * コマンドCmdをArgvに与えられた引数列とともに実行します。
 */
H=sys.exec(Cmd, Argv) :- unary(Cmd) | H=[:/*inline*/
	try {
		Atom p = mem.newAtom(new ObjectFunctor(
			Runtime.getRuntime().exec( me.nth(0), util.Util.arrayOfList(me.getArg(1), "str") )));
//	System.out.println(p);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		mem.relink(p, 0, me, 2);
		me.remove();
	} catch (Exception e) {
		e.printStackTrace();
	}
	:](Cmd, Argv).

/**
 * sys.exec(+Cmd, -Res) : String -> List of String -> Process
 * 
 * コマンドCmdを実行します。
 * by Nakano
 */	
H=sys.exec(Cmd) :- unary(Cmd) | H=[:/*inline*/
	try {
		Runtime.getRuntime().exec( me.nth(0));
//	System.out.println(p);
		//me.nthAtom(0).remove();
		mem.relink(me.nthAtom(0), 0, me, 1);
		me.remove();
	} catch (Exception e) {
		e.printStackTrace();
	}
	:](Cmd).
//↑1行でも書ける H=sys.exec(Cmd) :- H=sys.exec(Cmd, []). by inui

/**
 * sys.perpetual(+Flag) :
 * 
 * Flagがonの時、この膜を永続化(ルール適用できなくてもstableにならない)し、
 * Flagがoffの時、子の膜の永続化を解除します。
 */
sys.perpetual(on) :- [:/*inline*/
	mem.makePerpetual(true);
	me.setName("nil");

	:](on).
sys.perpetual(off) :- [:/*inline*/
	mem.makePerpetual(false);
	me.setName("nil");
	:].

/**
 * sys.atomCount(+Name, +Arity, -Res)
 *
 * この膜内で、指定した名前と arity を持つアトムの数を数え、Resに返します。
 */
H=sys.atomCount(Name, Arity) :- unary(Name), int(Arity) | H=[:/*inline*/
	try {
		int count = mem.getAtomCountOfFunctor(new Functor(me.nth(0), ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue()));
		Atom p = mem.newAtom(new IntegerFunctor(count));
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		mem.relink(p, 0, me, 2);
		me.remove();
	} catch (Exception e) {
		e.printStackTrace();
	}
	:](Name, Arity).

R=sys.usage(_S, []) :- R=nil, io.use, r=print(_S).

R=sys.usage(_S, [H|T]) :- R=[H|T].

/**
 * LMNtalの実行を終了します。
 * 2006.6.23 by inui
 */
sys.exit(Status) :- int(Status) | [:/*inline*/
	int status = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	System.exit(status);
	:](Status).

/**
 * sys.getenv(+Name, -Env)
 *
 * 環境変数を取得します
 * 2006.7.23 by inui
 */
H=sys.getenv(Name) :- string(Name) | H=[:/*inline*/
	String name = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	String env = System.getenv(name);
	Atom a = mem.newAtom(new StringFunctor(env == null ? "" : env));//空文字で良いかなぁ
	me.nthAtom(0).remove();
	mem.relink(a, 0, me, 1);
	me.remove();
	:](Name).

/**
 * Time ミリ秒停止します
 * 2006.07.25 inui
 * Int -> done|InterruptedException
 */
H=sys.sleep(Time) :- H=[:/*inline*/
	int time = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	Atom a = null;
	try {
		Thread.sleep(time);
		a = mem.newAtom(new Functor("done", 1));
	} catch (InterruptedException e) {
		a = mem.newAtom(new Functor("InterruptedException", 1));
	}
	me.nthAtom(0).remove();
	mem.relink(a, 0, me, 1);
	me.remove();
	:](Time).
}.

