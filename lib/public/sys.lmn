/*
NAME
	System module

SYNOPSIS

AUTHOR
	Koji Hara

HISTORY
	2004/05/23(Sun)

*/

{
module(sys).

/**
 * dump : unit -> unit
 * 
 * Dump this membrane
 */
sys.dump :- [:/*inline*/
	me.setName("nil");
	System.out.println(Dumper.dump(mem));
	:].

sys.trace(on) :- [:/*inline*/
	Env.fTrace=true;
	me.setName("nil");
	:].
sys.trace(off) :- [:/*inline*/
	Env.fTrace=false;
	me.setName("nil");
	:].

/**
 * sys.argv : unit -> List
 * 
 * Return argv
 */
H=sys.argv :- H=[:/*inline*/
	util.Util.makeList(me.getArg(0), Env.argv);
	me.remove();
	:].

/**
 * sys.exec : String -> List of String -> Process
 * 
 */
H=sys.exec(Cmd, Argv) :- unary(Cmd) | H=[:/*inline*/
	try {
		Atom p = mem.newAtom(new ObjectFunctor(
			Runtime.getRuntime().exec( me.nth(0), util.Util.arrayOfList(me.getArg(1), "str") )));
//	System.out.println(p);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		mem.relink(p, 0, me, 2);
		me.remove();
	} catch (Exception e) {
		e.printStackTrace();
	}
	:](Cmd, Argv).

/**
 * sys.perpetual : unit -> unit
 * 
 * Return argv
 */
sys.perpetual(on) :- [:/*inline*/
	mem.makePerpetual();
	me.setName("nil");
	:].

sys.perpetual(off) :- [:/*inline*/
	mem.perpetual = false;
	me.setName("nil");
	:].

/**
 * sys.atomCount : String -> int -> int
 * 同一膜内で、指定した名前と arity を持つアトムの数を数える。
 */
H=sys.atomCount(Name, Arity) :- unary(Name), int(Arity) | H=[:/*inline*/
	try {
		int count = mem.getAtomCountOfFunctor(new Functor(me.nth(0), ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue()));
		Atom p = mem.newAtom(new IntegerFunctor(count));
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		mem.relink(p, 0, me, 2);
		me.remove();
	} catch (Exception e) {
		e.printStackTrace();
	}
	:](Name, Arity).

}.

