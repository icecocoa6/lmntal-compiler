/**
NAME
	IO module

SYNOPSIS

	io.use.
	handle = io.list_of_stdin.
	
		==>
	
	handle = [Line0, Line1, ...].

AUTHOR
	Koji Hara

HISTORY
	2004/07/19(Sun) io.stdin(Object) ついか。これの初期化のために io.use する必要がある。またはモジュール内のデータもコピーするようにする。
	2004/05/22(Sat)

*/

{
module(io).

/**
 * io.use:
 *
 * (initializer)
 * Enables the use of standard input (System.in) and standard output (System.out).
 * The result consists of two molecules representing standard input and standard output.
 */
io.use :-
	io.stdin=[:/*inline*/
		Atom stdin = mem.newAtom(new ObjectFunctor(new java.io.BufferedReader(new java.io.InputStreamReader(System.in))));
		mem.relink(stdin, 0, me, 0);
		me.remove();
		:],
	io.stdout=[:/*inline*/
		Atom stdout = mem.newAtom(new ObjectFunctor(new java.io.PrintWriter(System.out, true)));
		mem.relink(stdout, 0, me, 0);
		me.remove();
		:].

//io.print(String) :- unary(String)|[:/*inline*/
//	System.out.println(me.nth(0));
//	me.setName("nil");
//	:](String).

/**
 * io.input(+Atom):
 *
 * Displays the name of the unary Atom on a pop-up window
 * and reads an atom name typed into the window.
 * The result is a two-atom molecule with done/1 and a unary atom with the given name.
 */
io.input(Message) :- [:/*inline*/
	String s = javax.swing.JOptionPane.showInputDialog(null, me.nth(0));
	me.setName(s);
	me.nthAtom(0).setName("done");
	:](Message).

/**
 * io.input(+Atom,-X):
 *
 * Dislays the name of the unary Atom on a pop-up window
 * and reads an atom name typed into the window.
 * The result is a two-atom radical with done/2 and a unary atom with the givne name, of the form newAtom(Y), done(Y,X).
 */
io.input(Message, X) :- [:/*inline*/
	String s = javax.swing.JOptionPane.showInputDialog(null, me.nth(0));
	me.setName("done");
	me.nthAtom(0).setName(s);
	:](Message, X).

/**
 * io.input:
 *
 * Reads an atom name typed into a pop-up window.
 * The result is a new nullary atom with the given name.
 */
io.input :- [:/*inline*/
	String s = javax.swing.JOptionPane.showInputDialog(null, "Input text.");
	me.setName(s);
	:].

/**
 * io.inputInteger(+Atom,-X):
 *
 * Same as above, except that the result is Int(X),
 * where Int is an integer (which is a unary atom in LMNtal) that has been typed in.
 */
R=io.inputInteger(Message) :- R=[:/*inline*/
	String s = javax.swing.JOptionPane.showInputDialog(null, me.nth(0));
	Atom atom = mem.newAtom(new IntegerFunctor(Integer.parseInt(s)));
	mem.relink(atom,0,me,1);
	mem.removeAtom(me.nthAtom(0));
	mem.removeAtom(me);
	:](Message).
//io.popup(String) :- unary(String)|[:/*inline*/
//	javax.swing.JOptionPane.showMessageDialog(null, me.nth(0));
//	:](String).

/**
 * io.popup(+Str):
 * Displays the string Str in a pop-up window.
 */
io.popup(String) :- string(String) | [:/*inline*/
	javax.swing.JOptionPane.showMessageDialog(null, me.nth(0));
	mem.newAtom(new Functor("done",0));
	mem.removeAtom(me.nthAtom(0));
	mem.removeAtom(me);
	:](String).

//(String -> java::BufferedReader)
/**
 * io.fileReader(+Filename, -Res):
 * 与えられたファイル名からそのファイルから読み込む為のオブジェクトを生成します。
 */
H=io.fileReader(Filename) :- unary(Filename) | H=[:/*inline*/
	try {
		Atom br = mem.newAtom(new ObjectFunctor(new java.io.BufferedReader(new java.io.FileReader(me.nth(0)))));
//		System.out.println("FILE="+me.nth(0));
		mem.relink(br, 0, me, 1);
		me.nthAtom(0).remove();
		me.remove();
	} catch(Exception e) {}
	:](Filename).

//io.fileWriter : String -> java.io.PrintWriter
/**
 * io.fileWriter(+Filename, -Res):
 * 与えられたファイル名からそのファイルへ書き込む為のオブジェクトを生成します。
 * 
 * @example r=close(print(io.fileWriter(a), abc))
 */
H=io.fileWriter(Filename) :- unary(Filename) | H=[:/*inline*/
	try {
		Atom pw = mem.newAtom(new ObjectFunctor(new java.io.PrintWriter(new java.io.FileWriter(me.nth(0)))));
//		System.out.println("FILE="+me.nth(0));
		mem.relink(pw, 0, me, 1);
		me.nthAtom(0).remove();
		me.remove();
	} catch(Exception e) {}
	:](Filename).

//io.reader : String -> java::BufferedReader
/**
 * io.reader(+Process, -Res):
 * 第一引数に与えたプロセスからの入力オブジェクトを生成します。
 */
H=io.reader(Process) :- unary(Process) | H=[:/*inline*/
	try {
		Object obj = ((ObjectFunctor)(me.nthAtom(0).getFunctor())).getValue();
		if(!(obj instanceof Process)) break;
		Atom r = mem.newAtom(new ObjectFunctor(
		  new java.io.BufferedReader( new java.io.InputStreamReader(
		    ((Process)obj).getInputStream()
		  ))
		));
//		System.out.println(r);
		mem.relink(r, 0, me, 1);
		me.nthAtom(0).remove();
		me.remove();
	} catch(Exception e) {e.printStackTrace();}
	:](Process).

//readLine(Object, ReadString, Result)
/**
 * readLine(+Object, -ReadString, -Result)
 * 
 * Object     : java.io.BufferedReader
 * ReadString : One line string
 * Result     : "done" when succeeded. "nil" when EOF.
 */
H=io.readline(Result), io.stdin(STDIN) :- class(STDIN, "java.io.BufferedReader") |
	H=io.readline(STDIN, Result, 0), io.stdin(STDIN).

/**
 * io.readline(-Atom,-Res):
 *
 * reads one line from standard input, 
 * connnecting to Atom a unary atom whose name is the input string
 * (or an empty string if the string can't be read), 
 * and connects done/1 or nil/1 to Res, depending on whether the string could be read. 
 * To be used with io.use.
 */
Readline @@
H=io.readline(Object, ReadString) :- H=io.readline(Object, ReadString, 0).
Readline @@
H=io.readline(Object, ReadString, ASync) :- int(ASync), class(Object, "java.io.BufferedReader") |
	H=[:/*inline*/
		try {
			java.io.BufferedReader br = (java.io.BufferedReader) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
			int async = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
			// このチェックはガードでやるべき
			if((async!=0 && br.ready()) || async==0) {
				String s = br.readLine();
				Atom result = mem.newAtom(new StringFunctor(s==null?"":s));
				mem.relink(result, 0, me, 1);
				Atom res = mem.newAtom(new Functor(s==null ? "nil" : "done", 1));
				mem.relink(res, 0, me, 3);
				me.nthAtom(0).remove();
				me.nthAtom(2).remove();
				me.remove();
			} else {
				mem.alterAtomFunctor(me, new Functor("readline", 4, "io"));
			}
		} catch(Exception e) {Env.e(e);}
	:](Object, ReadString, ASync).


H=io.print(String), io.stdout(STDOUT) :- class(STDOUT, "java.io.PrintWriter") |
	H=io.print(STDOUT, String), io.stdout(STDOUT).

H=io.print([String|Rest]), io.stdout(STDOUT) :- string(String), class(STDOUT, "java.io.PrintWriter") |
	H=io.print(STDOUT, [String|Rest]), io.stdout(STDOUT).

/**
 * io.print(+Atom,-Res):
 *
 * prints the name of the unary Atom (a string or a non-string atom)
 * into standard output, and connects done/1 to Res.
 * To be used witn io.use. 
 */
H=io.print(Object, String) :- class(Object, "java.io.PrintWriter"), string(String) |
	H=[:/*inline*/
		try {
			java.io.PrintWriter pw = (java.io.PrintWriter) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
			Atom done = mem.newAtom(new Functor("done", 1));
			if(pw!=null) {
				pw.println(me.nth(1));
			}
			mem.relink(done, 0, me, 2);
			me.nthAtom(0).remove();
			me.nthAtom(1).remove();
			me.remove();
		} catch(Exception e) {e.printStackTrace();}
	:](Object, String).

H=io.print(Object, [String|Rest]) :- string(String), class(Object, "java.io.PrintWriter"), string(String) |
	H=io.print(Object, Rest), [:/*inline*/
		try {
			java.io.PrintWriter pw = (java.io.PrintWriter) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
			if(pw!=null) {
				pw.println(me.nth(1));
			}
			me.nthAtom(0).remove();
			me.nthAtom(1).remove();
			me.remove();
		} catch(Exception e) {e.printStackTrace();}
	:](Object, String).

//close : unit -> unit
/**
 * close(+Object, -Res):
 * 与えられた入力/出力オブジェクトをクローズします。
 */
H=close(Object) :- class(Object, "java.io.PrintWriter") |
	H=[:/*inline*/
		try {
			java.io.PrintWriter pw = (java.io.PrintWriter) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
			pw.close();
			mem.relink(me.nthAtom(0), 0, me, 1);
			me.remove();
		} catch(Exception e) {Env.e(e);}
	:](Object).

//io.list_of_stdin : unit -> List of String
/**
 * io.list_of_stdin(-Res):
 * 標準入力からの入力を一行ずつ順次リストに格納します。
 * ブロックします。
 */
H=io.list_of_stdin,       io.stdin(STDIN) :- unary(STDIN) | H=list_of_dev_s0(STDIN, [], done, 0), io.stdin(STDIN).
/**
 * io.list_of_stdin_async(-Res):
 * 標準入力からの入力を一行ずつ順次リストに格納します。
 * ブロックしません。
 */
H=io.list_of_stdin_async, io.stdin(STDIN) :- unary(STDIN) | H=list_of_dev_s0(STDIN, [], done, 1), io.stdin(STDIN).

//io.list_of_file : unit -> List of String
/**
 * io.list_of_file(+Filename, -Res):
 * 指定されたファイル名のファイルからの入力を一行ずつ順次リストに格納します。
 */
H=io.list_of_file(Filename) :- H=list_of_dev_s0(io.fileReader(Filename), [], done, 0).

H=list_of_dev_s0(Obj, List, done, ASync) :- int(ASync), class(Obj, "java.io.BufferedReader") | H=[String|list_of_dev_s0(Obj, List, io.readline(Obj, String, ASync), ASync)].
H=list_of_dev_s0(Obj, List, nil , ASync) :- int(ASync), class(Obj, "java.io.BufferedReader") | H=List.

//io.toFile : String -> List of String -> unit
/**
 * io.toFile(+Filename, +List, -Res):
 * 文字列のリストを受け取って、指定されたファイル名のファイルへ一行ずつ順次出力します。
 * 
 * @example r=io.toFile(b, io.fromFile(a))
 */
H=io.toFile(Filename, List) :- unary(Filename) | H=toFile_s0(io.fileWriter(Filename), List).
H=toFile_s0(Obj, [CAR|CDR]) :- unary(CAR) | H=toFile_s0(io.print(Obj, CAR), CDR).
H=toFile_s0(Obj, []) :- H=close(Obj).

/**
 * io.eager(+In, -Res)
 * 与えられた入力オブジェクトからの入力が一行ずつ逆順に並んだリストを生成します。
 */
H=io.eager(In) :- H=io.eager(In, [], done).
H=io.eager(In, List, done) :- unary(In) | H=io.eager(In, [Res|List], io.readline(In, Res)).


// Sample
// r=io.fileReader([:build.xml:]).
// r(O):-class(O,"java.io.BufferedReader")|r(readline(O,io.print)).


//io.fopen(Handle, String) :- unary(Handle), unary(String)|[:/*inline*/
//	try {
//		PrintWriter pw = new PrintWriter(new FileOutputStream(me.nth(1)));
//		IO.handles.put(me.nth(0), pw);
//	} catch(Exception e) {}
//	:](Handle, String).
//io.fprint(Handle, String) :- unary(Handle), unary(String)|[:/*inline*/
//	((PrintWriter)IO.handles.get(me.nth(0))).println(me.nth(1));
//	:](Handle, String).
//io.fclose(Handle) :- unary(Handle)|[:/*inline*/
//	((PrintWriter)IO.handles.get(me.nth(0))).close();
//	:](Handle).

}.


//	inputString("How much?", Answer).

//H=[Object, fileReader.readLine(Result)|Rest] :- H=[Object|Rest], kill(Result).
//H=[readLine(Result), Object] :- class(Object, "java.io.BufferedReader") |
//H=[Object], [:/*inline*/
//	  try {
//		  java.io.BufferedReader br = (java.io.BufferedReader) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getObject();
//		  String s = br.readLine();
//		  me.nthAtom(1).remove();
//		  me.setFunctor(s, 1);
//	  } catch(Exception e) {System.out.println(e);}
//:](Result, Object).
//
