/**
NAME
	IO module

SYNOPSIS

	io.use.
	handle = io.list_of_stdin.
	
		==>
	
	handle = [Line0, Line1, ...].

AUTHOR
	Koji Hara
	Ryo Okabe
    Atsushi Nakano

HISTORY
	2006/09/18(Mon) io.readAllを追加． nakano
	2006/09/16(Sat) io.gets, io.puts を追加．inui
    2006/09/13(Wed) printg　をprintln に変更し，リスト構造にも対応するようになった．
    2006/07/25(Tue) printg を追加．
	2006/07/24(Mon) inui
		io.fileReader でファイルが存在しなかったら nil を返すようにした
		io.list_of_file で fileReader が nil なら 空リストを返すようにした
		io.getContents
	2004/07/19(Sun) io.stdin(Object) ついか。これの初期化のために io.use する必要がある。またはモジュール内のデータもコピーするようにする。
	2004/05/22(Sat)

*/

[:/*inline_define*/
  import java.io.*;
  import java.util.*;
  
  // for 'printg' module
  class C {
    public static StringBuffer sb = new StringBuffer("");
    public static HashSet set = new HashSet();
    public static HashMap map = new HashMap();
    public static int counter = 0; // for links
    
    public static void printg(Atom now, Link pointer) {
      if(!set.contains(now)) {
        set.add(now);
        int arity = now.getEdgeCount();
        if(arity == 1)
          sb.append(now.getName());
        else if(util.Util.isList(pointer.getBuddy())) {
          printl(pointer.getBuddy());
        }
        else {
          sb.append(now.getName());
          sb.append("( ");
          for(int i=0; i<arity; i++) {
            Link link = now.getArg(i);
            if(!(link.equals((Link)pointer))) {
              if(map.containsKey(link)) {
                sb.append(map.get(link));
              } else {
                if(set.contains(now.nthAtom(i))) {
                  String name = "X" + counter++;
                  sb.append(name);
                  map.put(link.getBuddy(), name);
                } else
                  printg(now.nthAtom(i),link.getBuddy());
                if(i < arity-2)
                  sb.append(", ");
              }
            }
          }
          sb.append(" )");
        }
      }
    }
    
    public static void printl(Link l) {
      sb.append("[");
      for(Link tmp = l; tmp.getAtom().getName()=="."; tmp=tmp.getAtom().getArg(1)) {
        sb.append(tmp.getAtom().nthAtom(0));
        if(tmp.getAtom().nthAtom(1).getName()==".") sb.append(",");
      }
      sb.append("]");
    }
  }
:].

{
module(io).

/**
 * io.use:
 *
 * (initializer)
 * Enables the use of standard input (System.in) and standard output (System.out).
 * The result consists of two molecules representing standard input and standard output.
 */
io.use :-
	io.stdin=[:/*inline*/
		Atom stdin = mem.newAtom(new ObjectFunctor(new java.io.BufferedReader(new java.io.InputStreamReader(System.in))));
		mem.relink(stdin, 0, me, 0);
		me.remove();
		:],
	io.stdout=[:/*inline*/
		Atom stdout = mem.newAtom(new ObjectFunctor(new java.io.PrintWriter(System.out, true)));
		mem.relink(stdout, 0, me, 0);
		me.remove();
		:].

//io.print(String) :- unary(String)|[:/*inline*/
//	System.out.println(me.nth(0));
//	me.setName("nil");
//	:](String).

/**
 * io.input(+Atom):
 *
 * Displays the name of the unary Atom on a pop-up window
 * and reads an atom name typed into the window.
 * The result is a two-atom molecule with done/1 and a unary atom with the given name.
 */
io.input(Message) :- [:/*inline*/
	String s = javax.swing.JOptionPane.showInputDialog(null, me.nth(0));
	me.setName(s);
	me.nthAtom(0).setName("done");
	:](Message).

/**
 * io.input(+Atom,-X):
 *
 * Dislays the name of the unary Atom on a pop-up window
 * and reads an atom name typed into the window.
 * The result is a two-atom radical with done/2 and a unary atom with the givne name, of the form newAtom(Y), done(Y,X).
 */
io.input(Message, X) :- [:/*inline*/
	String s = javax.swing.JOptionPane.showInputDialog(null, me.nth(0));
	me.setName("done");
	me.nthAtom(0).setName(s);
	:](Message, X).

/**
 * io.input:
 *
 * Reads an atom name typed into a pop-up window.
 * The result is a new nullary atom with the given name.
 */
io.input :- [:/*inline*/
	String s = javax.swing.JOptionPane.showInputDialog(null, "Input text.");
	me.setName(s);
	:].

/**
 * io.inputInteger(+Atom,-X):
 *
 * Same as above, except that the result is Int(X),
 * where Int is an integer (which is a unary atom in LMNtal) that has been typed in.
 */
R=io.inputInteger(Message) :- R=[:/*inline*/
	String s = javax.swing.JOptionPane.showInputDialog(null, me.nth(0));
	Atom atom = mem.newAtom(new IntegerFunctor(Integer.parseInt(s)));
	mem.relink(atom,0,me,1);
	mem.removeAtom(me.nthAtom(0));
	mem.removeAtom(me);
	:](Message).
//io.popup(String) :- unary(String)|[:/*inline*/
//	javax.swing.JOptionPane.showMessageDialog(null, me.nth(0));
//	:](String).

/**
 * io.popup(+Str):
 * Displays the string Str in a pop-up window.
 */
io.popup(String) :- string(String) | [:/*inline*/
	javax.swing.JOptionPane.showMessageDialog(null, me.nth(0));
	mem.newAtom(new SymbolFunctor("done",0));
	mem.removeAtom(me.nthAtom(0));
	mem.removeAtom(me);
	:](String).

//(String -> java::BufferedReader)
/**
 * io.fileReader(+Filename, -Res):
 * 与えられたファイル名からそのファイルから読み込む為のオブジェクトを生成します。
 * ファイルが存在しなかったときは nil を返します 2006.07.24 inui
 */
H=io.fileReader(Filename) :- unary(Filename) | H=[:/*inline*/
	Atom br = null;
	try {
		br = mem.newAtom(new ObjectFunctor(new java.io.BufferedReader(new java.io.FileReader(me.nth(0)))));
	} catch(Exception e) {
		br = mem.newAtom(new SymbolFunctor("nil", 1));
	}
	mem.relink(br, 0, me, 1);
	me.nthAtom(0).remove();
	me.remove();
	:](Filename).

//io.fileWriter : String -> java.io.PrintWriter
/**
 * io.fileWriter(+Filename, -Res):
 * 与えられたファイル名からそのファイルへ書き込む為のオブジェクトを生成します。
 * 
 * @example r=close(print(io.fileWriter(a), abc))
 */
H=io.fileWriter(Filename) :- unary(Filename) | H=[:/*inline*/
	try {
		Atom pw = mem.newAtom(new ObjectFunctor(new java.io.PrintWriter(new java.io.FileWriter(me.nth(0)))));
//		System.out.println("FILE="+me.nth(0));
		mem.relink(pw, 0, me, 1);
		me.nthAtom(0).remove();
		me.remove();
	} catch(Exception e) {}
	:](Filename).

//io.reader : String -> java::BufferedReader
/**
 * io.reader(+Process, -Res):
 * 第一引数に与えたプロセスからの入力オブジェクトを生成します。
 */
H=io.reader(Process) :- unary(Process) | H=[:/*inline*/
	try {
		Object obj = ((ObjectFunctor)(me.nthAtom(0).getFunctor())).getValue();
		if(!(obj instanceof Process)) break;
		Atom r = mem.newAtom(new ObjectFunctor(
		  new java.io.BufferedReader( new java.io.InputStreamReader(
		    ((Process)obj).getInputStream()
		  ))
		));
//		System.out.println(r);
		mem.relink(r, 0, me, 1);
		me.nthAtom(0).remove();
		me.remove();
	} catch(Exception e) {e.printStackTrace();}
	:](Process).

//readLine(Object, ReadString, Result)
/**
 * io.readLine(+Object, -ReadString, -Result)
 * 
 * Object     : java.io.BufferedReader
 * ReadString : One line string
 * Result     : "done" when succeeded. "nil" when EOF.
 */
H=io.readline(Result), io.stdin(STDIN) :- class(STDIN, "java.io.BufferedReader") |
	H=io.readline(STDIN, Result, 0), io.stdin(STDIN).

/**
 * 2006.9.18 nakano
 * io.readline(-Atom,-Res):
 *
 * reads one line from standard input, 
 * connnecting to Atom a unary atom whose name is the input string
 * (or an empty string if the string can't be read), 
 * and connects done/1 or nil/1 to Res, depending on whether the string could be read. 
 * To be used with io.use.
 */
Readline @@
H=io.readline(Object, ReadString) :- H=io.readline(Object, ReadString, 0).
Readline @@
H=io.readline(Object, ReadString, ASync) :- int(ASync), class(Object, "java.io.BufferedReader") |
	H=[:/*inline*/
		try {
			java.io.BufferedReader br = (java.io.BufferedReader) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
			int async = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
			// このチェックはガードでやるべき
			if((async!=0 && br.ready()) || async==0) {
				String readLine;
				String s;
				s  = br.readLine();
				Atom result = mem.newAtom(new StringFunctor(s==null?"":s));
				mem.relink(result, 0, me, 1);
				Atom res = mem.newAtom(new SymbolFunctor(s==null ? "nil" : "done", 1));
				mem.relink(res, 0, me, 3);
				me.nthAtom(0).remove();
				me.nthAtom(2).remove();
				me.remove();
			} else {
				mem.alterAtomFunctor(me, new SymbolFunctor("readline", 4, "io"));
			}
		} catch(Exception e) {Env.e(e);}
	:](Object, ReadString, ASync).
	
/**
 * io.readall(-Atom,-Res):
 *
 * reads all line from standard input, 
 * connnecting to Atom a unary atom whose name is the input string
 * (or an empty string if the string can't be read), 
 * and connects done/1 or nil/1 to Res, depending on whether the string could be read. 
 * To be used with io.use.
 */
ReadAll @@
H=io.readall(Object, ReadString) :- H=io.readall(Object, ReadString, 0).
ReadAll @@
H=io.readall(Object, ReadString, ASync) :- int(ASync), class(Object, "java.io.BufferedReader") |
	H=[:/*inline*/
		try {
			java.io.BufferedReader br = (java.io.BufferedReader) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
			int async = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
			// このチェックはガードでやるべき
			if((async!=0 && br.ready()) || async==0) {
				String readLine;
				String s = null;
				while(null != (readLine = br.readLine())) {
					if(s == null){
						s = readLine;
					} else {
						s += "\n" + readLine;
					}
				}
				Atom result = mem.newAtom(new StringFunctor(s==null?"":s));
				mem.relink(result, 0, me, 1);
				Atom res = mem.newAtom(new SymbolFunctor(s==null ? "nil" : "done", 1));
				mem.relink(res, 0, me, 3);
				me.nthAtom(0).remove();
				me.nthAtom(2).remove();
				me.remove();
			} else {
				mem.alterAtomFunctor(me, new SymbolFunctor("readline", 4, "io"));
			}
		} catch(Exception e) {Env.e(e);}
	:](Object, ReadString, ASync).

H=io.print(String), io.stdout(STDOUT) :- class(STDOUT, "java.io.PrintWriter") |
	H=io.print(STDOUT, String), io.stdout(STDOUT).

H=io.lprint([String|Rest]), io.stdout(STDOUT) :- class(STDOUT, "java.io.PrintWriter") |
	H=io.lprint(STDOUT, [String|Rest]), io.stdout(STDOUT).

//H=io.lprint([]) :- H=done.

/**
 * io.print(+Atom,-Res):
 *
 * prints the name of the string Atom
 * into standard output, and connects done/1 to Res.
 * To be used witn io.use. 
 */
H=io.print(Object, String) :- class(Object, "java.io.PrintWriter"), unary(String) |
	H=[:/*inline*/
		try {
			java.io.PrintWriter pw = (java.io.PrintWriter) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
			Atom done = mem.newAtom(new SymbolFunctor("done", 1));
			if(pw!=null) {
				pw.print(me.nth(1));
				pw.flush();
			}
			mem.relink(done, 0, me, 2);
			me.nthAtom(0).remove();
			me.nthAtom(1).remove();
			me.remove();
		} catch(Exception e) {e.printStackTrace();}
	:](Object, String).

H=io.lprint(Object, [String|Rest]) :- unary(String), class(Object, "java.io.PrintWriter") |
	H=io.lprint(Object, Rest), [:/*inline*/
		try {
			java.io.PrintWriter pw = (java.io.PrintWriter) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
			if(pw!=null) {
				pw.print(me.nth(1));
				pw.flush();
			}
			me.nthAtom(0).remove();
			me.nthAtom(1).remove();
			me.remove();
		} catch(Exception e) {e.printStackTrace();}
	:](Object, String).

H=io.lprint(Object, []) :- class(Object, "java.io.PrintWriter") | H=done.

H=io.println(String), io.stdout(STDOUT) :- class(STDOUT, "java.io.PrintWriter") |
	H=io.println(STDOUT, String), io.stdout(STDOUT).

H=io.lprintln([String|Rest]), io.stdout(STDOUT) :- class(STDOUT, "java.io.PrintWriter") |
	H=io.lprintln(STDOUT, [String|Rest]), io.stdout(STDOUT).

//H=io.println([]) :- H=done.

/**
 * io.println(+Atom,-Res):
 *
 * prints the name of the string Atom and line delimiter
 * into standard output, and connects done/1 to Res.
 * To be used witn io.use. 
 */
H=io.println(Object, String) :- class(Object, "java.io.PrintWriter"), unary(String) |
	H=[:/*inline*/
		try {
			java.io.PrintWriter pw = (java.io.PrintWriter) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
			Atom done = mem.newAtom(new SymbolFunctor("done", 1));
			if(pw!=null) {
				pw.println(me.nth(1));
				pw.flush(); //2006.09.16 inui
			}
			mem.relink(done, 0, me, 2);
			me.nthAtom(0).remove();
			me.nthAtom(1).remove();
			me.remove();
		} catch(Exception e) {e.printStackTrace();}
	:](Object, String).

H=io.lprintln(Object, [String|Rest]) :- unary(String), class(Object, "java.io.PrintWriter") |
	H=io.lprintln(Object, Rest), [:/*inline*/
		try {
			java.io.PrintWriter pw = (java.io.PrintWriter) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
			if(pw!=null) {
				pw.println(me.nth(1));
				pw.flush(); //2006.09.16 inui
			}
			me.nthAtom(0).remove();
			me.nthAtom(1).remove();
			me.remove();
		} catch(Exception e) {e.printStackTrace();}
	:](Object, String).

H=io.lprintln(Object, []) :- class(Object, "java.io.PrintWriter") | H=done.

H=io.puts(Object, String) :- class(Object, "java.io.PrintWriter"), string(String) |
	H=io.println(Object, string.split("\n", String)).

H=io.puts(Filename, String) :- string(Filename), string(String) |
	H=io.println(io.fileWriter(Filename), String).

//io.close : unit -> unit
/**
 * io.close(+Object, -Res):
 * 与えられた入力/出力オブジェクトをクローズします。
 */
H=io.close(Object) :- class(Object, "java.io.PrintWriter") |
	H=[:/*inline*/
		try {
			java.io.PrintWriter pw = (java.io.PrintWriter) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
			pw.close();
			mem.relink(me.nthAtom(0), 0, me, 1);
			me.remove();
		} catch(Exception e) {Env.e(e);}
	:](Object).

//io.list_of_stdin : unit -> List of String
/**
 * io.list_of_stdin(-Res):
 * 標準入力からの入力を一行ずつ順次リストに格納します。
 * ブロックします。
 */
H=io.list_of_stdin,       io.stdin(STDIN) :- unary(STDIN) | H=io.list_of_dev_s0(STDIN, [], done, 0), io.stdin(STDIN).
/**
 * io.list_of_stdin_async(-Res):
 * 標準入力からの入力を一行ずつ順次リストに格納します。
 * ブロックしません。
 */
H=io.list_of_stdin_async, io.stdin(STDIN) :- unary(STDIN) | H=io.list_of_dev_s0(STDIN, [], done, 1), io.stdin(STDIN).

//io.list_of_file : unit -> List of String
/**
 * io.list_of_file(+Filename, -Res):
 * 指定されたファイル名のファイルからの入力を一行ずつ順次リストに格納します。
 */
H=io.list_of_file(Filename) :- H=io.list_of_dev_s0(io.fileReader(Filename), [], done, 0).

H=io.list_of_dev_s0(Obj, List, done, ASync) :- int(ASync), class(Obj, "java.io.BufferedReader") | H=[String|io.list_of_dev_s0(Obj, List, io.readline(Obj, String, ASync), ASync)].
H=io.list_of_dev_s0(Obj, List, nil , ASync) :- int(ASync), class(Obj, "java.io.BufferedReader") | H=List.
//fileReaderオブジェクトがnullだった（ファイルが存在しなかった）ときは空リストを返す 2006.07.24 inui
H=io.list_of_dev_s0(nil, [], done, 0) :- H=[].

//io.toFile : String -> List of String -> unit
/**
 * io.toFile(+Filename, +List, -Res):
 * 文字列のリストを受け取って、指定されたファイル名のファイルへ一行ずつ順次出力します。
 * 
 * @example r=io.toFile(b, io.fromFile(a))
 */
H=io.toFile(Filename, List) :- unary(Filename) | H=io.toFile_s0(io.fileWriter(Filename), List).
H=io.toFile_s0(Obj, [CAR|CDR]) :- unary(CAR) | H=io.toFile_s0(io.print(Obj, CAR), CDR).
H=io.toFile_s0(Obj, []) :- H=io.close(Obj).

/**
 * io.eager(+In, -Res)
 * 与えられた入力オブジェクトからの入力が一行ずつ逆順に並んだリストを生成します。
 */
H=io.eager(In) :- H=io.eager(In, [], done).
H=io.eager(In, List, done) :- unary(In) | H=io.eager(In, [Res|List], io.readline(In, Res)).


// Sample
// r=io.fileReader([:build.xml:]).
// r(O):-class(O,"java.io.BufferedReader")|r(readline(O,io.print)).


//io.fopen(Handle, String) :- unary(Handle), unary(String)|[:/*inline*/
//	try {
//		PrintWriter pw = new PrintWriter(new FileOutputStream(me.nth(1)));
//		IO.handles.put(me.nth(0), pw);
//	} catch(Exception e) {}
//	:](Handle, String).
//io.fprint(Handle, String) :- unary(Handle), unary(String)|[:/*inline*/
//	((PrintWriter)IO.handles.get(me.nth(0))).println(me.nth(1));
//	:](Handle, String).
//io.fclose(Handle) :- unary(Handle)|[:/*inline*/
//	((PrintWriter)IO.handles.get(me.nth(0))).close();
//	:](Handle).

/**
 * 標準入力から EOF まで読み込んでその文字列を返します
 * 2006/07/25 inui
 * 2006/11/06 高速化のためインラインで書き直した
 */
H=io.gets, io.stdin(STDIN) :- class(STDIN, "java.io.Reader") | H=io.gets(STDIN), io.stdin(STDIN).
H=io.gets(Filename) :- string(Filename) | H=io.gets(io.fileReader(Filename)).
H=io.gets(Reader) :- class(Reader, "java.io.Reader") | H=[:/*inline*/
	Atom result = null;
	try {
		BufferedReader br = new BufferedReader((Reader)((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject());
		StringBuffer buffer = new StringBuffer();
		String s;
		while ((s = br.readLine()) != null) {
			buffer.append(s+"\n");
		}
		result = mem.newAtom(new StringFunctor(buffer.toString()));
	} catch(java.io.IOException e) {
		result = mem.newAtom(new ObjectFunctor(e));
	} finally {
		mem.relink(result, 0, me, 1);
		me.nthAtom(0).remove();
		me.remove();
	}
	:](Reader).

/**
 * io.println(+Ground, -Res)
 * prints the ground into standard output.
 */
H=io.println(Object, String) :- class(Object, "java.io.PrintWriter"), ground(String) |
H=[:/*inline*/
  java.io.PrintWriter pw = (java.io.PrintWriter) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
  if(pw!=null) {
    Atom root = me.nthAtom(1);
    Link pointer = me.getArg(1).getBuddy();
    C.set.add(me);
    C.printg(root, pointer);
    pw.println(C.sb);
    C.set.clear();
    C.sb.delete(0,C.sb.length());
  }
  // ground の消し方が分からないので残すことにした．
  mem.unifyAtomArgs(me,1,me,2);
  me.nthAtom(0).remove();
  me.remove();
  /*
  mem.relink(done, 0, me, 2);
  me.nthAtom(0).remove();
  me.nthAtom(1).remove();
  me.remove();
  */
:](Object,String).

}.


//	inputString("How much?", Answer).

//H=[Object, fileReader.readLine(Result)|Rest] :- H=[Object|Rest], kill(Result).
//H=[readLine(Result), Object] :- class(Object, "java.io.BufferedReader") |
//H=[Object], [:/*inline*/
//	  try {
//		  java.io.BufferedReader br = (java.io.BufferedReader) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getObject();
//		  String s = br.readLine();
//		  me.nthAtom(1).remove();
//		  me.setFunctor(s, 1);
//	  } catch(Exception e) {System.out.println(e);}
//:](Result, Object).
//
