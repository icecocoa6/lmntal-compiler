/*
NAME
	Watcher module

AUTHOR
	Kudo

HISTORY
	2005/05/20(Fri.)

*/

% 指定したファンクタのアトムの個数を監視してグラフにする
% 使用例としてsample/prey_predator.lmnを参照
% 
% 使い方は，
%
%  F=watcher.update(
%    watcher.watch(
%    watcher.watch(
%    watcher.watch(
%      watcher.makeframe
%      "a",0),             % "a"という名前の0引数アトム
%      "b",1),             % "b"という名前の1引数アトム
%      "c",3))).           % "c"という名前の3引数アトム
%
% などと書いて，監視したいアトムをファンクタで指定．
% watcher.updateを受けて監視するアトムの状態を反映しグラフを書き換えると，
%
% W=watcher.update(F) -> W=watcher.drew(F)
%
% となるので，例えば，
%
% W=watcher.drew(F), a :- b(b),        W=watcher.update(F).
% W=watcher.drew(F), b(B) :- c(B,a,a), W=watcher.update(F).
%
% のようにルールの左辺と右辺に書くと，ルールの適用ごとにグラフが更新される．
%
% なんか使いにくいが，極めて限定された用途ということで．
% 処理系をいじらないと，「ルール適用ごとに」ができない
% 
% …ウィンドウを閉じると終了するのは変か？

{
module(watcher).

% 指定したファンクタのアトムの個数を返す

M=watcher.count(Name, Arity) :- unary(Name), int(Arity) | 
M=[:/*inline*/
	Functor f = new Functor(me.nth(0),((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue());
	int c = mem.getAtomCountOfFunctor(f);
	Atom a = mem.newAtom(new IntegerFunctor(c));
	mem.relink(a,0,me,2);
	mem.removeAtom(me.nthAtom(0));
	mem.removeAtom(me.nthAtom(1));
	mem.removeAtom(me);
:](Name, Arity).

% 新しいフレームを作る

M=watcher.makeframe :- M=[:/*inline*/
	GraphFrame frame = new GraphFrame();
	frame.init(mem);
	frame.setVisible(true);
	Atom f = mem.newAtom(new ObjectFunctor(frame));
	mem.relink(f,0,me,0);
	mem.removeAtom(me);
:].

% 監視するアトムをファンクタで指定

M=watcher.watch(F, Name, Arity) :- class(F,"GraphFrame"), string(Name), int(Arity) |
M=[:/*inline*/
	GraphFrame frame = (GraphFrame)((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	String name = me.nth(1);
	int arity = ((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
	frame.addData(name,name,arity);
	mem.relink(me.nthAtom(0),0,me,3);
	mem.removeAtom(me.nthAtom(1));
	mem.removeAtom(me.nthAtom(2));
	mem.removeAtom(me);
:](F,Name,Arity).

% 個数を採取する
M=watcher.update(F) :- class(F,"GraphFrame") |
M=[:/*inline*/
	GraphFrame frame = (GraphFrame)((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	Functor f = frame.getFunctor(0);
	Atom monitoring = mem.newAtom(new Functor("monitoring",3,"watcher"));
	Atom count = mem.newAtom(new Functor("count",3,"watcher"));
	Atom name = mem.newAtom(new StringFunctor(f.getName()));
	Atom arity = mem.newAtom(new IntegerFunctor(f.getArity()));
	mem.newLink(count,0,name,0);
	mem.newLink(count,1,arity,0);
	mem.newLink(count,2,monitoring,1);
	mem.relink(monitoring,0,me,0);
	mem.relink(monitoring,2,me,1);
	mem.removeAtom(me);
:](F).

% 値の採取中
M=watcher.monitoring(F,N) :- class(F,"GraphFrame"),int(N) |
M=[:/*inline*/
	GraphFrame frame = (GraphFrame)((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	frame.updateData(frame.getNowWatchingIndex(),((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue());
	if(!frame.nextIndex()){
		Atom draw = mem.newAtom(new Functor("draw",2,"watcher"));
		mem.relink(draw,0,me,0);
		mem.relink(draw,1,me,2);
	}
	else{
		Functor f = frame.getFunctor(frame.getNowWatchingIndex());
		Atom monitoring = mem.newAtom(new Functor("monitoring",3,"watcher"));
		Atom count = mem.newAtom(new Functor("count",3,"watcher"));
		Atom name = mem.newAtom(new StringFunctor(f.getName()));
		Atom arity = mem.newAtom(new IntegerFunctor(f.getArity()));
		mem.newLink(count,0,name,0);
		mem.newLink(count,1,arity,0);
		mem.newLink(count,2,monitoring,1);
		mem.relink(monitoring,0,me,0);
		mem.relink(monitoring,2,me,2);
	}
	mem.removeAtom(me.nthAtom(1));
	mem.removeAtom(me);
:](F,N).

% 描画
M=watcher.draw(F) :- class(F,"GraphFrame") |
M=[:/*inline*/
	GraphFrame frame = (GraphFrame)((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
	frame.repaint();
	frame.waitin();
	Atom drew = mem.newAtom(new Functor("drew",2,"watcher"));
	mem.relink(drew,1,me,1);
	mem.relink(drew,0,me,0);
	mem.removeAtom(me);
:](F).

% クラス定義
[:/*inline_define*/
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Color;
import java.util.List;
import java.lang.InterruptedException;
import javax.swing.JFrame;
class GraphFrame extends JFrame{
	AbstractMembrane mem; //所属膜
	List functor; //監視するファンクタ
	List data; //データ(IntegerのListのList)
	List color; //表示色(ColorのList)
	List name; //データ系列の名前(StringのList)
	int lmax = 300; //最大データ長
	int max=0; //縦軸最大値
	int ww = 640,wh=480; //ウィンドウサイズ
	int nowWatchingIndex;
	public void init(AbstractMembrane tmem){
		setBounds(100,100,ww,wh);
		this.setDefaultCloseOperation(EXIT_ON_CLOSE); //ウィンドウを閉じたら終了
		mem=tmem;
		data=new ArrayList();
		color=new ArrayList();
		name=new ArrayList();
		functor=new ArrayList();
		nowWatchingIndex=0;
	}
	public int addData(String dataname, String atomname, int arity){
		int index = data.size();
		Color c = ((index==0)?Color.blue:
                           (index==1)?Color.red:
                           (index==2)?Color.green:
                           (index==3)?Color.orange:
                           (index==4)?Color.magenta:
                           Color.black);
		data.add(new ArrayList());
		name.add(dataname);
		color.add(c);
		functor.add(new Functor(atomname,arity));
		return index;
	}
	public Functor getFunctor(int i){
		return (Functor)functor.get(i);
	}
	public int getNowWatchingIndex(){
		return nowWatchingIndex;
	}
	public boolean nextIndex(){
		nowWatchingIndex++;
		if(nowWatchingIndex==data.size()){
			nowWatchingIndex=0;
		}
		return nowWatchingIndex!=0;
	}
	public void updateData(int i, int value){
		if(((List)data.get(i)).size()>lmax)((List)data.get(i)).remove(0);
		((List)data.get(i)).add(new Integer(value));
		if(max<value)max=value;
	}
	Graphics gr;
	Image img;
	public void update(Graphics g){
		if(img == null){
			img = createImage(640,480);
			gr = img.getGraphics();
		}
		paint(gr);
		g.drawImage(img,0,0,this);
	}
	public void paint(Graphics g){
		g.setColor(Color.white);
		g.fillRect(0,0,ww,wh);
		if(data.size()==0)return;
		if(((List)data.get(0)).size()<2)return;
		double top=50,height=wh-100;
		double left=150,width=ww-200;
		double rh = height / max;
		double rw = width / (((List)data.get(0)).size()-1);
		g.setColor(Color.black);
		g.drawLine((int)left,(int)(top+height),(int)(left+width),(int)(top+height));
		g.drawLine((int)left,(int)top,(int)left,(int)(top+height));
		for(int j=0;j<data.size();j++){
			g.setColor((Color)color.get(j));
			for(int i=0;i<((List)data.get(j)).size()-1;i++){
				g.drawLine((int)(left+i*rw),
                                           (int)(top+(height-((Integer)((List)data.get(j)).get(i)).intValue()*rh)),
                                           (int)(left+(i+1)*rw),
                                           (int)(top+(height-((Integer)((List)data.get(j)).get(i+1)).intValue()*rh)));
			}
			g.drawString(((String)name.get(j))+"="+((Integer)((List)data.get(j)).get(((List)data.get(j)).size()-1)).intValue(),10,100+j*20);
		}
	}
	public void waitin(){
		try{Thread.sleep(100);}catch(InterruptedException e){}
	}
}
:].

}.
