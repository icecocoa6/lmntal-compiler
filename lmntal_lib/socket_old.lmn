/*
NAME
	Socket module

AUTHOR
	Mizuno Ken

HISTORY
	2004/07/12(Mon)

USAGE (暫定版)
	socket.connect(<Host>,<Port>,<InputStream>,<OutputStream>)
	データを受信すると、InputStreamにリストが生成される。
	データが終了した場合は、第３引数にはsocket.closedが接続される。
	OutputStreamにつないだリストの内容が送信される。
	送受信ともに終了すると、ソケットを閉じ、アトムは削除される。

EXAMPLE 1
	socket.connect([[localhost]],1234,in,[hoge,moge,zubang])

EXAMPLE 2
	socket.connect([[localhost]],1234,in,out).
	write. write. write.
	write, out(O) :- O=[hoge,moge|out].
*/

[[/*inline_define*/
import java.net.*;
import java.io.*;

class AcceptThread extends Thread {
	ServerSocket ss;
	AbstractMembrane mem;
	AcceptThread(int port, AbstractMembrane mem) throws IOException {
		this.ss = new ServerSocket(port);
		this.mem = mem;
	}
	public void run() {
		try {
			while (true) {
				Socket soc = ss.accept();
				mem.asyncLock();
				ReadThread rt = new ReadThread(soc);
				Atom o = mem.newAtom(new ObjectFunctor(rt));
				rt.me = o;
				Atom s = mem.newAtom(new Functor("socket", 3, "socket"));
				Atom in = mem.newAtom(new Functor("in", 1));
				Atom out = mem.newAtom(new Functor("out", 1));
				mem.newLink(s, 0, o, 0);
				mem.newLink(s, 1, in, 0);
				mem.newLink(s, 2, out, 0);
				
				rt.start();
				mem.asyncUnlock();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}

class ReadThread extends Thread {
	Socket socket;
	Atom me;
	ReadThread(Socket socket) {
		this.socket = socket;
		this.me = me;
	}
	ReadThread(String host, int port) throws IOException {
		this.socket = new Socket(host, port);
		this.me = me;
	}
	public void run() {
		try {
			BufferedReader reader = new BufferedReader(
				new InputStreamReader(socket.getInputStream()));
			String data;
			while ((data = reader.readLine()) != null) {
				AbstractMembrane mem = me.getMem();
				mem.asyncLock();
				Atom socketAtom = me.nthAtom(0);
				Atom strAtom = mem.newAtom(new Functor(data, 1));
				Atom dot = mem.newAtom(new Functor(".", 3));
				mem.newLink(dot, 0, strAtom, 0);
				mem.relink(dot, 2, socketAtom, 1);
				mem.newLink(dot, 1, socketAtom, 1);
				mem.asyncUnlock();
			}
			AbstractMembrane mem = me.getMem();
			mem.asyncLock();
			Atom socketAtom = me.nthAtom(0);
			Atom nil = mem.newAtom(new Functor("[]", 1));
			mem.relink(nil, 0, socketAtom, 1);
			Atom closed = mem.newAtom(new Functor("closed", 1, "socket"));
			mem.newLink(closed , 0, socketAtom, 1);
			mem.asyncUnlock();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
]].

{
module(socket).

socket.create(Port) :- int(Port) |
	[[/*inline*/
		try {
			AcceptThread t = new AcceptThread(Integer.parseInt(me.nth(0)), mem);
			Atom o = mem.newAtom(new ObjectFunctor(t));
			Atom nil = mem.newAtom(new Functor("nil", 1));
			mem.newLink(o, 0, nil, 0);
			
			mem.makePerpetual();
			me.nthAtom(0).remove();
			me.remove();

			t.start();
		} catch (IOException e) {
			e.printStackTrace();
		}
	]](Port).
	
socket.connect(Addr,Port,In,Out) :- unary(Addr),int(Port) | 
	socket.socket(S,In,Out),
	S=[[/*inline*/
		try {
			String addr = me.nth(0);
			int port = Integer.parseInt(me.nth(1));
			ReadThread sr = new ReadThread(addr, port);
			mem.makePerpetual();

			Functor func = new ObjectFunctor(sr);
			Atom result = mem.newAtom(func);
			sr.me = result;
			mem.relink(result, 0, me, 2);


			me.nthAtom(0).remove();
			me.nthAtom(1).remove();
			me.remove();
			
			sr.start();
		} catch(Exception e) {
			e.printStackTrace();
		}
	]](Addr,Port).

socket.socket(S,In,[D|Out]) :- unary(D) |
	socket.socket(SS,In,Out),
	SS=[[/*inline*/
		try {
			String data = me.nth(0);
			Socket soc = ((ReadThread)((ObjectFunctor)me.nthAtom(1).getFunctor()).getObject()).socket;
			BufferedWriter writer = new BufferedWriter(
					new OutputStreamWriter(soc.getOutputStream()));
			writer.write(data);
			writer.write("\n");
			writer.flush();
			mem.unifyAtomArgs(me, 1, me, 2);
			me.remove();
			me.nthAtom(0).remove();
		} catch (Exception e) {
			e.printStackTrace();
		}
	]](D,S).

socket.socket(S,In,[]) :- 
	socket.socket(SS,In,socket.closed),
	SS=[[/*inline*/
		try {
			ReadThread sr = (ReadThread)((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
			Socket soc = sr.socket;
			soc.shutdownOutput();
			mem.unifyAtomArgs(me, 0, me, 1);
			me.remove();
		} catch (Exception e) {
			e.printStackTrace();
		}
	]](S).

socket.socket(S,socket.closed,socket.closed) :- 
	[[/*inline*/
		try {
			ReadThread sr = (ReadThread)((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
			Socket soc = sr.socket;
			soc.close();
			me.nthAtom(0).remove();
			me.remove();
		} catch (Exception e) {
			e.printStackTrace();
		}
	]](S).
}
