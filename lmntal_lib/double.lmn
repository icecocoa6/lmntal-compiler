/*
NAME
	Double module

SYNOPSIS
	
AUTHOR
	Shintaro Kudo

HISTORY
	2004/06/04(Fri)

*/


{

module(double).

/**
 * >
 * 
 */
H= '>'(A,B) :- float(A),float(B) | H = [:/*inline*/		

		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();

		Atom result = mem.newAtom(
		new Functor((( a0 > a1 )?"true":"false"), 1)
		);
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	
	:](A,B).

/**
 * <
 * 
 */
H= '<'(A,B) :- float(A),float(B) | H = [:/*inline*/		

		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();

		Atom result = mem.newAtom(
		new Functor((( a0 < a1 )?"true":"false"), 1)
		);
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	
	:](A,B).

/**
 * =<
 * 
 */
H= '=<'(A,B) :- float(A),float(B) | H = [:/*inline*/		

		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();

		Atom result = mem.newAtom(
		new Functor((( a0 <= a1 )?"true":"false"), 1)
		);
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	
	:](A,B).

/**
 * >=
 * 
 */
H= '>='(A,B) :- float(A),float(B) | H = [:/*inline*/		

		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();

		Atom result = mem.newAtom(
		new Functor((( a0 >= a1 )?"true":"false"), 1)
		);
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	
	:](A,B).

/**
 * ==
 *
 */
H= '=='(A,B) :- float(A),float(B) | H= [:/*inline*/

		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();

		Atom result = mem.newAtom(
		new Functor((( a0 == a1 )?"true":"false"), 1)
		);
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	
	:](A,B).
	
/**
 * !=
 *
 */
H= '!='(A,B) :- float(A),float(B) | H= [:/*inline*/
		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
		Atom result = mem.newAtom(
		new Functor((( a0 != a1 )?"true":"false"), 1)
		);
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).

/**
 * abs
 *
 */
H= abs(A) :- float(A) | H= [:/*inline*/
		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		Atom result = mem.newAtom(new FloatingFunctor((a0 >= 0 )?a0:-a0));
		mem.relink(result, 0, me, 1);
		me.nthAtom(0).remove();
		me.remove();
	:](A).

/**
 * + (float , float)
 *
 */
H= '+'(A,B) :- float(A),float(B) | H= [:/*inline*/
		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
		Atom result = mem.newAtom(new FloatingFunctor(a0 + a1));
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).

/**
 * + (float, int)
 *
 */
H= '+'(A,B) :- float(A),int(B) | H= [:/*inline*/
		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
		Atom result = mem.newAtom(new FloatingFunctor(a0 + a1));
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).

/**
 * + (int , float)
 *
 */
H= '+'(A,B) :- int(A),float(B) | H= [:/*inline*/
		double a0=
		((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
		Atom result = mem.newAtom(new FloatingFunctor(a0 + a1));
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).

/**
 * - (float , float)
 *
 */
H= '-'(A,B) :- float(A),float(B) | H= [:/*inline*/
		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
		Atom result = mem.newAtom(new FloatingFunctor(a0 - a1));
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).

/**
 * - (float, int)
 *
 */
H= '-'(A,B) :- float(A),int(B) | H= [:/*inline*/
		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
		Atom result = mem.newAtom(new FloatingFunctor(a0 - a1));
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).

/**
 * - (int , float)
 *
 */
H= '-'(A,B) :- int(A),float(B) | H= [:/*inline*/
		double a0=
		((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
		Atom result = mem.newAtom(new FloatingFunctor(a0 - a1));
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).

/**
 * * (float , float)
 *
 */
H= '*'(A,B) :- float(A),float(B) | H= [:/*inline*/
		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
		Atom result = mem.newAtom(new FloatingFunctor(a0 * a1));
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).

/**
 * * (float, int)
 *
 */
H= '*'(A,B) :- float(A),int(B) | H= [:/*inline*/
		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
		Atom result = mem.newAtom(new FloatingFunctor(a0 * a1));
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).

/**
 * * (int , float)
 *
 */
H= '*'(A,B) :- int(A),float(B) | H= [:/*inline*/
		double a0=
		((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
		Atom result = mem.newAtom(new FloatingFunctor(a0 * a1));
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).
	
/**
 * / (float , float)
 *
 */
H= '/'(A,B) :- float(A),float(B) | H= [:/*inline*/
		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
		Atom result = mem.newAtom(new FloatingFunctor(a0 / a1));
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).

/**
 * / (float, int)
 *
 */
H= '/'(A,B) :- float(A),int(B) | H= [:/*inline*/
		double a0=
		((FloatingFunctor)me.nthAtom(0).getFunctor()).floatValue();
		double a1=
		((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
		Atom result = mem.newAtom(new FloatingFunctor(a0 / a1));
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).

/**
 * / (int , float)
 *
 */
H= '/'(A,B) :- int(A),float(B) | H= [:/*inline*/
		double a0=
		((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
		double a1=
		((FloatingFunctor)me.nthAtom(1).getFunctor()).floatValue();
		Atom result = mem.newAtom(new FloatingFunctor(a0 / a1));
		mem.relink(result, 0, me, 2);
		me.nthAtom(0).remove();
		me.nthAtom(1).remove();
		me.remove();
	:](A,B).

}