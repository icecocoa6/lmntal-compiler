/*
----------------------------------------------------------------------
Unifier
                                              Koji Hara
                                              2005/03/11(Fri) 11:43:54
                                              2005/03/13(Sun) 16:48:43
----------------------------------------------------------------------


----------------------------------------------------------------------
概要
----------------------------------------------------------------------
人工知能論 資料・教材
http://www.ueda.info.waseda.ac.jp/oess/AI/Html/class_rsc/materials/index.html
の
推論と定理証明(fol-2004.pdf)にある書き換えベースの unify アルゴリズムを使用。

unify 対象となる構造：
	List of (
		  <ATOM>       : 定数
		| var(<ATOM>)  : 変数
	)

成功すると [true, { 変数束縛の集合 } ] を返す。
失敗なら false を返す。

例：
	res=unify([[a],b,c,var(y)], [var(x),b,c,var(x)]).
	=>
	res([true, {r(bind(x,[a])), r(bind(y,[a]))} ]).

	res=unify([[a],b], [var(x),var(x)]).
	=>
	false(res).

----------------------------------------------------------------------
TODO
----------------------------------------------------------------------

*/
{
	module(unify).
	
	H=unify(A, B) :- ground(A), ground(B) | H=unify_work({
		base.use.
		unify(A, B).
		
		unify(A, B)                      :- unary(A), unary(B), A=B         |.
		unify(A, B)                      :- unary(A), unary(B), A\=B        | r=fail.
		unify(var(A), var(B))            :- unary(A), A=B                   |.
		unify(var(A), B)                 :- unary(A), ground(B)             | r=if(occur_check(A, B), bind(A, B)).
		unify(B, var(A))                 :- unary(A), ground(B)             | r=if(occur_check(A, B), bind(A, B)).
		unify([A|R], [])                 :-                                   unify([A|R], []), r=fail.
		unify([], [B|R])                 :-                                   unify([], [B|R]), r=fail.
		unify([A|AR], [B|BR])            :-                                   unify(AR, BR), unify(A, B).
		
		// TODO
		H=occur_check(A, B) :- unary(A), ground(B) | H=true.
		
		H=bind(A, B), P=var(AA)          :- unary(AA), ground(B), A=AA      | H=bind(A, B), P=B.
		r=bind(A, B), r=bind(A0, B0)     :- unary(A), A=A0, ground(B), ground(B0) | r=if(ground_neq(B, B0), fail).
	}).
	
	H=unify_work({ r=fail, $p[], @r }) :- H=false.
	H=unify_work({ $p[], @r }/) :- H=[true, {$p[]}].
//	H=unify_work(Binds, { r=bind(A, B), $p[], @r }) :- unary(A), ground(B) | H=unify_work([bind(A, B) | Binds], {$p[], @r}).
}.

