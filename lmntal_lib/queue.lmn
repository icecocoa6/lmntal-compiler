/*
NAME
	Queue module (ring)

SYNOPSIS
	r=shift(push(push(queue.new, [abc,def]),123),v1).
	===>
	v1([abc,def]), r(queue.new([123|_33],_33)), @602

	r=queue.of_list([1,2,3])
	===>
	r(queue.new([1,2,3|_54],_54)), @602

DESCRIPTION
	たぶんいろんな事するときにこれがよく使われるとおもう

AUTHOR
	Koji Hara

HISTORY
	2004/05/17(Mon)

*/

{
module(queue).

/**
 * new : unit -> Queue
 * 
 */
H=queue.new :- H=queue.new(Head, Tail), Head=Tail.

/**
 * is_empty
 * 
 */
H=is_empty(queue.new(Head, Head), Return) :- H=queue.new(Head, Head), Return=true.
H=is_empty(queue.new('.'(Obj, Head2), Tail), Return) :- H=queue.new('.'(Obj, Head2), Tail), Return=false.

/**
 * unshift
 * 
 */
H=unshift(queue.new(Head, Tail), Obj) :- H=queue.new('.'(Obj, Head), Tail).

/**
 * shift
 * 
 */
H=shift(queue.new('.'(Obj, Head), Tail), Return) :- H=queue.new(Head, Tail), Return=Obj.
H=shift(queue.new(Head, Head), Return) :- H=queue.new(Head, Head), Return=nil.

/**
 * push
 * 
 */
H=push(queue.new(Head, Tail), Obj) :- H=queue.new(Head, Tail2), '.'(Obj, Tail2, Tail).


/**
 * pop
 * 
 */
H=pop(queue.new(Head, Tail), Return), '.'(Obj, Tail, Tail2) :- H=queue.new(Head, Tail2), Return=Obj.
H=pop(queue.new(Head, Head), Return) :- H=queue.new(Head, Head), Return=nil.

/**
 * of_list
 * 
 * List -> Queue
 */
H=queue.of_list(List) :-
	H=queue.of_list_s0(List, queue.new).

H=queue.of_list_s0([], Queue) :- H=Queue.
H=queue.of_list_s0([Value|Next], Queue) :-
	H=queue.of_list_s0(Next, push(Queue, Value)).

queue.test :-
	t0=shift(push(push(queue.new, [abc,def]),123),v1),
	t1=queue.of_list([1,2,3]).
}

