/*
NAME
	List module

SYNOPSIS


AUTHOR
	Koji Hara

HISTORY
	2004/07/19(Sun) io.stdin(Object) ついか。これの初期化のために io.use する必要がある。またはモジュール内のデータもコピーするようにする。
	2004/05/22(Sat)

*/

{
module(io).

/**
 * initializer
 * 
 */
io.use :-
	io.stdin=[[/*inline*/
		Atom stdin = mem.newAtom(new ObjectFunctor(new java.io.BufferedReader(new java.io.InputStreamReader(System.in))));
		mem.relink(stdin, 0, me, 0);
		me.remove();
		]],
	io.stdout=[[/*inline*/
		Atom stdout = mem.newAtom(new ObjectFunctor(new java.io.PrintWriter(System.out, true)));
		mem.relink(stdout, 0, me, 0);
		me.remove();
		]].


//io.print(String) :- unary(String)|[[/*inline*/
//	System.out.println(me.nth(0));
//	me.setName("nil");
//	]](String).
io.input(Message) :- [[/*inline*/
	String s = javax.swing.JOptionPane.showInputDialog(null, me.nth(0));
	me.setName(s);
	me.nthAtom(0).setName("done");
	]](Message).
io.input(Message, X) :- [[/*inline*/
	String s = javax.swing.JOptionPane.showInputDialog(null, me.nth(0));
	me.setName("done");
	me.nthAtom(0).setName(s);
	]](Message, X).
io.input :- [[/*inline*/
	String s = javax.swing.JOptionPane.showInputDialog(null, "Input text.");
	me.setName(s);
	]].
io.popup(String) :- unary(String)|[[/*inline*/
	javax.swing.JOptionPane.showMessageDialog(null, me.nth(0));
	]](String).

/**
 * io.toFile : String -> List of String -> unit
 * 
 * @example r=io.toFile(b, io.fromFile(a))
 */
H=io.toFile(Filename, List) :- unary(Filename) | H=toFile_s0(io.fileWriter(Filename), List).
H=toFile_s0(Obj, [CAR|CDR]) :- unary(CAR) | H=toFile_s0(print(Obj, CAR), CDR).
H=toFile_s0(Obj, []) :- H=close(Obj).


/**
 * io.fileWriter : String -> java.io.PrintWriter
 * 
 * @example r=close(print(io.fileWriter(a), abc))
 */
H=io.fileWriter(Filename) :- unary(Filename) | H=[[/*inline*/
	try {
		Atom pw = mem.newAtom(new ObjectFunctor(new java.io.PrintWriter(new java.io.FileWriter(me.nth(0)))));
//		System.out.println("FILE="+me.nth(0));
		mem.relink(pw, 0, me, 1);
		me.nthAtom(0).remove();
		me.remove();
	} catch(Exception e) {}
	]](Filename).

/**
 * print : String -> unit
 * 
 */
H=print(String), io.stdout(STDOUT) :- class(STDOUT, "java.io.PrintWriter") |
	H=print(STDOUT, String), io.stdout(STDOUT).

H=print(Object, String) :- class(Object, "java.io.PrintWriter"), unary(String) |
	H=[[/*inline*/
		try {
			java.io.PrintWriter pw = (java.io.PrintWriter) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
			Atom done = mem.newAtom(new Functor("done", 1));
			if(pw!=null) {
				pw.println(me.nth(1));
			}
			mem.relink(done, 0, me, 2);
			me.nthAtom(1).remove();
			me.remove();
		} catch(Exception e) {e.printStackTrace();}
	]](Object, String).

/**
 * close : unit -> unit
 * 
 */
H=close(Object) :- class(Object, "java.io.PrintWriter") |
	H=[[/*inline*/
		try {
			java.io.PrintWriter pw = (java.io.PrintWriter) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
			pw.close();
			mem.relink(me.nthAtom(0), 0, me, 1);
			me.remove();
		} catch(Exception e) {Env.e(e);}
	]](Object).

/**
 * io.list_of_stdin : unit -> List of String
 * 
 */
H=io.list_of_stdin, io.stdin(STDIN) :- unary(STDIN) | H=list_of_dev_s0(STDIN, []), io.stdin(STDIN).

/**
 * io.list_of_file : unit -> List of String
 * 
 */
H=io.list_of_file(Filename) :- H=list_of_dev_s0(io.fileReader(Filename), []).
H=list_of_dev_s0(Obj, List) :- class(Obj, "java.io.BufferedReader") |
	H=[String|list_of_dev_s0(readline(Obj, String), List)].
H=list_of_dev_s0(nil, List) :- H=List.


/**
 * io.fileReader : String -> java::BufferedReader
 * 
 */
H=io.fileReader(Filename) :- unary(Filename) | H=[[/*inline*/
	try {
		Atom br = mem.newAtom(new ObjectFunctor(new java.io.BufferedReader(new java.io.FileReader(me.nth(0)))));
//		System.out.println("FILE="+me.nth(0));
		mem.relink(br, 0, me, 1);
		me.nthAtom(0).remove();
		me.remove();
	} catch(Exception e) {}
	]](Filename).

/**
 * readLine : ?
 * 
 */
H=readline(Result), io.stdin(STDIN) :- class(STDIN, "java.io.BufferedReader") |
	H=readline(STDIN, Result), io.stdin(STDIN).

H=readline(Object, Result) :- class(Object, "java.io.BufferedReader") |
	H=[[/*inline*/
		try {
			java.io.BufferedReader br = (java.io.BufferedReader) ((ObjectFunctor)me.nthAtom(0).getFunctor()).getObject();
			String s = br.readLine();
			Atom result = mem.newAtom(new Functor(s==null?"":s, 1));
			mem.relink(result, 0, me, 1);
			Atom obj = me.nthAtom(0);
			Atom res;
			obj.remove();
			if(s==null) {
				res = mem.newAtom(new Functor("nil", 1));
			} else {
				res = mem.newAtom(new Functor("done", 1));
			}
			mem.relink(res, 0, me, 2);
//			mem.relink(obj, 0, me, 2);
			me.remove();
		} catch(Exception e) {Env.e(e);}
	]](Object, Result).

// Sample
// r=io.fileReader([[build.xml]]).
// r(O):-class(O,"java.io.BufferedReader")|r(readline(O,io.print)).


//io.fopen(Handle, String) :- unary(Handle), unary(String)|[[/*inline*/
//	try {
//		PrintWriter pw = new PrintWriter(new FileOutputStream(me.nth(1)));
//		IO.handles.put(me.nth(0), pw);
//	} catch(Exception e) {}
//	]](Handle, String).
//io.fprint(Handle, String) :- unary(Handle), unary(String)|[[/*inline*/
//	((PrintWriter)IO.handles.get(me.nth(0))).println(me.nth(1));
//	]](Handle, String).
//io.fclose(Handle) :- unary(Handle)|[[/*inline*/
//	((PrintWriter)IO.handles.get(me.nth(0))).close();
//	]](Handle).

}.


//	inputString("How much?", Answer).

//H=[Object, fileReader.readLine(Result)|Rest] :- H=[Object|Rest], kill(Result).
//H=[readLine(Result), Object] :- class(Object, "java.io.BufferedReader") |
//H=[Object], [[/*inline*/
//	  try {
//		  java.io.BufferedReader br = (java.io.BufferedReader) ((ObjectFunctor)me.nthAtom(1).getFunctor()).getObject();
//		  String s = br.readLine();
//		  me.nthAtom(1).remove();
//		  me.set(s, 1);
//	  } catch(Exception e) {System.out.println(e);}
//]](Result, Object).
//
