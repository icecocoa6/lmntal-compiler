#!/usr/bin/perl
#####################################################################
#
# 指定された Java クラスに対応する LMNtal モジュールを自動生成します
#
# (使用例)
# $ ./class2module.pl java.lang.Math
#
#####################################################################

# java の型 => Functor
%functors = (
	"int"				=> "IntegerFunctor",
	"long"				=> "IntegerFunctor",
	"float"				=> "FloatingFunctor",
	"double"			=> "FloatingFunctor",
	"boolean"			=> "SymbolFunctor",
	"java.lang.String"	=> "StringFunctor",
);

# java 変数の型 => その変数を取得するファンクタのメソッド
%getmethods = (
	"int"				=> "intValue()",
	"long"				=> "intValue()",
	"float"				=> "floatValue()",
	"double"			=> "floatValue()",
	"boolean"			=> "getName().equals(\"false\")?false:true",
	"java.lang.String"	=> "stringValue()",
);

# java の型 => ガード制約
%guards = (
	"int"				=> "int",
	"long"				=> "int",
	"float"				=> "float",
	"double"			=> "float",
#	"boolean"			=> "boolean",
	"java.lang.String"	=> "string",
);

# java の戻り値型 => 結果を返すアトム用の Functor
%result_functors = (
	"int"				=> "IntegerFunctor(r)",
	"long"				=> "IntegerFunctor((int)r)",
	"float"				=> "FloatingFunctor(r)",
	"double"			=> "FloatingFunctor(r)",
	"boolean"			=> "SymbolFunctor(r?\"true\":\"false\", 1)",
	"java.lang.String"	=> "StringFunctor(r)",
);

#モジュールを生成するディレクトリ
$dir=".";

#オプション解析
use Getopt::Std;
my $opt = {}; 
getopts('d:h',$opt);
if ($opt->{'d'}) {
	$dir=$opt->{'d'};
}
#ディレクトリが存在するかどうかチェック
if (!-d $dir) {
	die "$0: Directory '$dir' is not found.\n";
}
#クラスが指定されないか、-hオプションのときは使い方を表示する
if ($opt->{'h'} || $#ARGV == -1) {
	print STDERR "Usage: $0 [options] <classes>\n";
	print STDERR "\n";
	print STDERR "\t-d <dir>\tSet output directory\n";
	exit(0);
}

# メイン
for ($i = 0; $i <= $#ARGV; $i++) {
	$class = $ARGV[$i];
	open(FILE, "javap -public $class |");
	while (<FILE>) {
		if (/(abstract )?class ([\w.]+)\.(\w+)/) { #完全クラス名を取得するために必要？
			$abstract = $1; # 抽象クラスの場合 undef 以外の値が入る
			$class = $3;
			$absolute_class = $module = "$2.$3";
			$module =~ tr/./_/;
			printf STDERR "%-72s [%3d%%]\n", "$dir/$module.lmn", 100*($i+1)/($#ARGV+1);
			open(STDOUT, ">$dir/$module.lmn"); #標準出力を切り替える
			print "//-----------------------------------------------------\n";
			print "// The following code was generated by class2module.pl\n";
			print "// " . localtime(time) . "\n";
			print "//-----------------------------------------------------\n";
			$uses = "," . dump_superclass($absolute_class);
			chop($uses);
			print "{module($module).\n";
		} elsif (/compareTo\(java\.lang\.Object\)/) {
			# Comparable インタフェースのメソッドは無視
		} elsif (/char|byte|short|float/) {
			#とりあえず無視
		} elsif (/public [\w.\$]+\(([\w., ]*)\)/ && $abstract eq "") {# 抽象クラスはコンストラクタなし
			dump_static_method($absolute_class, "new $absolute_class", "$module.new", $uses, split_args($1));
		} elsif (/public static (?:final )?(?:synchronized )?(\S+) (\S+)\((.*)\)/) {
			# 戻り値がlongのときは除外
			if (!($3 =~ /\[\]/) && $1 ne "long") { #TODO Javaの配列をLMNtalのリストで処理
				dump_static_method(trim_class($1), "$absolute_class.$2", "$module.".to_lmntal_method($2), "", split_args($3));
			}
		} elsif (/public (?:final )?(?:synchronized )?(\S+) (\S+)\((.*)\)/) {
			# 戻り値がlongのときは除外
			if (!($3 =~ /\[\]/) && $1 ne "long") { #TODO Javaの配列をLMNtalのリストで処理
				dump_method(trim_class($1), $2, split_args($3));
			}
		} elsif (/public static final (\S+) (\w+)/) {
			dump_final_variable($1, $2);
		}
	}
	close(FILE);
	print "}.\n";
	close(STDOUT);
}

# スーパークラスのインポート文を出力する
sub dump_superclass {
	my ($class) = @_;
	if ($class eq "java.lang.Object") {
		return "";
	}
	open(JAVAP, "javap -public $class |");
	while (<JAVAP>) {
		if (/public interface/) {
			return "";
		} elsif (/extends ([\w.]+)\.(\w+)/) {
			$class = $use = "$1.$2";
			if ($class eq "java.lang.Object") {
				return "";
			}
			$use =~ tr/./_/;
			$use .= ".use";
			$use .= ",($use:-())";
			last;
		}
	}
	close(JAVAP);

	# 再帰的に呼ぶ
	return $use . "," . dump_superclass($class);
}

# 引数を配列に展開する
sub split_args {
	my ($args) = @_;
	my @args = split(/\s*,\s*/, trim_class($args));
	return @args;
}

sub to_lmntal_args {
	my ($args) = @_;
	my @args = split(/\s*,\s*/, $args);
	my $lmntal_args;
	for (my $i = 0; $i < $#args+2; $i++) {
		$lmntal_args .= "_$i,";
	}
	$lmntal_args .= "_$i";
	return $lmntal_args;
}

# クラス名を正しく整形する
sub trim_class {
	my ($class) = @_;
	$class =~ s/\$/\./g;
	return $class;
}

# ガードを出力する
sub dump_guards {
	@args = @_;
	my $guards = "";
	for (my $i = 0; $i <= $#args; $i++) {
		$arg = $args[$i];
		if ($arg eq "boolean") {
			next;
		}
		if (exists($guards{$arg})) {
			$guards .= "$guards{$arg}(_$i),";
		} else {
			$guards .= "class(_$i,\"$arg\"),";
		}
	}
	chop($guards); #最後のカンマを除去
	return $guards;
}

# ヘッド部分を出力する
sub dump_head {
	my ($args, $method, @args) = @_;
	print "$method($args) :- ";
	my $guards = dump_guards(@args);
	if ($guards ne "") {
		print "$guards | ";
	}
}

# java のメソッド名から LMNtal 用のメソッド名を生成する
sub to_lmntal_method {
	my ($method) = @_;
	$method =~ s/^_//; # 先頭の _ を削除
	return lcfirst($method); # 先頭を小文字にして返す
}

# メソッドを出力する
sub dump_method {
	my ($type, $method, @args) = @_;
	$argc = $#args+1;

	my $ARGS;
	if ($type eq "void") {
		$ARGS = make_lmntal_args($argc+1);
	} else {
		$ARGS = make_lmntal_args($argc+2);
	}

	print "H=";
	dump_head($ARGS, to_lmntal_method($method), ($absolute_class,@args));
	print "H=[:/*inline*/\n";

	print "\t$absolute_class v0 = ($absolute_class)me.nthAtom(0).getFunctor().getValue();\n";
	
	$args = dump_args(1, @args);
	
	dump_call_method($type, $method, $argc+1);

	for (my $i = 1; $i < $argc+1; $i++) {
		print "\tme.nthAtom($i).remove();\n";
	}
	print "\tme.remove();\n";
	print "\t:]($ARGS).\n";
	print "\n";
}

# static メソッドを出力する
sub dump_static_method {
	($type, $method, $lmnmethod, $uses, @args) = @_;
	$argc = $#args+1;

	$ARGS = make_lmntal_args($argc);

	if ($type ne "void") {
		print "H=";
	}
	dump_head($ARGS, $lmnmethod, @args);
	if ($type ne "void") {
		print "H=";
	}
	print "[:/*inline*/\n";

	$args = dump_args(0, @args);
	
	dump_call_static_method($type, $method, $argc);

	for (my $i = 0; $i < $argc; $i++) {
		print "\tme.nthAtom($i).remove();\n";
	}
	print "\tme.remove();\n";
	print "\t:]($ARGS)" . $uses . ".\n";
	print "\n";
}

# LMNtal の引数の文字列を生成する
sub make_lmntal_args {
	my ($argc) = @_;
	my $args = "";
	for (my $i = 0; $i < $argc; $i++) {
		$args .= "_$i,";
	}
	chop($args); #最後のカンマを除去
	return $args;
}

# 引数を取得する処理の出力
sub dump_args {
	my ($start, @args) = @_;
	my $argc = $#args;
	my $args = "";
	for (my $i = $start; $i <= $argc+$start; $i++) {
		my $type = $args[$i-$start];
		$type =~ s/\s//;
		$args .= "v$i,";
		if (exists($functors{$type})) {
			$functor = $functors{$type};
			$getmethod = $getmethods{$type};
			printf "\t$type v$i = (($functor)me.nthAtom(%d).getFunctor()).$getmethod;\n", $i;
		} else {
			printf "\t$type v$i = ($type)me.nthAtom(%d).getFunctor().getValue();\n", $i;
		}
	}
	chop($args); #最後のカンマを除去
	return $args;
}

sub dump_catch {
	my ($argc) = @_;
	
	print "\t} catch (Exception e) {\n";
	print "\t\tAtom res = mem.newAtom(new SymbolFunctor(\"nil\", 1));\n";
	print "\t\tmem.relink(res, 0, me, $argc);\n";
	print "\t\tAtom o = mem.newAtom(new ObjectFunctor(e));\n";
	print "\t\tmem.relink(o, 0, me, " . ($argc+1) . ");\n";
	print "\t}\n";
}

# メソッドを呼び出す部分の出力
sub dump_call_method {
	my ($type, $method, $argc) = @_;
	
	if ($type eq "void") {
		print "\ttry {\n";
		print "\t\tv0.$method($args);\n";
		# 第1引数のオブジェクトを最終引数につなぐ
		print "\t\tmem.relink(me.nthAtom(0), 0, me, $argc);\n";
		print "\t} catch (Exception e) {\n";
		print "\t\tAtom o = mem.newAtom(new ObjectFunctor(e));\n";
		print "\t\tmem.relink(o, 0, me, $argc);\n";
		print "\t}\n";
		return;
	}
	
	if ($type =~ /[\w.]+\[\]/) {#配列
		print "\ttry {\n";
		print "\t\t$type r = v0.$method($args);\n";
		print "\t\truntime.Link l = new runtime.Link(me.nthAtom($argc), 0);\n";#返値アトムのリンクを取得する
		print "\t\tutil.Util.makeList(l, java.util.Arrays.asList(r));\n";
		# 第1引数のオブジェクトを最終引数につなぐ
		print "\t\tmem.relink(me.nthAtom(0), 0, me, " . ($argc+1) . ");\n";
		dump_catch($argc);
		return;
	}	

	print "\ttry {\n";
	print "\t\t$type r = v0.$method($args);\n";

	my $functor;
	if (exists($result_functors{$type})) {
		$functor = $result_functors{$type};
	} else {
		$functor = "ObjectFunctor(r)";
	}

	print "\t\tAtom res = mem.newAtom(new $functor);\n";
	print "\t\tmem.relink(res, 0, me, $argc);\n";
	# 第1引数のオブジェクトを最終引数につなぐ
	print "\t\tmem.relink(me.nthAtom(0), 0, me, " . ($argc+1) . ");\n";
	dump_catch($argc);
}

sub dump_static_catch {
	my ($argc) = @_;
	
	print "\t} catch (Exception e) {\n";
	print "\t\tAtom res = mem.newAtom(new ObjectFunctor(e));\n";
	print "\t\tmem.relink(res, 0, me, " . $argc . ");\n";
	print "\t}\n";
}

# static メソッドを呼び出す部分の出力
sub dump_call_static_method {
	my ($type, $method, $argc) = @_;
	
	print "\ttry {\n";
	
	if ($type eq "void") {
		print "\t\t$method($args);\n";
		print "\t} catch (Exception e) {\n";
		print "\t\t//ここにはこないと思う\n";
		print "\t\tSystem.err.println(e);\n";
		print "\t}\n";
		return;
	}
	
	print "\t\t$type r = $method($args);\n";
	
	if ($type =~ /[\w.]+\[\]/) {
		print "\t\truntime.Link l = new runtime.Link(me.nthAtom($argc), 0);\n";#返値アトムのリンクを取得する
		print "\t\tutil.Util.makeList(l, java.util.Arrays.asList(r));\n";
		dump_static_catch($argc);
		return;
	}

	if (exists($result_functors{$type})) {
		$functor = $result_functors{$type};
	} else {
		$functor = "ObjectFunctor(r)";
	}

	print "\t\tAtom res = mem.newAtom(new $functor);\n";
	print "\t\tmem.relink(res, 0, me, $argc);\n";
	dump_static_catch($argc);
}

# final 定数の出力
sub dump_final_variable {
	my ($type, $name) = @_;
	
	print "H=$module." . lc($name) . " :- H=[:/*inline*/\n";
	print "\t$type r = $absolute_class.$name;\n";
	if (exists($result_functors{$type})) {
		$functor = $result_functors{$type};
	} else {
		$functor = "ObjectFunctor(r)";
	}
	print "\tAtom res = mem.newAtom(new $functor);\n";
	print "\tmem.relink(res, 0, me, 0);\n";
	print "\tme.remove();\n";
	print "\t:].\n";
	print "\n";
}