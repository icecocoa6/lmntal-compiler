%	sort_insertion.lmn
%	
%	insertion sort program


{ n(20), data([]).
  s0_init @@ n(N), data=X :- N>=0, M=N-1 | n(M), data=Y, '.'(N,X,Y).
}.
{n(-1), $p,@p}/ :- {$p}, sort([]).

s1_chng @@ {data([X,Y |R]), $p[R]}, sort(S)     :- X<Y |
           {sort(R), $p[R]}, sort([Y,X |S]).
s1_else @@ {data([X,Y |R]), $p[R]}, sort(S)     :- X>=Y |
           {sort(R), $p[R]}, sort([X,Y |S]).
s2_sort @@ {sort([Z |R]), $p[R]}, F=[X,Y |S]    :-	X>=Z, Y=<Z |
           {sort(R), $p[R]}, 	F=[X,Z,Y |S].
s2_els1 @@ {sort([Z |R]), $p[R]}, sort([X |S])  :-	X<Z |
           {sort(R), $p[R]}, sort([Z,X |S]).
s2_els2 @@ {sort([Z |R]), $p[R]}, F=[X |[]]     :-	X>Z |
           {sort(R), $p[R]}, F=[X,Z |[]].
q