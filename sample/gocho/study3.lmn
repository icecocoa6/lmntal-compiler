/*
knight(b,c).
test(knight(c)).

{imnot.
 a(1)}.
knight(1, z).
knight(ss(ss), S), s(S, i).
knight(s(s, s(s, s)), s).
k.
l.
k.
*/

/*
rule@@ knight(A, B)	:- ok(A, B).
*/
/*
a(v(v(v))).
rule@@
A=R :- int(A), ground(R) | A=R, ok.
*/
/*Á´²Ã»»´ï
fa{
ha1{+L4, a(null),  b(null), +L6}.
ha2{+L4, ci(null), s(null), +L5}.
or{+L5, c0(null), +L6}
}.*//*
list=[a(L1), b(1, L2), c(L3)].
mem1{+L1}.
mem2{+L2}.
mem3{hello(L3, world), test, mutex(L4)}.
task(mutex(L4)).
*/
/*
list=[a(1), b(1, d), c(x)].
'.'(A, B, C), d(X), $g[A, X]	:- ground($g) |
B=C, d(A, X), $g[A, X].*/
/*
test@@
mem0{free(L), $p}, free(L), mem1{$m}
	:-
mem1{$m, free(L), mem0{free(L), $p}}.
*/
mem{a, a,a}.
non{a, a,a}.
rule@@ mem{$p[]} :-.