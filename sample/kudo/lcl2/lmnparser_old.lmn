//構文解析Ver.2

//効率面とエラーチェックを考え、トップダウン的に修正

{
module(lmnparser).

P=lmnparser.parse(Tokens):-
	P=
	lmnparser.parse_statements( // プログラムは複数の文からなる
	lmnparser.parse_braces(     // { } でまず切り分ける
	lmnparser.parse_functors(   // 各種リテラル、アトム名
	lmnparser.parse_names(      // ルール名、文脈名、mod
	lmnparser.fix_tokens(       // 2引数のtokenを3引数に直す
		Tokens
	))))),

	dot_t(dot),
	rbrace_t(rbrace),
	lbrace_t(lbrace),
	braces_t(braces),
	rbracket_t(rbracket),
	lbracket_t(lbracket),
	rparen_t(rparen),
	lparen_t(lparen),
	atomname_t(atomname),
	linkname_t(linkname).

// 文を解釈する。結果は、プロセスのリストか、ルール。
P=lmnparser.parse_statement(Tokens):-
	P=
	lmnparser.parse_attach_names(    // [ ], ( ) にプロセス文脈名、アトム名をくっつける
	lmnparser.parse_parens_brackets( // [ ], ( ) で切り分ける
		Tokens
	)).

// 2引数のtokenを3引数に直す
P=lmnparser.parse_fix_tokens([token(TKind,Pos)|R]):-
	P=[token(TKind,[],Pos)|lmnparser.parse_fix_token(R)].
P=lmnparser.parse_fix_tokens([]):-P=[].
	
// ルール名、文脈名、mod
Parse_Dollar1@@
P=lmnparser.parse_names([token(dollar,[],DPos),token(atomname,AN,_GAPos)|R]):-
	P=[token(proccxt_name,AN,DPos)|lmnparser.parse_names(R)].
Parse_Dollar2@@ // $の後にアトム名がなければエラー
P=lmnparser.parse_names([token(dollar,[],DPos),token($tkind,TA,TPos)|R]),atomname_t($atomname):-
	$tkind\=$atomname|
	P=lmnparser.parse_error(free_dollar(DPos),[token($tkind,TA,TPos)|R]),atomname_t($atomname).

Parse_At1@@
P=lmnparser.parse_names([token(at,[],ATPos),token(atomname,AN,_GAPos)|R]):-
	P=[token(rulecxt_name,AN,ATPos)|lmnparser.parse_names(R)].
Parse_At2@@ // @の後にアトム名がなければエラー
P=lmnparser.parse_names([token(at,[],ATPos),token($tkind,TA,TPos)|R]),atomname_t($atomname):-
	$tkind\=$atomname|
	P=lmnparser.parse_error(free_at(ATPos),[token($tkind,TA,TPos)|R]),atomname_t($atomname).

Parse_AtAt1@@
P=lmnparser.parse_names([token(linkname,LN,LPos),token(at_at,[],_GATPos)|R]):-
	P=[token(rulename,LN,LPos)|lmnparser.parse_name(R)].
Parse_AtAt2@@
P=lmnparser.parse_names([token(atomname,AN,APos),token(at_at,[],_GATPos)|R]):-
	P=[token(rulename,AN,APos)|lmnparser.parse_name(R)].
Parse_AtAt3@@
P=lmnparser.parse_names([token(at_at,ATPos)|R]):-
	P=lmnparser.parse_error(free_at_at(ATPos),R).

Parse_Mod@@
P=lmnparser.parse_names([token(atomname,["mod"],APos),token($tkind,TA,TPos)|R]),at_at_t($at_at):-
	$tkind\=$at_at|
	P=[token(mod,[],APos)|lmnparser.parse_name([token($tkind,TA,TPos)|R])].

// その他スルー
Parse_Names1@@
P=lmnparser.parse_names([token(linkname,LN,LPos),token($tkind,TA,TPos)|R]),at_at_t($at_at):-
	$tkind\=$at_at|
	P=[token(linkname,LN,LPos)|lmnparser.parse_name([token($tkind,TA,TPos)|R])].
Parse_Names2@@
P=lmnparser.parse_names([token(atomname,[$an],APos),token($tkind,TA,TPos)|R]),at_at_t($at_at):-
	$tkind\=$at_at,$an\="mod"|
	P=[token(atomname,[$an],APos)|lmnparser.parse_name([token($tkind,TA,TPos)|R])].
Parse_Names3@@
P=lmnparser.parse_names([token($tkind,TA,TPos)|R]),
	dollar_t($dollar),at_t($at),at_at($at_at),
	atomname_t($atomname),linkname_t($linkname):-
	$tkind\=$dollar,
	$tkind\=$at,
	$tkind\=$at_at,
	$tkind\=$atomname,
	$tkind\=$linkname|
	P=[token($tkind,TA,TPos)|lmnparser.parse_names(R)],
	dollar_t($dollar),at_t($at),at_at($at_at),
	atomname_t($atomname),linkname_t($linkname).

// 各種リテラル、アトム名
Parse_Functors1@@
P=lmnparser.parse_functors([token(atomname,[AN],APos)|R]):-
	P=[token(funcname,[normalfunc(AN)],APos)|lmnparser.parse_functors(R)].
Parse_Functors2@@
P=lmnparser.parse_functors([token(num,[N],APos)|R]):-
	P=[token(funcname,[intfunc(N)],APos)|lmnparser.parse_functors(R)].
Parse_Functors3@@
P=lmnparser.parse_functors([token(floatnum,[F],APos)|R]):-
	P=[token(funcname,[floatfunc(F)],APos)|lmnparser.parse_functors(R)].
Parse_Functors4@@
P=lmnparser.parse_functors([token(dq_string,[S],APos)|R]):-
	P=[token(funcname,[stringfunc(S)],APos)|lmnparser.parse_functors(R)].
Parse_Functors5@@
P=lmnparser.parse_functors([token(sq_string,[S],APos)|R]):-
	P=[token(funcname,[normalfunc(S)],APos)|lmnparser.parse_functors(R)].
Parse_Functors6@@
P=lmnparser.parse_functors([token(bracket_string,[S],APos)|R]):-
	P=[token(funcname,[stringfunc(S)],APos)|lmnparser.parse_functors(R)].

//その他をスルー
Parse_Functors7@@
P=lmnparser.parse_functors([token($tkind,TA,TPos)|R]),
	atomname_t($atomname),num_t($num),floatnum_t($floatnum),dq_string_t($dq_string),
	sq_string_t($sq_string),bracket_string($bracket_string):-
	$tkind\=$atomname,
	$tkind\=$num,
	$tkind\=$floatnum,
	$tkind\=$dq_string,
	$tkind\=$sq_string,
	$tkind\=$bracket_string|
	P=[token($tkind,TA,TPos)|lmnparser.parse_functors(R)],
	atomname_t($atomname),num_t($num),floatnum_t($floatnum),dq_string_t($dq_string),
	sq_string_t($sq_string),bracket_string($bracket_string).

//  中括弧による切り分け
Parse_Braces1@@
P=lmnparser.parse_braces([token(lbrace,[],LBPos)|R]):-
	P=lmnparser.parse_braces(lmnparser.parse_braces_in(LBPos,R)).
Parse_Braces2@@
P=lmnparser.parse_braces([token(rbrace,_GA,RBPos)|R]):-
	P=lmnparser.parse_error(unopend_brace(RBPos),R).
Parse_Braces3@@
P=lmnparser.parse_braces([token($tkind,TA,TPos)|R]),
	lbrace_t($lbrace),rbrace_t($rbrace):- $lbrace \= $tkind, $rbrace \= $tkind |
	P=[token($tkind,TA,TPos)|lmnparser.parse_braces(R)],lbrace_t($lbrace),rbrace_t($rbrace).
Parse_Braces4@@
P=lmnparser.parse_braces([]):- P=[].

Parse_Braces_In@@
P=lmnparser.parse_braces_in(Pos,Tokens):-
	P=lmnparser.parse_braces_in(Pos,M,M,Tokens).
Parse_Braces_In1@@
P=lmnparser.parse_braces_in(Pos,MB,ME,[token(rbrace,A,_GRBPos)|R]):-
	P=[token(braces,[A,MB],Pos)|R],ME=[].
Parse_Braces_In2@@
P=lmnparser.parse_braces_in(Pos,MB,ME,[token(lbrace,[],LBPos)|R]):-
	P=lmnparser.parse_braces_in(Pos,MB,ME,
		lmnparser.parse_braces_in(LBPos,R)).
Parse_Braces_In3@@
P=lmnparser.parse_braces_in(Pos,MB,ME,[token($tkind,TA,TPos)|R]),
	lbrace_t($lbrace),rbrace_t($rbrace):-
	$rbrace\=$tkind,$lbrace\=$tkind|
	P=lmnparser.parse_braces_in(Pos,MB,ME1,R),ME=[token($tkind,TA,TPos)|ME1],
	lbrace_t($lbrace),rbrace_t($rbrace).
Parse_Braces_In4@@
P=lmnparser.parse_braces_in(Pos,MB,ME,[]):-
	P=lmnparser.parse_error(unclosed_brace(Pos),MB),ME=[].

//  ピリオドによる切り分け
//  - ピリオドで区切られたものをstatement(文)と呼ぶ。
//  -膜の中も。
//  -切り分けたそれぞれのstatementをparseする。

Parse_Statements@@
P=lmnparser.parse_statements(Tokens):-P=lmnparser.parse_statements(S,S,Tokens).
Parse_Statements1@@
P=lmnparser.parse_statements([SC|SB],SE,[token(dot,[],_GDPos)|R]):-
	P=[lmnparser.parse_statement([SC|SB])|lmnparser.parse_statements(S,S,R)],SE=[].
Parse_Statements2@@
P=lmnparser.parse_statements(SB,SE,[token(braces,[A,M],MPos)|R]):- 
	P=lmnparser.parse_statements(SB,SE1,R),
	SE=[token(braces,[A,lmnparser.parse_statements(M)],MPos)|SE1].
Parse_Statements3@@
P=lmnparser.parse_statements(S,S,[token(dot,[],DPos)|R]):-
	P=lmnparser.parse_error(empty_dot(DPos),R).
Parse_Statements4@@
P=lmnparser.parse_statements(SB,SE,[token($tkind,TA,TPos)|R]),dot_t($dot):- $tkind \= $dot|
	P=lmnparser.parse_statements(SB,SE1,R),SE=[token($tkind,TA,TPos)|SE1],dot_t($dot).
Parse_Statements5@@
P=lmnparser.parse_statements(SB,SE,[]):-
	P=[lmnparser.parse_statement(SB)],SE=[].

// 小括弧、大括弧による切り分け

Parse_Parens_Brackets1@@
P=lmnparser.parse_parens_brackets([token(lparen,[],LPPos)|R]):-
	P=lmnparser.parse_parens_brackets(lmnparser.parse_parens_in(LPPos,R)).
Parse_Parens_Brackets2@@
P=lmnparser.parse_parens_brackets([token(lbracket,[],LBPos)|R]):-
	P=lmnparser.parse_parens_brackets(lmnparser.parse_brackets_in(LBPos,R)).
Parse_Parens_Brackets3@@
P=lmnparser.parse_parens_brackets([token(rparen,[],RPPos)|R]):-
	P=lmnparser.parse_error(unopened_parens(RPPos),R).
Parse_Parens_Brackets4@@
P=lmnparser.parse_parens_brackets([token(rbracket,[],RBPos)|R]):-
	P=lmnparser.parse_error(unopened_brackets(RBPos),R).
Parse_Parens_Brackets5@@
P=lmnparser.parse_parens_brackets([token($tkind,TA,TPos)|R]),
	lparen_t($lparen),rparen_t($rparen),lbracket_t($lbracket),rbracket_t($rbracket)
	:- $tkind\=$lparen, $tkind\=$rparen, $tkind\=$lbracket, $tkind\=$rbracket |
	P=[token($tkind,TA,TPos)|lmnparser.parse_parens_brackets(R)],
	lparen_t($lparen),rparen_t($rparen),lbracket_t($lbracket),rbracket_t($rbracket).
Parse_Parens_Brackets6@@
P=lmnparser.parse_parens_brackets([]):- P=[].

Parse_Parens_In@@
P=lmnparser.parse_parens_in(Pos,Tokens):-
	P=lmnparser.parse_parens_in(Pos,M,M,Tokens).
Parse_Parens_In1@@
P=lmnparser.parse_parens_in(Pos,MB,ME,[token(rparen,[],_GRPPos)|R]):-
	P=[token(parens,[MB],Pos)|R],ME=[].
Parse_Parens_In2@@
P=lmnparser.parse_parens_in(Pos,MB,ME,[token(lparen,[],LPPos)|R]):-
	P=lmnparser.parse_parens_in(Pos,MB,ME,
		lmnparser.parse_parens_in(LPPos,R)).
Parse_Parens_In3@@
P=lmnparser.parse_parens_in(Pos,MB,ME,[token(lbracket,[],LBPos)|R]):-
	P=lmnparser.parse_parens_in(Pos,MB,ME,
		lmnparser.parse_brakets_in(LBPos,R)).
Parse_Parens_In4@@
P=lmnparser.parse_parens_in(_GPos,MB,ME,[token(rbracket,[],RBPos)|R]):-
	P=lmnparser.parse_error(invalid_rbracket(RBPos),MB),ME=R.
Parse_Parens_In5@@
P=lmnparser.parse_parens_in(Pos,MB,ME,[token($tkind,TA,TPos)|R]),
	lparen_t($lparen),rparen_t($rparen),lbracket_t($lbracket),rbracket_t($rbracket):-
	$rbracket\=$tkind,$lbracket\=$tkind, $lparen\=$tkind, $rparen\=$tkind|
	P=lmnparser.parse_parens_in(Pos,MB,ME1,R),ME=[token($tkind,TA,TPos)|ME1],
	lparen_t($lparen),rparen_t($rparen),lbracket_t($lbracket),rbracket_t($rbracket).
Parse_Parens_In6@@
P=lmnparser.parse_parens_in(Pos,MB,ME,[]):-
	P=lmnparser.parse_error(unclosed_parens(Pos),MB),ME=[].

Parse_Brackets_In@@
P=lmnparser.parse_brackets_in(Pos,Tokens):-
	P=lmnparser.parse_brackets_in(Pos,M,M,Tokens).
Parse_Brackets_In1@@
P=lmnparser.parse_brackets_in(Pos,MB,ME,[token(rbracket,[],_GRPPos)|R]):-
	P=[token(brackets,[MB],Pos)|R],ME=[].
Parse_Brackets_In2@@
P=lmnparser.parse_brackets_in(Pos,MB,ME,[token(lbracket,[],LBPos)|R]):-
	P=lmnparser.parse_brackets_in(Pos,MB,ME,
		lmnparser.parse_brackets_in(LBPos,R)).
Parse_Brackets_In3@@
P=lmnparser.parse_brackets_in(Pos,MB,ME,[token(lparen,[],LPPos)|R]):-
	P=lmnparser.parse_brackets_in(Pos,MB,ME,
		lmnparser.parse_parens_in(LPPos,R)).
Parse_Brackets_In4@@
P=lmnparser.parse_brackets_in(_GPos,MB,ME,[token(rparen,[],RPPos)|R]):-
	P=lmnparser.parse_error(invalid_rparen(RPPos),MB),ME=R.
Parse_Brackets_In5@@
P=lmnparser.parse_brackets_in(Pos,MB,ME,[token($tkind,TA,TPos)|R]),
	lparen_t($lparen),rparen_t($rparen),lbracket_t($lbracket),rbracket_t($rbracket):-
	$rbracket\=$tkind,$lbracket\=$tkind, $lparen\=$tkind, $rparen\=$tkind|
	P=lmnparser.parse_brackets_in(Pos,MB,ME1,R),ME=[token($tkind,TA,TPos)|ME1],
	lparen_t($lparen),rparen_t($rparen),lbracket_t($lbracket),rbracket_t($rbracket).
Parse_Brackets_In6@@
P=lmnparser.parse_brackets_in(Pos,MB,ME,[]):-
	P=lmnparser.parse_error(unclosed_brackets(Pos),MB),ME=[].

// [ ], ( ) にプロセス文脈名、アトム名をくっつける

Parse_Attach_Atom1@@
P=lmnparser.parse_attach_names([token(funcname,[F],APos),token(parens,[P],_GPPos)|R]):-
	P=[token(arityatom,[F,P],APos)|lmnparser.parse_attach_names(R)].
Parse_Attach_Atom2@@
P=lmnparser.parse_attach_names([token(funcname,[F],APos),token($tkind,TA,TPos)|R]),
	parens_t($parens):-$tkind\=$parens|
	P=[token(funcname,[F],APos),token($tkind,TA,TPos)|lmnparser.parse_attach_names(R)].

Parse_Attach_Proccxt1@@
P=lmnparser.parse_attach_names([token(proccxtname,[PN],PPos),token(brackets,[B],_GPPos)|R]):-
	P=[token(proccxt_brackets,[PN,B],PPos)|lmnparser.parse_attach_names(R)].
Parse_Attach_Proccxt2@@
P=lmnparser.parse_attach_names([token(proccxtname,[PN],PPos),token($tkind,TA,TPos)|R]),
	parens_t($brackets):-$tkind\=$brackets|
	P=[token(proccxtname,[PN],PPos),token($tkind,TA,TPos)|lmnparser.parse_attach_names(R)].

}.