// LMNtalソース用トップダウン字句解析器 Ver.2 by kudo
// SINCE 2006/06/20

{
module(lmnlexer).

%lmnlexer.use :- lmnlexer.use_guard.

% <lmnlexer.lex/2, 0> : +string list
% <lmnlexer.lex/4, 2> : +string list
% <lmnlexer.lex/2, 1> : -token list
% <lmnlexer.lex/4, 3> : -token list
% <lmnlexer.lex/4, 0> : +int
% <lmnlexer.lex/4, 1> : +int
R=lmnlexer.lex(Tokens) :- R=lmnlexer.lex(0,0,Tokens), lmnlexer.use_guard.

%文字列、数値、小数部分の後処理。ひっくり返してそれぞれの型に戻す
% <lmnlexer.rev_str/2, 0> : +string list
% <lmnlexer.rev_str/2, 1> : -string
% <lmnlexer.rev_num/2, 0> : +string list
% <lmnlexer.rev_num/2, 1> : -int
% <lmnlexer.rev_float, 0> : +string list
% <lmnlexer.rev_float, 1> : -float
R=lmnlexer.rev_str([S|SR]):-R=string.concat(lmnlexer.rev_str(SR),S).
R=lmnlexer.rev_str([]) :- R="".
R=lmnlexer.rev_num(NS) :- R=string.int_of_str(lmnlexer.rev_str(NS)).
R=lmnlexer.rev_float(N,F):-R=lmnlexer.rev_float(list.append(N,["."|F])).
R=lmnlexer.rev_float(FS):-R=string.float_of_str(lmnlexer.rev_str(FS)).
% 今のところ \ や : は単独でtokenにはならないのでエラー
T=token(backslash,Pos):-T=error_token(free_backslash,Pos).
T=token(colon,Pos):-T=error_token(free_colon,Pos).

% コメント外
L=lmnlexer.lex(_IL,_IC,["{"|R]):- L=[token(lbrace,pos(_IL,_IC))|lmnlexer.lex(_IL,_IC+1,R)]. % lbrace/1 -> 1 (token_symbol)
L=lmnlexer.lex(_IL,_IC,["("|R]):- L=[token(lparen,pos(_IL,_IC))|lmnlexer.lex(_IL,_IC+1,R)]. % rparen/1 -> 1 (token_symbol)
L=lmnlexer.lex(_IL,_IC,[")"|R]):- L=[token(rparen,pos(_IL,_IC))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex(_IL,_IC,["]"|R]):- L=[token(rbracket,pos(_IL,_IC))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex(_IL,_IC,["|"|R]):- L=[token(bar,pos(_IL,_IC))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex(_IL,_IC,[" "|R]):- L=lmnlexer.lex(_IL,_IC+1,R).
L=lmnlexer.lex(_IL,_IC,["\\n"|R]):- L=lmnlexer.lex(_IL+1,0,R).
L=lmnlexer.lex(_IL,_IC,[","|R]):- L=[token(comma,pos(_IL,_IC))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex(_IL,_IC,["$"|R]):- L=[token(dollar,pos(_IL,_IC))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex(_IL,_IC,["."|R]):- L=[token(dot,pos(_IL,_IC))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex(_IL,_IC,[]) :- L=[].

% atom name, link name, pathed name, num, float
L=lmnlexer.lex(_IL,_IC,[$c|R]):-custom_i_lowerletter($c)|
	L=lmnlexer.lex_atomname(pos(_IL,_IC),[$c],_IL,_IC+1,R).
L=lmnlexer.lex(_IL,_IC,[$c|R]):-custom_i_upperletter($c)|
	L=lmnlexer.lex_linkname(pos(_IL,_IC),[$c],_IL,_IC+1,R).
L=lmnlexer.lex(_IL,_IC,["_"|R]):-L=lmnlexer.lex_linkname(pos(_IL,_IC),["_"],_IL,_IC+1,R).
L=lmnlexer.lex(_IL,_IC,[$c|R]):-custom_i_digitletter($c)|
	L=lmnlexer.lex_num(pos(_IL,_IC),[$c],_IL,_IC+1,R).

% [a-z][a-zA-Z_1-9]*
L=lmnlexer.lex_atomname(Pos,A,_IL,_IC,[$c|R]):-custom_i_letter($c)|
	L=lmnlexer.lex_atomname(Pos,[$c|A],_IL,_IC+1,R).
L=lmnlexer.lex_atomname(Pos,A,_IL,_IC,["_"|R]):-
	L=lmnlexer.lex_atomname(Pos,["_"|A],_IL,_IC+1,R).
L=lmnlexer.lex_atomname(Pos,A,_IL,_IC,["."|R]):-
	L=lmnlexer.lex_pathedname(Pos,A,pos(_IL,_IC),[],_IL,_IC+1,R).
L=lmnlexer.lex_atomname(Pos,A,_IL,_IC,[$c|R]):-custom_i_unletter($c)|
	L=[token(atomname,[lmnlexer.rev_str(A)],Pos)|lmnlexer.lex(_IL,_IC,[$c|R])].
L=lmnlexer.lex_atomname(Pos,A,_IL,_IC,[]):-L=[token(atomname,[lmnlexer.rev_str(A)],Pos)].

% [a-z][a-zA-Z_1-9]'.'[a-z][a-zA-Z_1-9]
L=lmnlexer.lex_pathedname(Pos,P,DPos,A,_IL,_IC,[$c|R]):-custom_i_letter($c)|
	L=lmnlexer.lex_pathedname(Pos,P,DPos,[$c|A],_IL,_IC+1,R).
L=lmnlexer.lex_pathedname(Pos,P,DPos,A,_IL,_IC,["_"|R]):-
	L=lmnlexer.lex_pathedname(Pos,P,DPos,["_"|A],_IL,_IC+1,R).
L=lmnlexer.lex_pathedname(Pos,P,_GDPos,[A|AR],_IL,_IC,[$c|R]):-custom_i_unletter($c)|
	L=[token(pathedname,[lmnlexer.rev_str(P),lmnlexer.rev_str([A|AR])],Pos)|lmnlexer.lex(_IL,_IC,[$c|R])].
L=lmnlexer.lex_pathedname(Pos,P,_GDPos,[A|AR],_IL,_IC,[]):-
	L=[token(pathedname,[lmnlexer.rev_str(P),lmnlexer.rev_str([A|AR])],Pos)].
L=lmnlexer.lex_pathedname(Pos,P,DPos,[],_IL,_IC,[$c|R]):-custom_i_unletter($c)|
	L=[token(atomname,[lmnlexer.rev_str(P)],Pos),token(dot,DPos)|lmnlexer.lex(_IL,_IC,[$c|R])].
L=lmnlexer.lex_pathedname(Pos,P,DPos,[],_IL,_IC,[]):-
	L=[token(atomname,[lmnlexer.rev_str(P)],Pos),token(dot,DPos)].

% [A-Z][a-zA-Z_1-9]
L=lmnlexer.lex_linkname(Pos,LN,_IL,_IC,[$c|R]):- custom_i_letter($c)|
	L=lmnlexer.lex_linkname(Pos,[$c|LN],_IL,_IC+1,R).
L=lmnlexer.lex_linkname(Pos,LN,_IL,_IC,["_"|R]):-
	L=lmnlexer.lex_linkname(Pos,["_"|LN],_IL,_IC+1,R).
L=lmnlexer.lex_linkname(Pos,LN,_IL,_IC,[$c|R]) :- custom_i_unletter($c)|
	L=[token(linkname,[lmnlexer.rev_str(LN)],Pos)|lmnlexer.lex(_IL,_IC,[$c|R])].

% 数字 [1-9]+
L=lmnlexer.lex_num(Pos,N,_IL,_IC,[$c|R]):-custom_i_digitletter($c)|
	L=lmnlexer.lex_num(Pos,[$c|N],_IL,_IC+1,R).
L=lmnlexer.lex_num(Pos,N,_IL,_IC,["."|R]) :-
	L=lmnlexer.lex_float(Pos,N,pos(_IL,_IC),[],_IL,_IC+1,R).
L=lmnlexer.lex_num(Pos,N,_IL,_IC,[$c|R]):-custom_i_undigitletter($c)|
	L=[token(num,[lmnlexer.rev_num(N)],Pos)|lmnlexer.lex(_IL,_IC,[$c|R])].
L=lmnlexer.lex_num(Pos,N,_IL,_IC,[]):-
	L=[token(num,[lmnlexer.rev_num(N)],Pos)].

% 浮動小数点数 [1-9]+'.'[1-9]*
L=lmnlexer.lex_float(Pos,N,DPos,F,_IL,_IC,[$c|R]):-custom_i_digitletter($c)|
	L=lmnlexer.lex_float(Pos,N,DPos,[$c|F],_IL,_IC+1,R).
L=lmnlexer.lex_float(Pos,N,_GDPos,[F|FR],_IL,_IC,[$c|R]):-custom_i_undigitletter($c)|
	L=[token(floatnum,[lmnlexer.rev_float(N,[F|FR])],Pos)|lmnlexer.lex(_IL,_IC,[$c|R])].
L=lmnlexer.lex_float(Pos,N,_GDPos,[F|FR],_IL,_IC,[]):-
	L=[token(floatnum,[lmnlexer.rev_float(N,[F|FR])],Pos)].
L=lmnlexer.lex_float(Pos,N,DPos,[],_IL,_IC,[$c|R]):-custom_i_undigitletter($c)|
	L=[token(num,[lmnlexer.rev_num(N)],Pos),token(dot,DPos)|lmnlexer.lex(_IL,_IC,[$c|R])].
L=lmnlexer.lex_float(Pos,N,DPos,[],_IL,_IC,[]):-
	L=[token(num,[lmnlexer.rev_num(N)],Pos),token(dot,DPos)].

% 文字列 ( '"'[^'"']*'"' <- ちょっと違う)
L=lmnlexer.lex(_IL,_IC,["\""|R]):-L=lmnlexer.lex_dqstr(pos(_IL,_IC),[],_IL,_IC+1,R).
L=lmnlexer.lex_dqstr(Pos,S,_IL,_IC,["\""|R]):-
	L=[token(dq_string,[lmnlexer.rev_str(S)],Pos)|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex_dqstr(Pos,S,_IL,_IC,["\\"|R]):-
	L=lmnlexer.lex_dqstr_esc(Pos,S,_IL,_IC+1,R).
L=lmnlexer.lex_dqstr(Pos,S,_IL,_IC,["\\n"|R]):-
	L=lmnlexer.lex_dqstr(Pos,["n","\\"|S],_IL+1,0,R).
L=lmnlexer.lex_dqstr(Pos,S,_IL,_IC,[$c|R]):- $c\="\\", $c\="\""|
	L=lmnlexer.lex_dqstr(Pos,[$c|S],_IL,_IC+1,R).
L=lmnlexer.lex_dqstr(Pos,_GS,_IL,_IC,[]):- L=[error_token(unter_dqstr,Pos)].
L=lmnlexer.lex_dqstr_esc(Pos,S,_IL,_IC,[$c|R]):- $c\="\\", $c\="\""|
	L=lmnlexer.lex_dqstr(Pos,["\\"|S],_IL,_IC,[$c|R]).
L=lmnlexer.lex_dqstr_esc(Pos,S,_IL,_IC,["\\"|R]):-
	L=lmnlexer.lex_dqstr(Pos,["\\"|S],_IL,_IC+1,R).
L=lmnlexer.lex_dqstr_esc(Pos,S,_IL,_IC,["\""|R]):-
	L=lmnlexer.lex_dqstr(Pos,["\""|S],_IL,_IC+1,R).
L=lmnlexer.lex_dqstr_esc(Pos,_GS,_IL,_IC,[]):-L=[error_token(unter_dqstr,Pos)].

% symbol ( '\''[^'\'']*'\'' <- ちょっと違う)
L=lmnlexer.lex(_IL,_IC,["'"|R]):-L=lmnlexer.lex_sqstr(pos(_IL,_IC),[],_IL,_IC+1,R).
L=lmnlexer.lex_sqstr(Pos,S,_IL,_IC,["'"|R]):-
	L=[token(sq_string,[lmnlexer.rev_str(S)],Pos)|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex_sqstr(Pos,S,_IL,_IC,["\\"|R]):-
	L=lmnlexer.lex_sqstr_esc(Pos,S,_IL,_IC+1,R).
L=lmnlexer.lex_sqstr(Pos,_GS,_IL,_IC,["\\n"|R]):-
	L=[error_token(unter_sqstr,Pos)|lmnlexer.lex(_IL+1,0,R)].
L=lmnlexer.lex_sqstr(Pos,S,_IL,_IC,[$c|R]):- $c\="\\", $c\="'"|
	L=lmnlexer.lex_sqstr(Pos,[$c|S],_IL,_IC+1,R).
L=lmnlexer.lex_sqstr(Pos,_GS,_IL,_IC,[]):- L=[error_token(unter_sqstr,Pos)].
L=lmnlexer.lex_sqstr_esc(Pos,S,_IL,_IC,[$c|R]):- $c\="\\", $c\="'"|
	L=lmnlexer.lex_sqstr(Pos,["\\"|S],_IL,_IC,[$c|R]).
L=lmnlexer.lex_sqstr_esc(Pos,S,_IL,_IC,["\\"|R]):-
	L=lmnlexer.lex_sqstr(Pos,["\\"|S],_IL,_IC+1,R).
L=lmnlexer.lex_sqstr_esc(Pos,S,_IL,_IC,["'"|R]):-
	L=lmnlexer.lex_sqstr(Pos,["'"|S],_IL,_IC+1,R).
L=lmnlexer.lex_sqstr_esc(Pos,_GS,_IL,_IC,[]):-L=[error_token(unter_sqstr,Pos)].

% = == =< =:= =\= =:=. =\=.
L=lmnlexer.lex(_IL,_IC,["="|R]):-L=lmnlexer.lex_equal(_IL,_IC+1,R).
L=lmnlexer.lex_equal(_IL,_IC,["="|R]):-
	L=[token(equal_equal,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex_equal(_IL,_IC,["<"|R]):-L=lmnlexer.lex_les_equal(_IL,_IC+1,R).
L=lmnlexer.lex_equal(_IL,_IC,[":"|R]):-L=lmnlexer.lex_equal_colon(_IL,_IC+1,R).
L=lmnlexer.lex_equal(_IL,_IC,["\\"|R]):-
	L=lmnlexer.lex_equal_backslash(_IL,_IC+1,R).
L=lmnlexer.lex_equal(_IL,_IC,[$c|R]):-$c\="=",$c\="<",$c\=":",$c\="\\"|
	L=[token(equal,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC,[$c|R])].
L=lmnlexer.lex_les_equal(_IL,_IC,["."|R]):-
	L=[token(leq_dot,pos(_IL,_IC-2))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex_les_equal(_IL,_IC,[$c|R]):-$c\="."|
	L=[token(leq,pos(_IL,_IC-2))|lmnlexer.lex(_IL,_IC,[$c|R])].
L=lmnlexer.lex_equal_colon(_IL,_IC,["="|R]):-
	L=lmnlexer.lex_equal_colon_equal(_IL,_IC+1,R).
L=lmnlexer.lex_equal_colon(_IL,_IC,[$c|R]):-$c\="="|
	L=[token(equal,pos(_IL,_IC-2)),token(colon,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC,[$c|R])].
L=lmnlexer.lex_equal_colon_equal(_IL,_IC,["."|R]):-
	L=[token(equal_colon_equal_dot,pos(_IL,_IC-3))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex_equal_colon_equal(_IL,_IC,[$c|R]):-$c\="."|
	L=[token(equal_colon_equal_dot,pos(_IL,_IC-3))|lmnlexer.lex(_IL,_IC,[$c|R])].
L=lmnlexer.lex_equal_backslash(_IL,_IC,["="|R]):-
	L=lmnlexer.lex_equal_backslash_equal(_IL,_IC+1,R).
L=lmnlexer.lex_equal_backslash(_IL,_IC,[$c|R]):-$c\="=" |
	L=[token(equal,pos(_IL,_IC-2)),token(backslash,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC,[$c|R])].
L=lmnlexer.lex_equal_backslash_equal(_IL,_IC,["."|R]):-
	L=[token(equal_backslash_equal_dot,pos(_IL,_IC-3))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex_equal_backslash_equal(_IL,_IC,[$c|R]):-$c\="."|
	L=[token(equal_backslash_equal,pos(_IL,_IC-3))|lmnlexer.lex(_IL,_IC,[$c|R])].

% < <.
L=lmnlexer.lex(_IL,_IC,["<"|R]):-L=lmnlexer.lex_les(_IL,_IC+1,R).
L=lmnlexer.lex_les(_IL,_IC,["."|R]):-
	L=[token(les_dot,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex_les(_IL,_IC,[$c|R]):-$c\="."|
	L=[token(les,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC,[$c|R])].

% >= >. >=. >
L=lmnlexer.lex(_IL,_IC,[">"|R]):-L=lmnlexer.lex_grt(_IL,_IC+1,R).
L=lmnlexer.lex_grt(_IL,_IC,["="|R]):-L=lmnlexer.lex_grt_equal(_IL,_IC+1,R).
L=lmnlexer.lex_grt_equal(_IL,_IC,["."|R]):-L=[token(geq_dot,pos(_IL,_IC-2))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex_grt_equal(_IL,_IC,[$c|R]):-$c\="."|L=[token(geq,pos(_IL,_IC-2))|lmnlexer.lex(_IL,_IC,[$c|R])].
L=lmnlexer.lex_grt(_IL,_IC,["."|R]):-L=[token(grt_dot,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex_grt(_IL,_IC,[$c|R]):-$c\="="|L=[token(grt,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC,[$c|R])].

% [ [:...:]
L=lmnlexer.lex(_IL,_IC,["["|R]):-L=lmnlexer.lex_lbracket(_IL,_IC+1,R).
L=lmnlexer.lex_lbracket(_IL,_IC,[":"|R]):-
	L=lmnlexer.lex_bracket_string(pos(_IL,_IC-1),[],_IL,_IC+1,R).
L=lmnlexer.lex_bracket_string(Pos,BS,_IL,_IC,[":"|R]):-
	L=lmnlexer.lex_bracket_string_colon(Pos,BS,_IL,_IC+1,R).
L=lmnlexer.lex_bracket_string(Pos,BS,_IL,_IC,["\\n"|R]):-
	L=lmnlexer.lex_bracket_string_colon(Pos,["n","\\"|BS],_IL+1,0,R).
L=lmnlexer.lex_bracket_string_colon(Pos,BS,_IL,_IC,["]"|R]):-
	L=[token(bracket_string,[lmnlexer.rev_str(BS)],Pos)|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex_bracket_string_colon(Pos,BS,_IL,_IC,[$c|R]):-$c\="]"|
	L=lmnlexer.lex_bracket_string(Pos,[":"|BS],_IL,_IC,[$c|R]).
L=lmnlexer.lex_bracket_string(Pos,BS,_IL,_IC,[$c|R]):-$c\=":",$c\="\\n"|
	L=lmnlexer.lex_bracket_string(Pos,[$c|BS],_IL,_IC+1,R).
L=lmnlexer.lex_lbracket(_IL,_IC,[$c|R]):-$c\=":"|
	L=[token(lbracket,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC,[$c|R])].

% \+ \=
L=lmnlexer.lex(_IL,_IC,["\\"|R]):-L=lmnlexer.lex_backslash(_IL,_IC+1,R).
L=lmnlexer.lex_backslash(_IL,_IC,["+"|R]):-
	L=[token(backslash_plus,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex_backslash(_IL,_IC,["="|R]):-
	L=[token(backslash_equal,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex_backslash(_IL,_IC,[$c|R]):-$c\="+",$c\="="|
	L=[token(backslash,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC,[$c|R])].

% @@ @
L=lmnlexer.lex(_IL,_IC,["@"|R]):-L=lmnlexer.lex_at(_IL,_IC+1,R).
L=lmnlexer.lex_at(_IL,_IC,["@"|R]):-
	L=[token(at_at,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex_at(_IL,_IC,[$c|R]):-$c\="@"|
	L=[token(at,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC,[$c|R])].

% : :-
L=lmnlexer.lex(_IL,_IC,[":"|R]):-L=lmnlexer.lex_colon(_IL,_IC+1,R).
L=lmnlexer.lex_colon(_IL,_IC,["-"|R]):-
	L=[token(colon_minus,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex_colon(_IL,_IC,[$c|R]):-$c\="-"|
	L=[token(colon,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC,[$c|R])].

% } }/ }@ }/@ }_ }_/ }_@ }_/@
L=lmnlexer.lex(_IL,_IC,["}"|R]):-L=lmnlexer.lex_rbrace(_IL,_IC+1,R).
L=lmnlexer.lex_rbrace(_IL,_IC,["_"|R]):-L=lmnlexer.lex_rbrace_underbar(_IL,_IC+1,R).
L=lmnlexer.lex_rbrace(_IL,_IC,["/"|R]):-L=lmnlexer.lex_rbrace_slash(_IL,_IC+1,R).
L=lmnlexer.lex_rbrace(_IL,_IC,["@"|R]):-
	L=[token(rbrace,[at],pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex_rbrace(_IL,_IC,[$c|R]):-$c\="/",$c\="@",$c\="_"|
	L=[token(rbrace,[],pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC,[$c|R])].
L=lmnlexer.lex_rbrace_slash(_IL,_IC,["@"|R]):-
	L=[token(rbrace,[slash,at],pos(_IL,_IC-2))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex_rbrace_slash(_IL,_IC,[$c|R]):-$c\="@"|
	L=[token(rbrace,[slash],pos(_IL,_IC-2))|lmnlexer.lex(_IL,_IC,[$c|R])].
L=lmnlexer.lex_rbrace_underbar(_IL,_IC,["/"|R]):-
	L=lmnlexer.lex_rbrace_underbar_slash(_IL,_IC+1,R).
L=lmnlexer.lex_rbrace_underbar(_IL,_IC,["@"|R]):-
	L=[token(rbrace,[underbar,at],pos(_IL,_IC-2))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex_rbrace_underbar(_IL,_IC,[$c|R]):-$c\="/",$c\="@"|
	L=[token(rbrace,[underbar],pos(_IL,_IC-2))|lmnlexer.lex(_IL,_IC,[$c|R])].
L=lmnlexer.lex_rbrace_underbar_slash(_IL,_IC,["@"|R]):-
	L=[token(rbrace,[underbar,slash,at],pos(_IL,_IC-3))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex_rbrace_underbar_slash(_IL,_IC,[$c|R]):-$c\="@"|
	L=[token(rbrace,[underbar,slash],pos(_IL,_IC-3))|lmnlexer.lex(_IL,_IC,[$c|R])].

% +. +
L=lmnlexer.lex(_IL,_IC,["+"|R]):-L=lmnlexer.lex_plus(_IL,_IC+1,R).
L=lmnlexer.lex_plus(_IL,_IC,["."|R]):-
	L=[token(plus_dot,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex_plus(_IL,_IC,[$c|R]):-$c\="."|
	L=[token(plus,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC,[$c|R])].

% -. -
L=lmnlexer.lex(_IL,_IC,["-"|R]):-L=lmnlexer.lex_minus(_IL,_IC+1,R).
L=lmnlexer.lex_minus(_IL,_IC,["."|R]):-
	L=[token(minus_dot,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex_minus(_IL,_IC,[$c|R]):-$c\="."|
	L=[token(minus,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC,[$c|R])].

% *. ** *
L=lmnlexer.lex(_IL,_IC,["*"|R]):-L=lmnlexer.lex_asterisk(_IL,_IC+1,R).
L=lmnlexer.lex_asterisk(_IL,_IC,["."|R]):-
	L=[token(asterisk_dot,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex_asterisk(_IL,_IC,["*"|R]):-
	L=[token(asterisk_asterisk,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex_asterisk(_IL,_IC,[$c|R]):-$c\=".", $c\="*"|
	L=[token(asterisk,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC,[$c|R])].

% // [:/*:] /. /
L=lmnlexer.lex(_IL,_IC,["/"|R]):-L=lmnlexer.lex_slash(_IL,_IC+1,R).
L=lmnlexer.lex_slash(_IL,_IC,["/"|R]):-L=lmnlexer.lex_line_comment(_IL,_IC+1,R).
L=lmnlexer.lex_slash(_IL,_IC,["*"|R]):-L=lmnlexer.lex_oldstyle_comment(_IL,_IC+1,R).
L=lmnlexer.lex_slash(_IL,_IC,["."|R]):-
	L=[token(slash_dot,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC+1,R)].
L=lmnlexer.lex_slash(_IL,_IC,[$c|R]):-$c\="/", $c\="*", $c\="."|
	L=[token(slash,pos(_IL,_IC-1))|lmnlexer.lex(_IL,_IC,[$c|R])].

% %
L=lmnlexer.lex(_IL,_IC,["%"|R]):-L=lmnlexer.lex_line_comment(_IL,_IC,R).

% コメント内
L=lmnlexer.lex_linecomment(_IL,_IC,["\\n"|R]):-L=lmnlexer.lex(_IL+1,0,R).
//L=lmnlexer.lex_line_comment(_IL,_IC,["\r"|R]):-L=lmnlexer.lex(_IL+1,0,R).
L=lmnlexer.lex_linecomment(_IL,_IC,[]):-L=[].
L=lmnlexer.lex_linecomment(_IL,_IC,[$c|R]):-$c\="\\n" /*,$c\="\r"*/|
	L=lmnlexer.lex_linecomment(_IL,_IC+1,R).
L=lmnlexer.lex_blockcomment(_IL,_IC,["*"|R]):-
	L=lmnlexer.lex_blockcomment_asterisk(_IL,_IC+1,R).
L=lmnlexer.lex_blockcomment(_IL,_IC,["\\n"|R]):-
	L=lmnlexer.lex_blockcomment(_IL+1,0,R).
L=lmnlexer.lex_blockcomment_asterisk(_IL,_IC,["/"|R]):-
	L=lmnlexer.lex(_IL,_IC+1,R).
L=lmnlexer.lex_blockcomment_asterisk(_IL,_IC,["\\n"|R]):-
	L=lmnlexer.lex_blockcomment(_IL+1,0,R).
L=lmnlexer.lex_blockcomment_asterisk(_IL,_IC,[$c|R]):-$c\="/",$c\="\\n"|
	L=lmnlexer.lex_blockcomment(_IL,_IC+1,[$c|R]).
L=lmnlexer.lex_blockcomment(_IL,_IC,[$c|R]):- $c\="*"|
	L=lmnlexer.lex_blockcomment(_IL,_IC+1,R).

%% ガードインライン
lmnlexer.use_guard :-
[:/*inline_define*/
//#/*__UNITNAME__*/CustomGuardImpl.java
	/*__PACKAGE__*/
	import runtime.*;
	import java.util.*;
	import util.Util;
	public class /*__UNITNAME__*/CustomGuardImpl implements CustomGuard {
		public boolean run(String guardID, Membrane mem, Object obj) {
	//		System.out.println("guardID "+guardID);
			ArrayList ary = (ArrayList)obj;
	//		for(int i=0;i<ary.size();i++) {
	//			System.out.println(ary.get(i).getClass());
	//		}
	//		System.out.println("CustomGuardImpl "+ary);
			
			if(guardID.equals("lowerletter")) {
				Atom a = ((Link)ary.get(0)).getAtom();
				if(a.getFunctor() instanceof StringFunctor){
					String sv = ((StringFunctor)a.getFunctor()).stringValue();
					if(sv.length() > 1)return false;
					else{
						char c = sv.charAt(0);
						if(Character.isLowerCase(c))return true;
						else return false;
					}
				}
				else return false;
			}
			else if(guardID.equals("upperletter")) {
				Atom a = ((Link)ary.get(0)).getAtom();
				if(a.getFunctor() instanceof StringFunctor){
					String sv = ((StringFunctor)a.getFunctor()).stringValue();
					if(sv.length() > 1)return false;
					else{
						char c = sv.charAt(0);
						if(Character.isUpperCase(c))return true;
						else return false;
					}
				}
				else return false;
			}
			else if(guardID.equals("digitletter")) {
				Atom a = ((Link)ary.get(0)).getAtom();
				if(a.getFunctor() instanceof StringFunctor){
					String sv = ((StringFunctor)a.getFunctor()).stringValue();
					if(sv.length() > 1)return false;
					else{
						char c = sv.charAt(0);
						if(Character.isDigit(c))return true;
						else return false;
					}
				}
				else return false;
			}
			else if(guardID.equals("undigitletter")) {
				Atom a = ((Link)ary.get(0)).getAtom();
				if(a.getFunctor() instanceof StringFunctor){
					String sv = ((StringFunctor)a.getFunctor()).stringValue();
					if(sv.length() > 1)return true;
					else{
						char c = sv.charAt(0);
						if(Character.isDigit(c))return false;
						else return true;
					}
				}
				else return false; //?
			}
			else if(guardID.equals("letter")) {
				Atom a = ((Link)ary.get(0)).getAtom();
				if(a.getFunctor() instanceof StringFunctor){
					String sv = ((StringFunctor)a.getFunctor()).stringValue();
					if(sv.length() > 1)return false;
					else{
						char c = sv.charAt(0);
						if(Character.isLowerCase(c) || Character.isUpperCase(c) || Character.isDigit(c))return true;
						else return false;
					}
				}
				else return false;
			}
			else if(guardID.equals("unletter")) {
				Atom a = ((Link)ary.get(0)).getAtom();
				if(a.getFunctor() instanceof StringFunctor){
					String sv = ((StringFunctor)a.getFunctor()).stringValue();
					if(sv.length() > 1)return true;
					else{
						char c = sv.charAt(0);
						if(Character.isLowerCase(c) || Character.isUpperCase(c) || Character.isDigit(c))return false;
						else return true;
					}
				}
				else return false;
			}
			return false;
		}
	}
//#
:].
}.
