 typedef{
   inttree = datatype(
     r(+inttree,'-'),        // root
     ct(+color,+node,'-')    // colored tree node
   ),
   node = datatype(
     t(+int,+inttree,+inttree,'-'),  // tree node
     n('-')                          // nil
   ).
   color = datatype(
     black('-'),
     red('-')
   ).
 }.
R=empty :- R=r(ct(black,n)).
R=insert(I,r(T)) :- R=inserting(insert(I,T)).
R=insert($i,ct(C,t($n,T1,T2))) :- $i < $n|R=ct(C,t($n,insert($i,T1),T2)).
R=insert($i,ct(C,t($n,T1,T2))) :- $i > $n|R=ct(C,t($n,T1,insert($i,T2))).
R=insert($i,ct(C,t($n,T1,T2))) :- $i=:=$n|R=ct(C,t($n,T1,T2)).
R=insert(I,ct(black,n)) :- R=fix(ct(red,t(I,ct(black,n),ct(black,n)))).
R=inserting(fix(ct(red,T))):-R=r(ct(black,T)).
R=inserting(fixed(T)):-R=r(T).
R=ct(C,t(I,fixed(T1),T2)):-R=fixed(ct(C,t(I,T1,T2))).
R=ct(C,t(I,T1,fixed(T2))):-R=fixed(ct(C,t(I,T1,T2))).
R=ct(black,t(PI,fix(ct(red,TT)),TP)):-R=fixed(ct(black,t(PI,ct(red,TT),TP))).
R=ct(black,t(PI,TP,fix(ct(red,TT)))):-R=fixed(ct(black,t(PI,TP,ct(red,TT)))).
R=ct(black,t(GI,ct(red,t(PI,fix(ct(red,TT)),TP)),ct(red,U))):-R=fix(ct(red,t(GI,ct(black,t(PI,ct(red,TT),TP)),ct(black,U)))).
R=ct(black,t(GI,ct(red,t(PI,TP,fix(ct(red,TT)))),ct(red,U))):-R=fix(ct(red,t(GI,ct(black,t(PI,TP,ct(red,TT))),ct(black,U)))).
R=ct(black,t(GI,ct(red,U),ct(red,t(PI,fix(ct(red,TT)),TP)))):-R=fix(ct(red,t(GI,ct(black,U),ct(black,t(PI,ct(red,TT),TP))))).
R=ct(black,t(GI,ct(red,U),ct(red,t(PI,TP,fix(ct(red,TT)))))):-R=fix(ct(red,t(GI,ct(black,U),ct(black,t(PI,TP,ct(red,TT)))))).
R=ct(black,t(GI,ct(red,t(PI,TP,fix(ct(red,t(TI,T1,T2))))),ct(black,U))):-R=fixed(ct(black,t(GI,ct(red,t(TI,fix(ct(red,t(PI,TP,T1))),T2)),ct(black,U)))).
R=ct(black,t(GI,ct(black,U),ct(red,t(PI,fix(ct(red,t(TI,T1,T2))),TP)))):-R=fixed(ct(black,t(GI,ct(black,U),ct(red,t(TI,T1,fix(ct(red,t(PI,T2,TP)))))))).
R=ct(black,t(GI,ct(red,t(PI,fix(ct(red,TT)),TP)),ct(black,U))):-R=fixed(ct(black,t(PI,ct(red,TT),ct(red,t(GI,TP,ct(black,U)))))).
R=ct(black,t(GI,ct(black,U),ct(red,t(PI,TP,fix(ct(red,TT)))))):-R=fixed(ct(black,t(PI,ct(red,t(GI,ct(black,U),TP)),ct(red,TT)))).
R=tolist(ct($c,t(TI,T1,T2))):- unary($c)|R=append(tolist(T1),[TI|tolist(T2)]).
R=tolist(ct($c,n)):- unary($c)|R=[].
R=tolist(r(T)):-R=tolist(T).
R=append([C|L1],L2):-R=[C|append(L1,L2)].
R=append([],L2):-R=L2.
insert(1,empty,T1),insert(3,   T1,T2),insert(5,   T2,T3),insert(7,   T3,T4),insert(9,   T4,T5),insert(2,   T5,T6),insert(4,   T6,T7),insert(6,   T7,T8),insert(8,   T8,Tree). ret=tolist(Tree).