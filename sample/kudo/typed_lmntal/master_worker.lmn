/** Master-Worker Pattern */

// master
master{
    send(T1, W1), task{pow(2,4), tr(T1)}.
    send(T2, W2), task{pow(3,2), tr(T2)}.
    send(T3, W3), task{pow(5,1), tr(T3)}.
}.
worker(W1),worker(W2),worker(W3).

// worker
worker(W) :-
worker{ task{ pow($n,$e),$t } :- int($n),int($e)|
        task{$t}, do(pow($n,$e)).
        
        R=pow(N, $e):-$e=:=1                 |R=N.
        R=pow($n,$e):-$e > 1,int($n),$e1=$e-1|R=$n*pow($n,$e1).
        do($n), task{$t}, wr(W):-int($n)| return(W), task{$t,done($n)}.
        wr(W). }.

// send
master{ send(T,W), task{$t[T]}, $m }, worker{ $w[W], @w } :-
  master{ $m }, worker{ task{$t[R] }, $w[R], @w }.

// return
worker{ task{$t,tr(W)}, return(W), $w, @w }, master{ $m }:-
  master{$m, task{$t} }, worker{$w, @w}.
