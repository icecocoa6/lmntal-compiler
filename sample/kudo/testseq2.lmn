%%samples

%% value evaluated to self
% integer value
R=do(I):-int(I)|R=done(I).
% boolean value
R=do(true):-R=done(true).
R=do(false):-R=done(false).

% arithmetic operation
integer.use.
R=do(id(X)):-R=done(X).
R=do(iadd(X,Y)):-R=iadd(do(X),do(Y)).
R=iadd(done(X),done(Y)):-R=done(X+Y).
R=do(isub(X,Y)):-R=isub(do(X),do(Y)).
R=isub(done(X),done(Y)):-R=done(X-Y).
R=do(imul(X,Y)):-R=imul(do(X),do(Y)).
R=imul(done(X),done(Y)):-R=done(X*Y).
R=do(igt(X,Y)):-R=igt(do(X),do(Y)).
R=igt(done(X),done(Y)):-R=done(X>Y).
R=do(ieq(X,Y)):-R=ieq(do(X),do(Y)).
R=ieq(done(X),done(Y)):-R=done(X==Y).

% factorial function
R=do(factorial(N)):- ground(N)|
R=do(if(igt(N,0),imul(factorial(isub(N,1)),N),1)).

%% list proccessing
% list value
R=do(cons(CAR,CDR)):-R=cons(do(CAR),do(CDR)).
R=cons(done(CAR),done(CDR)):-R=done(cons(CAR,CDR)).
R=do(nil):-R=done(nil).
% empty test
R=do(is_empty(E)):-R=is_empty(do(E)).
R=is_empty(done(cons(CAR,CDR))):-R=done(false), kill(CAR),kill(CDR).
R=is_empty(done(nil)):-R=done(true).
% car
R=do(car(C)):-R=car(do(C)).
R=car(done(cons(CAR,CDR))):-R=done(CAR),kill(CDR).
R=car(done(nil)):-R=error.
% cdr
R=do(cdr(C)):-R=cdr(do(C)).
R=cdr(done(cons(CAR,CDR))):-R=done(CDR),kill(CAR).
R=cdr(done(nil)):-R=error.

% list length
R=do(length(L)):-R=length(do(L)).
R=length(done(L)):-ground(L)|
R=do(if(is_empty(L),0,iadd(1,length(cdr(L))))).

% integer list mem test
R=do(mem(V,L)):-R=mem(do(V),do(L)).
R=mem(done(V),done(L)):-int(V),ground(L)|
R=do(if(is_empty(L),false,
	if(ieq(car(L),V),true,mem(V,cdr(L))))).

% print
io.use.
R=do(pr(S)):-R=print(S).


%test
r1=do(factorial(3)).
r2=do(length(cons(1,cons(2,cons(3,nil))))).
r3=do(mem(4,cons(1,cons(2,cons(3,cons(4,nil)))))).
r4=do([pr("a"),pr("b"),mem([pr("c"),3],[pr("d"),cons(1,cons(2,cons(3,nil)))])]).

%%if
R=do(if(TEST,THEN,ELSE)):-R=if(do(TEST),THEN,ELSE).
R=if(done(true),THEN,ELSE):-R=do(THEN),kill(ELSE).
R=if(done(false),THEN,ELSE):-R=do(ELSE),kill(THEN).

kill(G):-ground(G)|().
%% do sequentially
L=do([C|R]):-L=[do(C)|R].
L=[done([])|R]:-L=do(R).
L=do([]):-L=done([]).
L=[done(V)]:-L=done(V).

% unit
L=done:-L=done([]).
