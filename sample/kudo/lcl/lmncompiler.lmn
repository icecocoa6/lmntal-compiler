% プログラムを表すグラフ構造を，命令列に変換する
% 

{ module(lmncompiler).

	% 全体のコンパイル

	lmncompiler.compile={$g} :- lmncompiler.compiling1={$g.
	
		CompileRuleset1@@
		ruleset(RID, Rules) :- compiled_ruleset(RID, lmncompiler.compile_rules(Rules)).
		CompileRuleset2@@
		R=lmncompiler.compile_rules([Rule|Rest]) :- 
			R=[lmncompiler.compile_rule(Rule)|lmncompiler.compile_rules(Rest)].
		CompileRuleset3@@
		R=lmncompiler.compile_rules([]) :- R=[].

	}.
	
	lmncompiler.compiling1={$g, @g}/ :-
	lmncompiler.compiling2={$g.
	
		% コンパイルされたルール（命令列）を膜から取り出す
		R=lmncompiler.compiled_rule({$rule, compiled_rule(RuleName, AM, MM, G, B)}) :- 
			string(RuleName), ground(AM), ground(MM), ground(G), ground(B) |
			R=compiled_rule(RuleName, AM, MM, G, B), $rule.
		
		% ルールを表す膜への参照を消す ( この参照はもっと前の段階で消してもいいかもしれない )
		rule('+') :- ().
	}.
	
	lmncompiler.compiling2={$g, @g}/ :- lmncompiler.compiled={ $g}.
	
	% 個々のルールのコンパイル

	% Counting Phase 1
	R=lmncompiler.compile_rule({$rule}) :-
		R=lmncompiler.counting1_rule({$rule.
			lmnheadcompiler.count_phase1.
		}).
	
	% Counting Phase 2
	R=lmncompiler.counting1_rule({$rule, @rule}/) :-
		R=lmncompiler.counting2_rule({$rule.
			lmnheadcompiler.count_phase2.
		}).

	% 1st Phase
	R=lmncompiler.counting2_rule({$rule, @rule}/) :-
		R=lmncompiler.compiling1_rule({$rule.
			lmnheadcompiler.phase1,
			lmnguardcompiler.phase1,
			lmnbodycompiler.phase1.
		}).
	
	% 2nd Phase
	R=lmncompiler.compiling1_rule({$rule, @rule}/) :-
		R=lmncompiler.compiling2_rule({$rule.
			lmnheadcompiler.phase2,
			lmnguardcompiler.phase2,
			lmnbodycompiler.phase2.
		}).
	
	% Optimizing Phase 1
	R=lmncompiler.compiling2_rule({$rule, @rule}/) :-
		R=lmncompiler.optimizing1_rule({$rule.
			lmnoptimizer.optimize1.
		}).
	
	% Numbering Phase
	R=lmncompiler.optimizing1_rule({$rule, @rule}/) :-
		R=lmnnumberer.number({$rule}).

	% GC Phase 1
	R=numbered({$rule, @rule}/) :-
		R=lmncompiler.gcing1_rule({$rule.
			lcl_gc.use1.
		}).

	% Instruction Collecting Phase
	R=lmncompiler.gcing1_rule({$rule, @rule}/) :-
		R=lmninstcollector.collect_insts({$rule}).

	% GC Phase 2
	R=insts_collected({$rule, @rule}/) :-
		R=lmncompiler.gcing2_rule({$rule.
			lcl_gc.use2.
		}).

	% END
	R=lmncompiler.gcing2_rule({$rule, @rule}/):-
		R=lmncompiler.compiled_rule({$rule.
		}).
	
}.
