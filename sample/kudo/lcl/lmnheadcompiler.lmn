% 左辺のコンパイル

{module(lmnheadcompiler).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%% 1st Phase %%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	lmnheadcompiler.phase1 :- 
	
	lmnheadcompiler.compile,

	( lmnheadcompiler.compile, lhs={$lhs} :- lmnheadcompiler.find(F), lhs={'+'(F), $lhs} ),

%%%%%% F I N D %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	( Find1@@
	lmnheadcompiler.find({$lhs, atom(A)}) :-
		lmnheadcompiler.findatom(A1), lmnheadcompiler.find({$lhs, found_atom(A2)}), common.cpref(A1, A2, A) ),

	% FINDATOM
	( FindAtom@@
	lmnheadcompiler.findatom({$atom, mem(M), functor(F, A)}) :- ground(F), int(A) |
		findatom({$atom, functor(F, A), mem(M1)},
		M2, common.str_of_functor(F, A)), common.cpref(M1, M2, M) ),

	( GetLink@@
	findatom({$atom, link(P, L)}, M, F) :- int(P) |
		findatom({$atom}, M, F), lmnheadcompiler.getlink(L) ),
	
	( GetLink1@@
	lmnheadcompiler.getlink({$link, pos(P), atom(A)}) :- int(P) | getlink({$link}, A, P) ),

	( IsBuddy@@
	unifylinks({$link1, '+'(G1)}, {$link2, '+'(G2)}), getlink(G1, A1, P1), getlink(G2, A2, P2) :-
		isbuddy({$link1, '+'(G1)}, {$link2, '+'(G2)}), getlink(G1, A1, P1), getlink(G2, A2, P2) ),

	( NeqAtom@@
	findatom({$atom1}, M1, F1), findatom({$atom2}, M2, F2) :- F1 = F2 |
		findatom({$atom1, '+'(A1)}, M1, F1), findatom_neq({$atom2, '+'(A2)}, M2, F2),
		neqatom(A1, A2) ),
	
	( Find2@@
	lmnheadcompiler.find({$lhs, mem(M)}) :-
		lmnheadcompiler.findmem(M1), lmnheadcompiler.find({$lhs, found_mem(M2)}), common.cpref(M1, M2, M) ),
	
	% ANYMEM ( 種類0以外は未対応 )
	( AnyMem@@
	lmnheadcompiler.findmem({$mem, parent(P)}) :- 
		lmnheadcompiler.find(F), anymem({$mem, parent(P1), '+'(F)}, P2, 0), common.cpref(P1, P2, P) ),

%%%%%% C O U N T %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	% NATOMS
	( Natoms@@
	{$lhsmem, natoms(NA)} :- int(NA) | natoms({$lhsmem}, NA) ),
	
	% NMEMS
	( Nmems@@
	{$lhsmem, nmems(NM)} :- int(NM) | nmems({$lhsmem}, NM) ),
	
	% NORULES
	( Norules@@
	{$lhsmem, norules} :- norules({$lhsmem}) ),
	
	().

	% Counting Phase 1 ( 通常Phaseの前に呼ばれる )
	lmnheadcompiler.count_phase1 :-

	( Count1@@
	lhs={$lhs, mem(M)} :- lhs={$lhs, count_mem(M)} ),
	
	( Count2@@
	R=lmnheadcompiler.count_lhsmem({$mem}) :- 
		R=lmnheadcompiler.counting_lhsmem({$mem.
			natoms(0), nmems(0), norules.
			natoms(CA), atom(A) :- CA1=CA+1 | natoms(CA1), counted_atom(A).
			nmems(CM), mem(M) :- CM1=CM+1 | nmems(CM1), counted_mem(M).
			rulecxt(RCN), norules :- rulecxt(RCN).
		}) ),
	
	( Count3@@
	R=lmnheadcompiler.counting_lhsmem({$lhs, @lhs}/) :-
		R=lmnheadcompiler.counted_lhsmem({$lhs.
			counted_atom(A) :- atom(A).
			counted_mem(M) :- count_mem(M).
		}) ),
	
	( Count4@@
	{$lhsmem, @lhsmem, count_mem(M)}/ :-
		{$lhsmem, @lhsmem, counting_mem(M1)}, M1=lmnheadcompiler.count_lhsmem(M) ),
	
	().
	
	lmnheadcompiler.count_phase2 :-
	
	( Count5@@
	{$lhsmem, counting_mem(M)} :- {$lhsmem, mem(M)} ),
	
	( Count6@@
	R=lmnheadcompiler.counted_lhsmem({$lhsmem, @lhsmem}/) :- R={$lhsmem} ),
	
	().

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%% 2nd Phase %%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	lmnheadcompiler.phase2 :-
	( lmnheadcompiler.find({$lhs}) :- {$lhs} ),
	
	( findatom_neq(A, M, F) :- findatom(A, M, F) ),
	
	().

}.