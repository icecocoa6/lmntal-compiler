% 左辺のコンパイル

{module(lmnheadcompiler).

	% 1st Phase
	lmnheadcompiler.phase1 :- 
	
	lmnheadcompiler.compile,

	% 左辺を見つける
	( lmnheadcompiler.compile, lhs={$lhs} :- lmnheadcompiler.find(F), lhs={'+'(F), $lhs} ),

%%%%%% F I N D %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	( Find1@@
	lmnheadcompiler.find({$lhs, atom(A)}) :-
		lmnheadcompiler.findatom(A1), lmnheadcompiler.find({$lhs, found_atom(A2)}), common.cpref(A1, A2, A) ),

	% FINDATOM
	( FindAtom@@
	lmnheadcompiler.findatom({$atom, mem(M), functor(F, A)}) :- ground(F), int(A) |
		findatom({$atom, functor(F, A), mem(M1)},
		M2, common.str_of_functor(F, A)), common.cpref(M1, M2, M) ),

	( GetLink@@
	findatom({$atom, link(P, L)}, M, F) :- int(P) |
		findatom({$atom}, M, F), lmnheadcompiler.getlink(L) ),
	
	( GetLink1@@
	lmnheadcompiler.getlink({$link, pos(P), atom(A)}) :- int(P) | getlink({$link}, A, P) ),

	%左辺出現同士のunifylinksとfindatomを、dereflink, func, testmemに変換する
	( getlink({$link1, '+'(L1)}, A1, P1), getlink({$link2, '+'(L2)}, A2, P2), 
		unifylinks(L1, L2), findatom({'+'(A2), $atom}, M, F), findatom({'+'(A1), $atom1}, M1, F1) :-
		getlink({$link1, '+'(L1)}, A1, P1), dereflink({$atom, '+'(AF), '+'(AT)}, L1, P2), 
		testmem(M, AT), func(AF,F), {$link2}, findatom({'+'(A1), $atom1}, M1, F1) ),
	
	%左辺の同一アトムへのunifylinksはdereflink, eqatomへと変換する
	( getlink({$link1, '+'(L1)}, {$atom, '+'(A)}, P1), getlink({$link2, '+'(L2)}, A, P2),
		unifylinks(L1, L2) :-
		getlink({$link1, '+'(L1)}, {$atom, '+'(A), diff_num={'+'(D), '+'(A2)}}, P1), dereflink(D, L1, P2), 
		eqatom(A, A2), {$link2} ),
	
	().
	
	% 2nd Phase
	lmnheadcompiler.phase2 :-
	( lmnheadcompiler.find({$lhs}) :- {$lhs} ),
	
	().
	
}.