{module(lmndumper).

	lmndumper.dump={$g, global=[rulesetid(GID)]} :- int(GID) |
	lmndumper.dump_first={$g.
		lmndumper.now(GID).
		
		lmndumper.now(N), compiled_ruleset(RID, Rules) :- N=:=RID |
			lmndumper.dump_rules(RID, Rules).
	}.
	
	lmndumper.dump_first={$g, lmndumper.dumped, @g}/ :-
	lmndumper.dump_rest={$g.
		
		lmndumper.dump.
		
		lmndumper.dump, compiled_ruleset(RID, Rules) :- lmndumper.dump_rules(RID, Rules).
		
		lmndumper.dumped :- lmndumper.dump.
		
	}.
		
	lmndumper.dump_rest={$g, lmndumper.dump, @g}/ :-
		lmndumper.dumped={$g}.


	lmndumper.dump_rules(RID, Rules) :- int(RID) |
		lmndumper.dumping_id(io.print("Compiled Ruleset @"++string.str_of_int(RID)), Rules).
	
	lmndumper.dumping_id(done, Rules) :- lmndumper.dumping_rules(Rules).
	
	lmndumper.dumping_rules([]) :- lmndumper.dumped.

	lmndumper.dumping_rules([compiled_rule(RuleName, Insts)|Rest]) :- string(RuleName) |
		lmndumper.dumping_rulename(io.print("Compiled Rule "++RuleName), Insts, Rest).

	lmndumper.dumping_rulename(done, Insts, Rest) :-
		lmndumper.dumping_insts(lmndumper.dump_insts(Insts), Rest).

	lmndumper.dumping_insts(done, Rest) :- lmndumper.dumping_rules(Rest).

	R=S1++S2 :- string(S1), string(S2) | R=string.concat(S1, S2).

	R=lmndumper.dump_insts([]) :- R=done.
	R=lmndumper.dump_insts([Inst|Rest]) :- R=lmndumper.dumping_inst(io.print("\t\t"++str_of_inst(Inst)),Rest).
	R=lmndumper.dumping_inst(done, Rest) :- R=lmndumper.dump_insts(Rest).


	R=str_of_inst(findatom(A, M, F)) :- int(A), int(M), string(F) |
		R="findatom    ["++string.str_of_int(A)++", "++string.str_of_int(M)++", "++F++"]".
	R=str_of_inst(newatom(A, M, F)) :- int(A), int(M), string(F) |
		R="newatom     ["++string.str_of_int(A)++", "++string.str_of_int(M)++", "++F++"]".
	R=str_of_inst(removeatom(A, M, F)) :- int(A), int(M), string(F) |
		R="removeatom  ["++string.str_of_int(A)++", "++string.str_of_int(M)++", "++F++"]".
	R=str_of_inst(enqueueatom(A)) :- int(A) |
		R="enqueueatom ["++string.str_of_int(A)++"]".
	R=str_of_inst(freeatom(A)) :- int(A) |
		R="freeatom    ["++string.str_of_int(A)++"]".
	R=str_of_inst(loadruleset(M,rulesetid(RID))) :- int(M), int(RID) |
		R="loadruleset ["++string.str_of_int(M)++", "++"@"++string.str_of_int(RID)++"]".
	R=str_of_inst(alloclink(L, A, P)) :- int(L), int(A), int(P) |
		R="alloclink   ["++string.str_of_int(L)++", "++string.str_of_int(A)++", "++string.str_of_int(P)++"]".
	R=str_of_inst(unifylinks(L1,L2)) :- int(L1), int(L2) |
		R="unifylinks  ["++string.str_of_int(L1)++", "++string.str_of_int(L2)++"]".



}.