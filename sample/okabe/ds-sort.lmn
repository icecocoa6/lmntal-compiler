/**
 *  Distributed LMNtal sample(#1)
 *  distributed sort
 *    クライアントがサーバからソートプログラムをダウンロードして実行し，
 *    その結果をサーバがマージする．
 *  client file: dc-sort1.lmn,dc-sort2.lmn
 *
 *  06/01/12 okabe
 */

% サーバソケット
dlt.bind(50000,[accept(Send1,strDec),accept(Send2,strDec),close]).

% ユーザがダウンロードして実行する文字列形式のプログラム
% リストを生成してクイックソートで昇順に整列する
Send1=
["{
  gen(50,[]).
  gen(I,L) :- I2=I-1,I>0 | gen(I2,[(integer.rnd(10000))|L]).
  gen(I,L) :- I=:=0 | list=sort(L).
  R=sort(L) :- R=sort(L,[]).
  R=sort([D|L],Done) :- int(D) |
    devide(L,D,L1,L2),R=sort(L1,[D|sort(L2,Done)]).
  R=sort([],Done) :- R=Done.
  devide([D|L],B,L1,L2) :- D<B | devide(L,B,LL1,L2),L1=[D|LL1].
  devide([D|L],B,L1,L2) :- D>=B | devide(L,B,L1,LL2),L2=[D|LL2].
  devide([],B,L1,L2) :- int(B) | L1=[],L2=[].
}"].

Send2=
["{
  gen(100,[]).
  gen(I,L) :- I2=I-1,I>0 | gen(I2,[(integer.rnd(10000))|L]).
  gen(I,L) :- I=:=0 | list=sort(L).
  R=sort(L) :- R=sort(L,[]).
  R=sort([D|L],Done) :- int(D) |
    devide(L,D,L1,L2),R=sort(L1,[D|sort(L2,Done)]).
  R=sort([],Done) :- R=Done.
  devide([D|L],B,L1,L2) :- D<B | devide(L,B,LL1,L2),L1=[D|LL1].
  devide([D|L],B,L1,L2) :- D>=B | devide(L,B,L1,LL2),L2=[D|LL2].
  devide([],B,L1,L2) :- int(B) | L1=[],L2=[].
}"].

% リストのデコードフィルタ
strDec([_SH|T]) :- 
  codec.strDecoder(_SH),strDec(T).

% クライアントから収集したソート済みリストをマージ
{list(L1),$p[L1],@p},{list(L2),$q[L2],@q} :- 
  {
    list=merge(L1,L2),$p[L1],$q[L2].
    R=merge([D1|L1],[D2|L2]) :- D1<D2 | R=[D1|merge(L1,[D2|L2])].
    R=merge([D1|L1],[D2|L2]) :- D1>=D2 | R=[D2|merge([D1|L1],L2)].
    R=merge(L,[]) :- R=L.
    R=merge([],L) :- R=L.
    R=f([D]) :- R=D
  }.
