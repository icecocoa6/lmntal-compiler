% chat simulation
% 分散シミュレーション その２
% チャットサーバ＆クライアント

{% brie
connect("gouda",60000,I,O).
I=[].
O=["brie","briehoge"].
}.

{% pave
connect("gouda",60000,I,O).
I=[].
O=["pave","pavemoge"].
}.

{% murol
connect("gouda",60000,I,O).
I=[].
O=["murol","murolpoge"].
}.

{% gouda
port(60000,G).
G=[accept(I1,O1),accept(I2,O2),accept(I3,O3)].
I1=[],I2=[],I3=[],O1=[],O2=[],O3=[].
socket(S1,[H|T],O1),socket(S2,I2,O2),socket(S3,I3,O3) :- string(H) |
  socket(S1,T,list.append(O1,[H])),
  socket(S2,I2,list.append(O2,[H])),
  socket(S3,I3,list.append(O3,[H])).
}.

% connect and accept rule
{connect(Host,Port1,I1,O1),$p[I1,O1|*S],@p},
{port(Port2,[accept(I2,O2)|T]),$q[I2,O2,T|*S],@q} :- 
  string(Host),Port1=:=Port2 |
    {socket(S,I1,O1),$p[I1,O1|*S],@p},
    {port(Port2,T),socket(S,I2,O2),$q[I2,O2,T|*S],@q}.
% send and receive rule
{socket(S,I1,[H|T]),$p[I1,T|*S],@p},
{socket(S,I2,O2),$q[I2,O2|*S],@q} :- string(H) |
  {socket(S,I1,T),$p[I1,T|*S],@p},
  {socket(S,list.append(I2,[H]),O2),$q[I2,O2|*S],@q}.
