sum([],PSum,Sum) :- Sum=PSum.
sum([One|Rest],PSum,Sum) :- sum(Rest,PSum+One,Sum).
sum(List,Sum) :- sum(List,0,Sum).

%sum([1,2,3,4,5],result).

naturals(N,M,List) :- N>=M | List=[].
naturals(N,M,List) :- N<M | List=[N|Rest],naturals(N+1,M,Rest).
naturals(M,List):-naturals(0,M,List).

%naturals(5,result).

sum_up_to(N,Sum) :- naturals(N,List),sum(List,Sum).

%sum_up_to(5,result).

square([],Out) :- Out=[].
square([One|Rest],Out) :- 
  int(One) | Out=[One*One|OutTail],square(Rest,OutTail).

%square([1,2,3,4,5],result).

square_sum_up_to(N,Sum) :- 
  naturals(N,Naturals),square(Naturals,Squares),sum(Squares,Sum).

%square_sum_up_to(5,result).

cube([],Out) :- Out=[].
cube([One|Rest],Out) :- 
  int(One) | Out=[One*One*One|OutTail],cube(Rest,OutTail).

%cube([1,2,3,4,5],result).

append([],In2,Out) :- Out=In2.
append([Msg|In1],In2,Out) :- Out=[Msg|OutTail],append(In1,In2,OutTail).

append_sum(N,Sum) :- 
  int(N) | naturals(N,Naturals1),naturals(N,Naturals2),
    square(Naturals1,Squares),cube(Naturals2,Cubes),
      append(Squares,Cubes,Both),sum(Both,Sum).

/* merger */
merge([],In2,Out) :- Out=In2.
merge(In1,[],Out) :- Out=In1.
merge([Msg|In1],In2,Out) :- Out=[Msg|OutTail],merge(In1,In2,OutTail).
merge(In1,[Msg|In2],Out) :- Out=[Msg|OutTail],merge(In1,In2,OutTail).

%merge([1,3,5,7],[2,4,6,8],result).

merge_sum(N,Sum) :-
  int(N) | naturals(N,Naturals1),naturals(N,Naturals2),
    square(Naturals1,Squares),cube(Naturals2,Cubes),
      merge(Squares,Cubes,Both),sum(Both,Sum).

%merge_sum(5,result).

/* dispatcher */
dispatch([],Odd,Even) :- Odd=[],Even=[].
dispatch([One|Rest],Odd,Even) :- One mod 2=\=0 | 
  Odd=[One|OddTail],dispatch(Rest,OddTail,Even).
dispatch([One|Rest],Odd,Even) :- One mod 2=:=0 | 
  Even=[One|EvenTail],dispatch(Rest,Odd,EvenTail).

%dispatch([1,8,2,7,5,4,9,6,3],odd,even).

queer_sum(N,Sum) :- naturals(N,Naturals),dispatch(Naturals,Odd,Even),
  square(Even,Squares),cube(Odd,Cubes),merge(Squares,Cubes,Both),
    sum(Both,Sum).

queer_sum(5,result).
