/*
 * ferryman (with LTL)
 * 2007/06/30(Sun) by okabe
 * 
 * 目標：整数の世界が扱えること
 */

/* never claim
> ./ltl2ba -f '(((gc || gw) -> gf) U cgwf)'
never {
T0_init:
        if
        :: (!gc && !gw) || (gf) -> goto T0_init
        :: (cgwf) -> goto accept_all
        fi;
accept_all:
        skip
}
*/

/* 
% LTL rule
t0_init, go(G), ca(C), wo(W) :- G=\=C, G=\=W | t0_init.
t0_init, go(G), fe(F) :- G=:=F | t0_init.
t0_init, ca(C), go(G), wo(W), fe(F) :- C=:=1, G=:=1, W=:=1, F=:=1 | accept_all.

% system rule
ca(C), go(G), wo(W), fe(F) :- W=:=F, W2=1-W | ca(C), go(G), wo(W2), fe(W2).
ca(C), go(G), wo(W), fe(F) :- G=:=F, G2=1-G | ca(C), go(G2), wo(W), fe(G2).
ca(C), go(G), wo(W), fe(F) :- C=:=F, C2=1-C | ca(C2), go(G), wo(W), fe(C2).
ca(C), go(G), wo(W), fe(F) :- F2=1-F | ca(C), go(G), wo(W), fe(F2).
*/

//nd.exec({{
init.
init :- t0_init, fe(0), wo(0), go(0), ca(0).

t0_init, ca(C), go(G), wo(W), fe(F) :- 
	C=:=1, G=:=1, W=:=1, F=:=1, W=:=F, W2=1-W | 
	accept_all, ca(C), go(G), fe(W2), wo(W2).
t0_init, ca(C), go(G), wo(W), fe(F) :- 
	C=:=1, G=:=1, W=:=1, F=:=1, G=:=F, G2=1-G | 
	accept_all, ca(C), wo(W), fe(G2), go(G2).
t0_init, ca(C), go(G), wo(W), fe(F) :- 
	C=:=1, G=:=1, W=:=1, F=:=1, C=:=F, C2=1-C | 
	accept_all, ca(C), wo(W), fe(C2), ca(C2).
t0_init, ca(C), go(G), wo(W), fe(F) :- 
	C=:=1, G=:=1, W=:=1, F=:=1, F2=1-F | 
	accept_all, ca(C), go(G), wo(W), fe(F2).

t0_init, ca(C), go(G), wo(W), fe(F) :- 
	G=\=C, G=\=W, W=:=F, W2=1-W | t0_init, ca(C), go(G), wo(W2), fe(W2).
t0_init, ca(C), go(G), wo(W), fe(F) :- 
	G=\=C, G=\=W, G=:=F, G2=1-G | t0_init, ca(C), go(G2), wo(W), fe(G2).
t0_init, ca(C), go(G), wo(W), fe(F) :- 
	G=\=C, G=\=W, C=:=F, C2=1-C | t0_init, ca(C2), go(G), wo(W), fe(C2).
t0_init, ca(C), go(G), wo(W), fe(F) :- 
	G=\=C, G=\=W, F2=1-F | t0_init, ca(C), go(G), wo(W), fe(F2).
	
t0_init, ca(C), go(G), wo(W), fe(F) :- 
	G=:=F, W=:=F, W2=1-W | t0_init, ca(C), go(G), wo(W2), fe(W2).
t0_init, ca(C), go(G), wo(W), fe(F) :- 
	G=:=F, G=:=F, G2=1-G | t0_init, ca(C), go(G2), wo(W), fe(G2).
t0_init, ca(C), go(G), wo(W), fe(F) :- 
	G=:=F, C=:=F, C2=1-C | t0_init, ca(C2), go(G), wo(W), fe(C2).
t0_init, ca(C), go(G), wo(W), fe(F) :- 
	G=:=F, F2=1-F | t0_init, ca(C), go(G), wo(W), fe(F2).

accept_all :- accept_all. // stutter extension
//}*}).
