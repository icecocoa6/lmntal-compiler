/*

NAME
  ferryman (LTL version)

SYNOPSIS
  run under SLIM LTL mode
  性質：「食物連鎖を起こさずに全員が向こう岸に渡ることはできない」
  
AUTHOR
  Ryo Okabe

HISTORY
  2007/12/14(Fri)

*/

% system rule
t0_init{
  fe(0), wo(0), go(0), ca(0).
  w@@ wo(W), fe(F) :- W=:=F, W2=1-W | wo(W2), fe(W2).
  g@@ go(G), fe(F) :- G=:=F, G2=1-G | go(G2), fe(G2).
  c@@ ca(C), fe(F) :- C=:=F, C2=1-C | ca(C2), fe(C2).
  f@@ fe(F) :- F2=1-F | fe(F2).
}.

% property rule
t0_init{go(G), ca(C), wo(W), $p, @p} :- int(G), int(C), int(W), G=\=C, G=\=W |
  t0_init{go(G), ca(C), wo(W), $p, @p}.
t0_init{go(G), fe(F), $p, @p} :- int(G), int(F), G=:=F |
  t0_init{go(G), fe(F), $p, @p}.
t0_init{ca(C), go(G), wo(W), fe(F), $p, @p} :- C=:=1, G=:=1, W=:=1, F=:=1 |
  accept_all_end{ca(C), go(G), wo(W), fe(F), $p, @p}.

/* ltl2ba output (never claim)
> ./ltl2ba -f '(((gc || gw) -> gf ) U gcwf)'
never {
T0_init:
        if
        :: (!gc && !gw) || (gf) -> goto T0_init
        :: (gcwf) -> goto accept_all
        fi;
accept_all:
        skip
}
*/

/* literal definition
!gc@@
{go(G), ca(C), $p, @p} :- int(G), int(C), G=\=C |
  {go(G), ca(C), $p, @p}.
!gw@@
{go(G), wo(W), $p, @p} :- int(G), int(W), G=\=W |
  {go(G), wo(W), $p, @p}.
gf@@
{go(G), fe(F), $p, @p} :- int(G), int(F), G=:=F |
  {go(G), fe(F), $p, @p}.
gcwf@@
{ca(C), go(G), wo(W), fe(F), $p, @p} :- C=:=1, G=:=1, W=:=1, F=:=1 |
  {ca(C), go(G), wo(W), fe(F), $p, @p}.
*/
