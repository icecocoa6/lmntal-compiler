/*
http://www.geocities.jp/m_hiroi/rakup/match00.html
 パターンマッチング
 ユニフィケーション
*/

/*
    Lisp > (match '(太郎 好き X) '(太郎 好き コーヒー) nil)
    ((X . コーヒー))

binding = match([taro, like, X], [taro like, coffer])
 ==>
binding = [[X | coffer]]

変数 X は var(x) のように表現することにする
*/

/*
 Prolog でのデータ定義
	father(naoyuki, hyogo).
	father(saburo, naoyuki).
	father(saburo, shinji).
	father(yoshihisa, hisako).
	mother(hisako, hyogo).
	mother(yoko, naoyuki).
	mother(yoko, shinji).
	mother(nobuko, hisako).

  saburo === yoko    yoshihisa === nobuko
          |                     |
    +-----+-------+             |
    |             |             |
  shinji        naoyuki ===== hisako
                          |
                        hyogo
*/
/*
　father(naoyuki, hyogo).
という事実(ルール)を
　[father, naoyuki, hyogo]
のようにリストで保持。

次にリスト同士のパターンマッチグを行うルール"match"を定義。
変数は大文字で表現。マッチングが成功した場合には yes となり、変数に値を
代入。
　match([father, naoyuki, hyogo], [father, naoyuki, hyogo] )  => yes, []
　match([father, naoyuki, hyogo], [father, saburo, naoyuki])  => no,  []
　match([father, naoyuki, X    ], [father, naoyuki, hyogo] )  => yes,
[[X, hyogo]]

第一引数にクエリを入れ、第二引数にルールリスト(rules膜？)から1つずつルー
ルを取ってきて比較（予定）
    | ?- father(naoyuki, hyogo).
    yes
==>
　match([father, naoyuki, hyogo], 『rulesのルールどれか』) -> yes, []

    | ?- father(F, hyogo).
    F = naoyuki ? 
    yes
==>
　match([father, F, hyogo], 『rulesのどれか』) -> yes, [[F, naoyuki]]

rules = {
	[father, naoyuki, hyogo  ],
	[father, saburo,  naoyuki],
	...
}

マッチするものがあれば、yes と変数の対応リストとなる（予定）

このとき、どのルールまでマッチングしてみたかを覚えておけばUndoが出来る？
（要検討）
*/
% 記号
symbols = {
	% 名前の表現
	{ naoyuki  , p(N1_1), p(N1_2), p(N1_3) },
	{ hyougo   , p(N2_1), p(N2_2) },
	{ saburo   , p(N3_1), p(N3_2), p(Q3_1) },
	{ shinji   , p(N4_1), p(N4_2) },
	{ yoshihisa, p(N5_1) },
	{ hisako   , p(N6_1), p(N6_2), p(N6_3) },
	{ yoko     , p(N7_1), p(N7_2)  },
	{ nobuko   , p(N8_1) }
},
% 述語
predicates = {
	% 述語の表現
	{father },
	{mother }
}
% 事実
rules = {
	father(N1_1, N2_1), % father(naoyuki, hyogo)
	father(N3_1, N1_2), % father(saburo, naoyuki)
	father(N3_2, N4_1), % father(saburo, shinji)
	father(N5_1, N6_1), % father(yoshihisa, hisako)
	mother(N6_2, N2_2), % mother(hisako, hyogo)
	mother(N7_1, N1_3), % mother(yoko, naoyuki)
	mother(N7_2, N4_2), % mother(yoko, shinji)
	mother(N8_1, N6_3)  % mother(nobuko, hisako)
},
