/*
 参照: http://bach.istc.kobe-u.ac.jp/prolog/intro/database.html

 Prolog でのデータ定義
	father(naoyuki, hyogo).
	father(saburo, naoyuki).
	father(saburo, shinji).
	father(yoshihisa, hisako).
	mother(hisako, hyogo).
	mother(yoko, naoyuki).
	mother(yoko, shinji).
	mother(nobuko, hisako).

  saburo === yoko    yoshihisa === nobuko
          |                     |
    +-----+-------+             |
    |             |             |
  shinji        naoyuki ===== hisako
                          |
                        hyogo

 単純な問題(on Prolog)
    | ?- father(naoyuki, hyogo).
    yes
    | ?- father(saburo, hyogo).
    no
    
Prologを「直感的」にLMNtalで書いてみる

 質問 (問合せ，query) はルートの膜に入れるとする
 それが「反応」して yes, no アトムを出力する
*/
///////////////////////////////////////////////////////////////////////////////////////
///// 1. 単純にそのまま膜へ入れてみたもの
% 述語
/*
predicates = {
	father(naoyuki, hyogo),
	father(saburo, naoyuki),
	father(saburo, shinji),
	father(yoshihisa, hisako),
	mother(hisako, hyogo),
	mother(yoko, naoyuki),
	mother(yoko, shinji),
	mother(nobuko, hisako)
}
*/
/*
% yesルール？
father(A, B), predicates = { father(C, D) }
	:- 
「Aの先のアトム名」=「Cの先のアトム名」&&「Bの先のアトム名」=「Dの先のアトム名」| yes, predicates

% noルール？
father(A, B), predicates = { father(C, D) }
	:- 
「Aの先のアトム名」!=「Cの先のアトム名」||「Bの先のアトム名」!=「Dの先のアトム名」| no, predicates
*/

/*
 名前への「ポインタ」を持たせてみる
 膜で表現する
 
 { '名前', p(N1_1), p(N1_2), ... },
 father(N1_1, N2_1), ...
*/
///////////////////////////////////////////////////////////////////////////////////////
///// 2. 記号をポインタ形式で
% 記号
symbols = {
	% 名前の表現
	{ naoyuki  , p(N1_1), p(N1_2), p(N1_3) },
	{ hyougo   , p(N2_1), p(N2_2) },
	{ saburo   , p(N3_1), p(N3_2) },
	{ shinji   , p(N4_1), p(N4_2) },
	{ yoshihisa, p(N5_1) },
	{ hisako   , p(N6_1), p(N6_2), p(N6_3) },
	{ yoko     , p(N7_1), p(N7_2) },
	{ nobuko   , p(N8_1) },
},
% 述語
predicates = {
	father(N1_1, N2_1), % father(naoyuki, hyogo)
	father(N3_1, N1_2), % father(saburo, naoyuki)
	father(N3_2, N4_1), % father(saburo, shinji)
	father(N5_1, N6_1), % father(yoshihisa, hisako)
	mother(N6_2, N2_2), % mother(hisako, hyogo)
	mother(N7_1, N1_3), % mother(yoko, naoyuki)
	mother(N7_2, N4_2), % mother(yoko, shinji)
	mother(N8_1, N6_3)  % mother(nobuko, hisako)
}
/*
  | ?- father(naoyuki, hyogo).
  というクエリは以下のように変換して投入されるとする。
*/
/*
father(Q1_1, Q1_2),
symbols = {
	{ naoyuki, p(Q1_1), p(N1_1), ... },
	{ hyougo , p(Q1_2), p(N2_1), ... },
}
*/
/*
% yesルール？
father(A, B), predicates = { father(C, D) }
	:- 
「Aの先のアトムが所属する膜」=「Cの先のアトムが所属する膜」
&&「Bの先のアトムが所属する膜」=「Dの先のアトムが所属する膜」| yes, predicates

% noルール？
father(A, B), predicates = { father(C, D) }
	:- 
「Aの先のアトムが所属する膜」!=「Cの先のアトムが所属する膜」
||「Bの先のアトムが所属する膜」!=「Dの先のアトムが所属する膜」| no, predicates
*/
% ルール father :- yes
father(Q1, Q2),
symbols = {
	{ p(Q1), p(D1), $r1 },
	{ p(Q2), p(D2), $r2 },
	$r3
},
predicates = {
	father(D1, D2),
	$r4
}
	:-
yes,
symbols = {
	{ p(D1), $r1 },
	{ p(D2), $r2 },
	$r3
},
predicates = {
	father(D1, D2),
	$r4
}
% ルール father :- no
% yes ルールが優先されるならこれだけでも大丈夫？
father(Q1, Q2),
symbols = {
	{ p(Q1), $r1 },
	{ p(Q2), $r2 },
	$r3
}
	:-
no,
symbols = {
	{ $r1 },
	{ $r2 },
	$r3
}

/*
 変数への値代入
    | ?- father(F, hyogo).
    F = naoyuki ? 
    yes
    | ?- father(F, saburo).
    no
*/
/*
    | ?- father(F, hyogo).
 というクエリは次のように変換して代入されるとする
*/
/*
father(F, Q2_2), var(F),
symbols = {
	{ hyougo , p(Q2_2), p(N2_1), ... },
}

var(F)のリンク先が書き換わり、

var(F), yes,
symbols = {
	{ naoyuki  , p(N1_1), p(N1_2), p(N1_3), p(F) },
}

のようになればいい？
*/
% ルール father :- yes, 変数置き換え
father(Q1, F), var(F),
symbols = {
	{ p(Q1), p(D1), $r1 },
	{        p(D2), $r2 },
	$r3
},
predicates = {
	father(D1, D2),
	$r4
}
	:-
father(Q1, Q2), var(F)
symbols = {
	{ p(Q1), p(D1), $r1 },
	{ p(Q2), p(F), p(D2), $r2 },
	$r3
},
predicates = {
	father(D1, D2),
	$r4
}
*/
% Fの位置を入れたルール father :- yes, 変数置き換え
% ルール father :- no,
% 記号
symbols = {
	% 名前の表現
	$p
	% no ルールで使う
	{ null       }
}
% yes ルールが優先されるならこれｄ
% 変数に値が代入できない場合には「null」を代入
father(Q1, F), var(F),
symbols = {
	{ p(Q1), $r1       },
	{        $r2, null },
	$r3
}
	:-
father(Q1, Q2),
symbols = {
	{ p(Q1), $r1       },
	{ p(Q2), $r2, null },
	$r3
}

/*
 複数の回答がある場合

    | ?- father(saburo, C).
    C = naoyuki ? ;
    C = shinji ? ;
    no

*/
