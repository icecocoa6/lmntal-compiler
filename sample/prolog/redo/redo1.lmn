/********************************************************************
	redo で binding を消す

	unify :- unify_yes
	[or]
	unify :- unify_no

	リンク構造をたどっていく unify 
	
	QUERY_OUT─┬───┬(QUERY_IN)─○─
	         　｜      ｜            ｜
	           ｜unify ｜
	           ｜      ｜
	FACT_OUT ─┴─┬─┴(FACT_IN )─○─
	            BINDING,RES          ｜
	        
	unify(QUERY_IN, FACT_IN, QUERY_OUT, FACT_OUT, BINDING, RES)
	
	BINDING: 束縛した変数へのポインタのリスト
	RES: 結果を受け取る unify_yes, unify_no
	
	シンボルはシンボルテーブルに存在するものとする
	symbols = {
		{a, $p([X, Y])},
		...
	}
********************************************************************/
/*
 TODO: connect
 
 重複の削除?
 束縛のコピー
*/
/*
	束縛のコピー
	connectの先が束縛されていたら束縛する
	
	unify([X, X], [Y, a])
	
	connectの左側が束縛
*/
/*
	connectの左側が束縛
*/
(
	unify(QUERY_IN, FACT_IN, QUERY_OUT, FACT_OUT, BINDING, RES),
	vars ={
		{ bind(BIND_A), p(CONN_X), $p1 }, connect(CONN_X, CONN_Y, BIND),
		{ bind(null),   p(CONN_Y), $p2 }, $p3
	},
	symbols ={
		{ p(BIND_A), $p4 }, $p5
	}
		:-
	unify(QUERY_IN, FACT_IN, QUERY_OUT, FACT_OUT, BINDING, RES),
	vars ={
		{ bind(BIND_A), $p1 },
		{ bind(BIND_B), p(BIND), $p2 },$p3
	},
	symbols ={
		{ p(BIND_A), p(BIND_B), $p4 }, $p5
	}
),
/*
	connectの右側が束縛
*/
(
	unify(QUERY_IN, FACT_IN, QUERY_OUT, FACT_OUT, BINDING, RES),
	vars ={
		{ bind(BIND_A), p(CONN_Y), $p1 }, connect(CONN_X, CONN_Y, BIND),
		{ bind(null),   p(CONN_X), $p2 }, $p3
	},
	symbols ={
		{ p(BIND_A), $p4 }, $p5
	}
		:-
	unify(QUERY_IN, FACT_IN, QUERY_OUT, FACT_OUT, BINDING, RES),
	vars ={
		{ bind(BIND_A), $p1 },
		{ bind(BIND_B), p(BIND), $p2 },$p3
	},
	symbols ={
		{ p(BIND_A), p(BIND_B), $p4 }, $p5
	}
),
/*
	unify([],[],_,_,_) :- yes
	両方とも [] リスト
	BINDING を [] で閉じる
*/
(
	unify([], [], QUERY_OUT, FACT_OUT, BINDING, RES)
		:-
	QUERY_OUT=[], FACT_OUT=[], BINDING=[],
	unify_yes(RES)
),
/*
	unify([A | Z],[B | Y],_,_,_) :- 
	Aの先のアトム名 = Bの先のアトム名 | yes, unify(Z, Y,_,_,_)
*/
(
	unify([A | Z], [B | Y], QUERY_OUT, FACT_OUT, BINDING, RES),
	symbols ={
		{ p(A), p(B), $p1 }, $p2
	}
		:-
	QUERY_OUT=[A | QUERY_OUT_2], FACT_OUT=[B | FACT_OUT_2],
	unify(Z, Y, QUERY_OUT_2, FACT_OUT_2, BINDING, RES),
	symbols ={
		{ p(A), p(B), $p1 }, $p2
	}
),
/*
	unify([A | Z],[B | Y],_,_,_) :- 
	Aの先が変数で束縛されていない && Bの先がシンボル | 
		unify(Z, Y,_,_,_), Aの先の変数をBのシンボルへ束縛させる
*/
(
	unify([A | Z], [B | Y], QUERY_OUT, FACT_OUT, BINDING, RES),
	vars ={
		{ p(A), bind(null), $p1 }, $p2
	},
	symbols ={
		{ p(B), $p3 }, $p4
	}
		:-
	QUERY_OUT=[A | QUERY_OUT_2], FACT_OUT=[B | FACT_OUT_2], BINDING=[BIND | BINDING_2],
	unify(Z, Y, QUERY_OUT_2, FACT_OUT_2, BINDING_2, RES),
	vars ={
		{ p(A), p(BIND), bind(VAR_BIND), $p1 }, $p2
	},
	symbols ={
		{ p(B), p(VAR_BIND), $p3 }, $p4
	}
),
/*
	unify([A | Z],[B | Y],_,_,_) :- 
	Bの先が変数で束縛されていない && Aの先がシンボル | 
		unify(Z, Y,_,_,_), Bの先の変数をAのシンボルへ束縛させる
*/
(
	unify([A | Z], [B | Y], QUERY_OUT, FACT_OUT, BINDING, RES),
	vars ={
		{ p(B), bind(null), $p1 }, $p2
	},
	symbols ={
		{ p(A), $p3 }, $p4
	}
		:-
	QUERY_OUT=[A | QUERY_OUT_2], FACT_OUT=[B | FACT_OUT_2], BINDING=[BIND | BINDING_2],
	unify(Z, Y, QUERY_OUT_2, FACT_OUT_2, BINDING_2, RES),
	vars ={
		{ p(B), p(BIND), bind(VAR_BIND), $p1 }, $p2
	},
	symbols ={
		{ p(A), p(VAR_BIND), $p3 }, $p4
	}
),
/*
	unify([A | Z],[B | Y],_,_,_) :- 
	Aの先が変数で束縛されている && Bの先がシンボル && Aの束縛先がBと同じシンボル | 
		unify(Z, Y,_,_,_)
		
	unify([X, X], [a, a])
*/
(
	unify([A | Z], [B | Y], QUERY_OUT, FACT_OUT, BINDING, RES),
	vars ={
		{ p(A), bind(BIND), $p1 }, $p2
	},
	symbols ={
		{ p(B), p(BIND), $p3 }, $p4
	}
		:-
	QUERY_OUT=[A | QUERY_OUT_2], FACT_OUT=[B | FACT_OUT_2],
	unify(Z, Y, QUERY_OUT_2, FACT_OUT_2, BINDING, RES),
	vars ={
		{ p(A), bind(BIND), $p1 }, $p2
	},
	symbols ={
		{ p(B), p(BIND), $p3 }, $p4
	}
),
/*
	unify([A | Z],[B | Y],_,_,_) :- 
	Bの先が変数で束縛されている && Aの先がシンボル && Bの束縛先がAと同じシンボル | 
		unify(Z, Y,_,_,_)
*/
(
	unify([A | Z], [B | Y], QUERY_OUT, FACT_OUT, BINDING, RES),
	vars ={
		{ p(B), bind(BIND), $p1 }, $p2
	},
	symbols ={
		{ p(A), p(BIND), $p3 }, $p4
	}
		:-
	QUERY_OUT=[A | QUERY_OUT_2], FACT_OUT=[B | FACT_OUT_2],
	unify(Z, Y, QUERY_OUT_2, FACT_OUT_2, BINDING, RES),
	vars ={
		{ p(B), bind(BIND), $p1 }, $p2
	},
	symbols ={
		{ p(A), p(BIND), $p3 }, $p4
	}
),
/*
	変数同士の束縛
	X = X そのまま通過
	X = Y? 
*/
/*
	X = X そのまま通過
	unify([A | Z],[B | Y],_,_,_) :- 
	Aの先の変数 == Bの先の変数 |
		unify([Z],[Y],_,_,_) 
		
	unify([X], [X])
*/
(
	unify([A | Z], [B | Y], QUERY_OUT, FACT_OUT, BINDING, RES),
	vars ={
		{ p(A), p(B), $p1 }, $p2
	}
		:-
	QUERY_OUT=[A | QUERY_OUT_2], FACT_OUT=[B | FACT_OUT_2],
	unify(Z, Y, QUERY_OUT_2, FACT_OUT_2, BINDING, RES),
	vars ={
		{ p(A), p(B), $p1 }, $p2
	}
),
/*
	両方とも異なる変数
	- 両方とも束縛されていない
		connect を行う
	
	unify([X, Y], [Y, X])
*/
(
	unify([A | Z], [B | Y], QUERY_OUT, FACT_OUT, BINDING, RES),
	vars ={
		{ p(A), bind(null), $p1 },
		{ p(B), bind(null), $p2 },$p3
	}
		:-
	QUERY_OUT=[A | QUERY_OUT_2], FACT_OUT=[B | FACT_OUT_2], BINDING=[BIND | BINDING_2],
	unify(Z, Y, QUERY_OUT_2, FACT_OUT_2, BINDING_2, RES),
	vars ={
		{ p(A), bind(null), p(CONN_A), $p1 }, connect(CONN_A, CONN_B, BIND)
		{ p(B), bind(null), p(CONN_B), $p2 },$p3
	}
),
/*
	両方とも異なる変数
	- 両方とも束縛されている
		束縛先のシンボルの比較
		
	unify([A | Z],[B | Y],_,_,_) :- 
	Aの束縛先シンボル == Bの束縛先シンボル |
		unify([Z],[Y],_,_,_) 

	unify([X, Y, Y], [a, a, X]) 
*/
(
	unify([A | Z], [B | Y], QUERY_OUT, FACT_OUT, BINDING, RES),
	vars ={
		{ p(A), bind(BIND_A), $p1 },
		{ p(B), bind(BIND_B), $p2 },$p3
	},
	symbols ={
		{ p(BIND_A), p(BIND_B), $p4 }, $p5
	}
		:-
	QUERY_OUT=[A | QUERY_OUT_2], FACT_OUT=[B | FACT_OUT_2],
	unify(Z, Y, QUERY_OUT_2, FACT_OUT_2, BINDING, RES),
	vars ={
		{ p(A), bind(BIND_A), $p1 },
		{ p(B), bind(BIND_B), $p2 },$p3
	},
	symbols ={
		{ p(BIND_A), p(BIND_B), $p4 }, $p5
	}
),
/*
	両方とも異なる変数
	- 片方のみ束縛されている
		束縛されている変数のシンボルと同じシンボルへ束縛を行う

	unify([A | Z],[B | Y],_,_,_) :- 
	Aは束縛されている && Bは束縛されていない |
		unify([Z],[Y],_,_,_), BをAの束縛されているシンボルへ束縛
		
	unify([X, X], [a, Y])
*/
(
	unify([A | Z], [B | Y], QUERY_OUT, FACT_OUT, BINDING, RES),
	vars ={
		{ p(A), bind(BIND_A), $p1 },
		{ p(B), bind(null),   $p2 },$p3
	},
	symbols ={
		{ p(BIND_A), $p4 }, $p5
	}
		:-
	QUERY_OUT=[A | QUERY_OUT_2], FACT_OUT=[B | FACT_OUT_2], BINDING=[BIND | BINDING_2],
	unify(Z, Y, QUERY_OUT_2, FACT_OUT_2, BINDING_2, RES),
	vars ={
		{ p(A), bind(BIND_A), $p1 },
		{ p(B), bind(BIND_B), p(BIND), $p2 },$p3
	},
	symbols ={
		{ p(BIND_A), p(BIND_B), $p4 }, $p5
	}
),
/*
	unify([A | Z],[B | Y],_,_,_) :- 
	Bは束縛されている && Aは束縛されていない |
		unify([Z],[Y],_,_,_), AをBの束縛されているシンボルへ束縛

	unify([X, Y], [a, X])
*/
(
	unify([A | Z], [B | Y], QUERY_OUT, FACT_OUT, BINDING, RES),
	vars ={
		{ p(A), bind(null), $p1 },
		{ p(B), bind(BIND_B),   $p2 },$p3
	},
	symbols ={
		{ p(BIND_B), $p4 }, $p5
	}
		:-
	QUERY_OUT=[A | QUERY_OUT_2], FACT_OUT=[B | FACT_OUT_2], BINDING=[BIND | BINDING_2],
	unify(Z, Y, QUERY_OUT_2, FACT_OUT_2, BINDING_2, RES),
	vars ={
		{ p(A), bind(BIND_A), p(BIND),$p1 },
		{ p(B), bind(BIND_B), $p2 },$p3
	},
	symbols ={
		{ p(BIND_A), p(BIND_B), $p4 }, $p5
	}
),
/*
	unify(_,_,_,_,_) :- fail
	このルールが最も優先度が低ければ、上のルールから外れたものは失敗
*/
(
	unify(A, B, QUERY_OUT, FACT_OUT, BINDING, RES)
		:-
	QUERY_OUT=A, FACT_OUT=B, BINDING=[],
	unify_no(RES)
),
/********************************************************************
	初期状態 => unifyの準備 choiceの設定
********************************************************************/
/*
	{ query([...]) }, % BOX
	predicates(L0), % 先頭
	{ list(L0, L1) ,choice(null) }
		:-
	{ query([...]), choice(CH) }, % BOX
	predicates(L0), % 先頭
	{ choice(CH), list(L0, L1) }
*/
(
	predicates(L0), % 先頭 TODO:index化
	{ list(L0, L1), $p1 },
	{ query(QUERY), choice(null), active, $p2 }
		:-
	predicates(L0),
	{ choice(CH), list(L0, L1), $p1 },
	{ query(QUERY), choice(CH), active, $p2 } % choiceの貼り付け
),
/*
	choiceがあるheadとクエリーのunify (active -> trial)
*/
(
	{ choice(CH), head(FACT_IN), $p1 },
	{ query(QUERY_IN), choice(CH), active, $p2 }
		:-
	{ choice(CH), head(FACT_OUT), $p1 },
	{ query(QUERY_OUT), choice(CH), trial, binding(BINDING), result(RES), $p2 },
	unify(QUERY_IN, FACT_IN, QUERY_OUT, FACT_OUT, BINDING, RES)
),
/********************************************************************
	unbinding 	
********************************************************************/
/*
	unbinding([]) :- unbound
	変数の束縛もどしの終了
*/
(
	UNBIND = unbinding([]) :- UNBIND = unbound
),
/*
	unbinding([A |Z]) :- Aの先が変数でbindされてる |
		bind(null) にする
*/
(
	UNBIND = unbinding([A | Z]),
	vars = {
		{ p(A), bind(BIND), $p1}, $p2
	},
	symbols = {
		{ p(BIND), $p3 }, $p4
	}
		:-
	UNBIND = unbinding(Z),
	vars = {
		{ bind(null), $p1}, $p2
	},
	symbols = {
		{ $p3 }, $p4
	}
),
/*
	unbinding([A |Z]) :- Aの先がconnect |
		connectの除去
*/
(
	UNBIND = unbinding([A | Z]),
	vars = {
		{ p(CONN_A), bind(null), $p1}, connect(CONN_A, CONN_B, A),
		{ p(CONN_B), bind(null), $p2}, $p3
	},
		:-
	UNBIND = unbinding(Z),
	vars = {
		{ bind(null), $p1},
		{ bind(null), $p2}, $p3
	},
),
/********************************************************************
	trialでunify_noの場合には次の事実/ルールのunifyを
********************************************************************/
/*
	trial&unify_no => unbindingを行う
*/
(
	{ query(QUERY), binding(BIND), result(RES), trial, $p1 },
	unify_no(RES)
		:-
	{ query(QUERY), binding(UNBIND), trial, $p1 },
	UNBIND=unbinding(BIND)
),
/*
	unbound, trial -> choiceを次のものへ移動＆BOXのアクティブ化 active
*/
(
	{ query(QUERY), choice(CH), binding(BIND), trial, $p1 }, BIND=unbound
	{ choice(CH), list(PRE,  NEXT ), $p2 }, % 現在の選択ポイント
	{             list(NEXT, NEXT2), $p3 }, % 次の選択ポイント
		:-
	{ query(QUERY), choice(CH), active, $p1 },
	{              list(PRE,  NEXT ), $p2 }, % 現在の選択ポイント
	{  choice(CH), list(NEXT, NEXT2), $p3 }, % 次の選択ポイント
),
/*
	次のものがなければ fail
*/
(
	{ query(QUERY), choice(CH), binding(BIND), trial, $p1 }, BIND=unbound
	{ choice(CH), list(PRE,  NEXT ), $p2 }, % 現在の選択ポイント
	NEXT = null
		:-
	{ query(QUERY), choice(null), fail, $p1 },
	{              list(PRE,  NEXT ), $p2 }, % 現在の選択ポイント
	NEXT = null
),
/********************************************************************
	redo 	
********************************************************************/
/*
	unbinding start TODO:
*/
/*(
	unify_yes, redo, binding(BIND)
		:-
	unbinding(BIND), redo % TODO:redoほしい？
),*/
/*
	テストデータ
*/
% シンボルテーブル
symbols = {
	{ 'a', p(S1_1), p(S1_2), p(S1_3) }
	{ 'b', p(S2_1), p(S2_2) }
	{ 'c', p(S3_1), p(S3_2) }
	{ 'hoge', p(S4_1), p(S4_2), p(S4_3),p (S4_4) }
},
% 変数テーブル
% bindのリンク先が束縛された値 null のときは束縛されていない
vars = {
	{ 'X', p(V1_1)/*, p(V1_2)*/, bind(null) }
%	{ 'Y', p(V2_1), p(V2_2), bind(null) }
%	{ 'Z', p(V3_1), p(V3_2), bind(null) } 
},
% 述語リスト
predicates(L), % 先頭
{ list(L , L0),   head(HEAD0), body(BODY0) }, HEAD0=[S4_4, S2_2, S3_2], BODY0=[],
{ list(L0, L1),   head(HEAD1), body(BODY1) }, HEAD1=[S4_1, S1_1, S2_1], BODY1=[],
{ list(L1, L2), head(HEAD2), body(BODY2) }, HEAD2=[S4_2, S1_2, S3_1], BODY2=[],
L2=null,
% [X, X] [Y, a]
% unify([V1_1, V1_2], [V2_1, S1_1], QUERY, FACT, BINDING), redo,
% query(QUERY), fact(FACT), binding(BINDING)
% BOXModel acitve, trial(unify中), 
{
	query(QUERY),
	active,
	choice(null) % Choice Point
}, QUERY=[S4_3, V1_1, S1_3] % [hoge, a, X]