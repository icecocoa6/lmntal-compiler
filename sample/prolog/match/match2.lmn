/*
 マッチングと代入
 束縛リストを返す
 
 ユニフィケーション
*/
%%%%% マッチングのルール
% true
(
	BINDING = match([], [])
		:-
	BINDING = []
),
% 再帰ルール
% シンボルが同じ
(
	BINDING = match([A | L], [B | M]),
	symbols = {
		{ p(A), p(B), $r1 }, $r2
	}
		:-
	BINDING = match(L, M),
	symbols = {
		{             $r1 }, $r2
	}
),
% 変数にバインディング (symbol, list)
(
	BINDING = match([var(V) | L], [B | M]),
		:-
	BINDING = [[V , B] | match(L, M)],
),
(
	BINDING = match([A | L], [var(V) | M]),
		:-
	BINDING = [[V , A] | match(L, M)],
),
% ユニフィケーション
(
	BINDING = match([var(V) | L], [var(W) | M])
		:-
	BINDING = [[V | W] | match(L, M)],
),
% 入れ子 上のルールのほうが「優先度が高い」と仮定
% symbols に入っていないリンク先は「リスト」と仮定
(
	BINDING = match([A | L], [B | M])
		:-
	BINDING = [match(A, B) | match(L, M)]
),
% 上のほうが「優先度が高い」と仮定する
% シンボルが違う/fail
(
	BINDING = match(A, B)
		:-
	BINDING = [], fail, null(A), null(B), % TODO: 消す
),
% テストデータ
% 記号テーブル
symbols = {
//	{ a, p(A1), p(A2) },
//	{ b, p(B1) }
	{ taro,     p(S1_1), p(S1_2) },
	{ like,     p(S2_1), p(S2_2) },
	{ coffer,   p(S3_1)          }
},
//binding = match([S1_1, var(x), S3_1], [S1_2, var(z), var(y)])
//binding = match([var(x), A2 ], [A1, B1])
//binding = match([S1_1, var(x), var(y) ], [S1_2, S2_1, S3_1])
binding = match([S1_1, S2_1, var(x) ], [S1_2, S2_2, [var(x), S3_1]])
