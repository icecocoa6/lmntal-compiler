
 statespace{
 
  18944::{el{pota(5), potb(0)}, '@5'},
  6400::{el{pota(6), potb(3)}, '@5'},
  256::{el{pota(0), potb(0)}, '@5'},
  2560::{el{pota(3), potb(0)}, '@5'},
  7680::{el{pota(7), potb(2)}, '@5'},
  17664::{el{pota(5), potb(3)}, '@5'},
  20480::{el{pota(2), potb(3)}, '@5'},
  1024::{el{pota(7), potb(0)}, '@5'},
  20736::{el{pot(5)}, '@5'},
  22016::{el{pota(2), potb(0)}, '@5'},
  13824::{el{pota(1), potb(0)}, '@5'},
  15104::{el{pota(0), potb(1)}, '@5'},
  12544::{el{pota(1), potb(3)}, '@5'},
  8960::{el{pota(0), potb(2)}, '@5'},
  11264::{el{pota(4), potb(0)}, '@5'},
  9984::{el{pota(4), potb(3)}, '@5'},
  1280::{el{pota(0), potb(3)}, '@5'},
  5120::{el{pota(6), potb(0)}, '@5'},
  16384::{el{pota(7), potb(1)}, '@5'},
  3840::{el{pota(3), potb(3)}, '@5'},
  2304::{el{pota(7), potb(3)}, '@5'}.
  913::{el{pota(7), potb(3)}, '@5'}.
  
  trans(init, 256).
  trans(18944,1024),trans(18944,17664),trans(18944,256),trans(18944,20480),trans(18944,20736),
  trans(6400,2304),trans(6400,1280),trans(6400,5120),trans(6400,7680),
  trans(256,1024),trans(256,1280),
  trans(2560,1024),trans(2560,3840),trans(2560,256),trans(2560,1280),
  trans(7680,2304),trans(7680,8960),trans(7680,1024),trans(7680,6400),
  trans(17664,2304),trans(17664,1280),trans(17664,18944),trans(17664,16384),
  trans(20480,2304),trans(20480,1280),trans(20480,22016),trans(20480,18944),
  trans(1024,2304),trans(1024,256),trans(1024,9984),
  trans(22016,1024),trans(22016,20480),trans(22016,256),trans(22016,8960),
  trans(13824,1024),trans(13824,12544),trans(13824,256),trans(13824,15104),
  trans(15104,16384),trans(15104,1280),trans(15104,256),trans(15104,13824),
  trans(12544,2304),trans(12544,1280),trans(12544,13824),trans(12544,11264),
  trans(8960,7680),trans(8960,1280),trans(8960,256),trans(8960,22016),
  trans(11264,1024),trans(11264,9984),trans(11264,256),trans(11264,12544),
  trans(9984,2304),trans(9984,1280),trans(9984,11264),trans(9984,1024),
  trans(1280,2304),trans(1280,256),trans(1280,2560),
  trans(5120,1024),trans(5120,6400),trans(5120,256),trans(5120,3840),
  trans(16384,2304),trans(16384,15104),trans(16384,1024),trans(16384,17664),
  trans(3840,2304),trans(3840,1280),trans(3840,2560),trans(3840,5120),
  trans(2304,1280),trans(2304,1024).
  trans(5120,913).
 }.
 
 // -------------------------------------------------------------

 statespace{$ss, @ss}, tmp{@rule}
 :- uniq
 |  statespace{trans{}, state{}. @rule, $ss, @ss}.
    
  tmp{
     {+Nexts, id($id), trans($fromID, $toID), $s, @s}
     :- int($id), int($fromID), int($toID),
         $id =\= $fromID
      | {+Nexts, id($id), $s,  @s}.
     {+Nexts, id($id), trans(init, $toID), $s, @s}
     :- int($id), int($toID)
      | {+Nexts, id($id), $s,  @s}.
   }.
 
 statespace{'::'($id2, {$p[]}), state{$s, @s}, $ss, @ss}
 :- int($id2)
 | statespace{ state{ '::'($id2, {$p[]}), $s, @s}, $ss, @ss}.
 
  statespace{trans($from, $to), trans{$t, @t}, $ss, @ss}
 :- unary($from), unary($to)
 | statespace{ trans{ trans($from, $to), $t, @t}, $ss, @ss}.
 


 R = getInitialStateID(Next),
  statespace{+Next, trans{trans(init, $initID), $t, @t}, 
             state{ '::'($id, {$p[]}), $s, @s}, $ss, @ss},
 :- int($initID), int($id), $initID =:= $id
 | R = $id,
   statespace{trans{trans(init, $initID), $t, @t}, 
              state{'::'($id, {$p[]}), $s, @s}, $ss, @ss}.
 
 R = getStateFromID($id, ID),
  statespace{+ID, state{'::'($id2, {$p[]}), $s, @s},
             $ss, @ss},
 :- int($id), int($id2), $id =:= $id2
 |  {+R, $p[]},
    statespace{state{'::'($id2, {$p[]}), $s, @s}, $ss, @ss}.

   
   
 R = getNextStatesFromID($id, Nexts),
  statespace{+Nexts, trans{$s[], @s}, $ss, @ss },
 :- int($id)
 |  R = getNextStatesFromID($id, Nexts),
    statespace{{+Nexts, id($id), $s[]}, trans{$s[], @s}, $ss, @ss }.
    
 R = getNextStatesFromID($id, Nexts),
   statespace{{+Nexts, id($i), $nexts }, $ss, @ss }/
 :- int($id), int($i)
 |  {+R, $nexts},
     statespace{$ss, @ss }.

 //------------------------------------------------------

 //最初の状態番号の取得
 statespace{$ss, @ss}
 :- uniq 
 | statespace{$ss, @ss, +Next},
   call = getInitialStateID(Next).
   
 //次の遷移の膜を取得
 call($id), statespace{$ss, @ss}
 :- int($id), uniq($id)
 | transitions = getNextStatesFromID($id, statespace{$ss, @ss}),call($id).
 
 //膜から遷移を取得
 transitions({trans($from, $to), $t, @t})
 :- int($from), int($to), uniq($to)
 | transitions({trans($from, $to), $t, @t}), call($to).
 
  
 //全状態にNextStatesで一階層先の遷移を確認
  call($id),statespace{$ss, @ss}
 :- int($id),uniq($id)
  | $id = getNextStatesFromID($id, statespace{$ss, @ss}),call($id).


 //遷移がないものを最終状態とする
 call($id),$id2 = ({}):-
  int($id),int($id2),$id == $id2 ,uniq($id,$id2)|
 finalstateID($id),call($id),$id2 = ({}).
 

 finalstateID($id),statespace{$ss, @ss}:-
 int($id),uniq($id)|
  finalstate = getStateFromID($id,statespace{$ss, @ss}).

  out{}.
  
 finalstate({$p[]}),out{$q}
 :- out{finalstate{$p[]},$q}.