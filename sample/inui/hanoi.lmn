io.use.

//function hanoi
R=do(hanoi(N, From, To)) :- int(N), int(From), int(To), N = 1 |
	R=do([pr([string.of_int(N),string.of_int(From),string.of_int(To),"\n"])]).
R=do(hanoi(N, From, To)) :- int(N), int(From), int(To), N > 1 |
	R=do([hanoi(N-1, From, 6-From-To), pr([string.of_int(N),string.of_int(From),string.of_int(To),"\n"]), hanoi(N-1, 6-From-To, To)]).

//function pr
R=do(pr(S)):-R=print(S).

//main
r=do(hanoi(3, 1, 2)).

//do sequentially
L=do([C|R]):-L=[do(C)|R].
L=[done|R]:-L=do(R).
L=do([]):-L=done.
L=[done]:-L=done.

//こういう風に単純に書きたい
//右辺でアトムが生成される度にルール適用を行えば可能か
%io.use.
%hanoi(N, From, To) :- int(N), int(From), int(To), N = 1 |
%	ret=print([string.of_int(N),string.of_int(From),string.of_int(To),"\n"]).
%hanoi(N, From, To) :- int(N), int(From), int(To), N > 1 |
%	hanoi(N-1, From, 6-From-To), ret=print([string.of_int(N),string.of_int(From),string.of_int(To),"\n"]), hanoi(N-1, 6-From-To, To).
%hanoi(3, 1, 2).