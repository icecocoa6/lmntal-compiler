{
module(new).

H=new.mapsite :- H={
	}.
	
H=new.room(N) :- int(N) | H={
	oop.extends(new.mapsite).
	//field
	roomNo(N).
	sides=[null,null,null,null].
	//method
	//list.get すると要素がなくなってしまうので，参照を追加する
	H=getSide(0), sides=[{$p,@p},S,E,W] :- H=N, sides=[{$p,@p,+N},S,E,W].
	H=getSide(1), sides=[N,{$p,@p},E,W] :- H=S, sides=[N,{$p,@p,+S},E,W].
	H=getSide(2), sides=[N,S,{$p,@p},W] :- H=E, sides=[N,S,{$p,@p,+E},W].
	H=getSide(3), sides=[N,S,E,{$p,@p}] :- H=W, sides=[N,S,E,{$p,@p,+W}].
	setSide(N, MapSite), sides=Sides :- sides=list.set(Sides, N, MapSite, old).
	old(Old) :- nlmem.kill(Old).//private
	enter :- .
	}.

H=new.wall :- H={
	oop.extends(new.mapsite).
	wall.//目印
	//method
	enter :- done.
	}.

H=new.door(R1, R2) :- H={
	oop.extends(new.mapsite).
	//field
	room1(R1).
	room2(R2).
	isopen(false).
	//method
	enter :- done.
	H=other_side_from(R) :-H={room(R)}.
	}.

H=new.maze :- H={
	//field
	//method
	addRoom(R) :- room(R).
	H=room_no(N) :- int(N) | H={}.
	}.
	
H=new.mazegame :- H={
	//field
	//method
	H=create_maze :- H={
		maze=new.maze.
		r1=oop.ref(new.room(1), r12).
		r2=oop.ref(new.room(2), r22).

		r1(R1), r2(R2), r12(R12), r22(R22), maze={$p, @p} :-
			door1=oop.ref(new.door(R1, R2), door12),
			maze={$p, @p, addRoom(R12), addRoom(R22)}.
		
		r12(R), door1(D) :- oop.msg(R, {
			setSide(0, new.wall).
			setSide(1, D).
			setSide(2, new.wall).
			setSide(3, new.wall).
			}).
		r22(R), door12(D) :- oop.msg(R, {
			setSide(0, new.wall).
			setSide(1, new.wall).
			setSide(2, new.wall).
			setSide(3, D).
			}).
		}.
	//MazeFactory を受け取る		
	H=create_maze({$p,@p}) :- H=return({
		$p, @p.
		m=makeMaze.
		r1=oop.ref(oop.ref(makeRoom(1), r12), r13).
		r2=oop.ref(oop.ref(makeRoom(2), r22), r23).
		r1(R1), r2(R2) :- d1=oop.ref(makeDoor(R1, R2), d12).
		m(M), r12(R1), r22(R2) :- oop.msg(M, {addRoom(R1),addRoom(R2)}).
		
		r13(R), d1(D) :- oop.msg(R, {
				setSide(0, new.wall).
				setSide(1, D).
				setSide(2, new.wall).
				setSide(3, new.wall).
			}).
		r23(R), d12(D) :- oop.msg(R, {
				setSide(0, new.wall).
				setSide(1, new.wall).
				setSide(2, new.wall).
				setSide(3, D).
			}).
		}).
	}.
	
H=new.mazefactory :- H={
	//method
	H=makeMaze :- H=new.maze.
	H=makeWall :- H=new.wall.
	H=makeRoom(N) :- int(N) | H=new.room(N).
	H=makeDoor(R1, R2) :- H=new.door(R1, R2).
	}.

}.

oop.use.
a=new.mazegame.
a(A) :- oop.msg(A, {maze=create_maze(new.mazefactory)}).