tk.use.

//ツールバー
tb=tk.toolbar.

//テキストエリア
t=tk.text(24, 40).
t(T) :- unary(T) | r1=tk.pack(T), tt(T).

//開くボタン
b1=tk.button("Open", OpenAction).
OpenAction={
	eventOpen :- openfile=tk.getOpenFile.
	openfile(File) :- string(File) | text=io.gets(File).
	tt(T), text(Text) :- unary(T), string(Text) | r=tk.text_set(T, Text), tt(T).
}.
tb(ToolBar), b1(B) :- unary(ToolBar) | r2=tk.pack(ToolBar, B), tb(ToolBar).

//保存ボタン
b2=tk.button("Save", SaveAction).
SaveAction={
	eventSave, tt(T) :- unary(T) | savefile=tk.getSaveFile, str=tk.text_get(T), tt(T).
	savefile(File), str(Str) :- string(File), string(Str) | r=io.puts(File, Str).
}.
tb(ToolBar), b2(B) :- unary(ToolBar) | r3=tk.pack(ToolBar, B), tb(ToolBar).

//配置し終わったらイベントループに入る
r1(done), r2(done), r3(done) :- tk.loop.

{
module(tk).

[:/*inline_define*/
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
:].

/**
 * ルートフレームが生成されます
 */
tk.use :- tk.root=[:/*inline*/
	JFrame frame = new JFrame("LMNtal/Tk");
	//とりあえず BoxLayout
	BoxLayout layout = new BoxLayout(frame.getContentPane(), BoxLayout.PAGE_AXIS);
	frame.setLayout(layout);
	frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	Atom a = mem.newAtom(new ObjectFunctor(frame));
	mem.relink(a, 0, me, 0);
	me.remove();
	:].

/**
 * フレームを表示してイベントループに入ります
 */
tk.loop, tk.root(Frame) :- sys.perpetual(on), tk.root=[:/*inline*/
	JFrame frame = (JFrame)me.nthAtom(0).getFunctor().getValue();
	frame.pack();
	frame.setVisible(true);
	//この下は必要か？
	Atom a = mem.newAtom(new ObjectFunctor(frame));
	mem.relink(a, 0, me, 1);
	me.nthAtom(0).remove();
	me.remove();
	:](Frame).

/**
 * ボタンを生成します
 */
H=tk.button(Label, {$p, @p}) :- string(Label) | $p, @p, H=[:/*inline*/
	String label = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	JButton button = new JButton(label);
	button.addActionListener(new TkAction(mem, label));
	Atom a = mem.newAtom(new ObjectFunctor(button));
	mem.relink(a, 0, me, 1);
	me.nthAtom(0).remove();
	me.remove();
	:](Label).

[:/*inline_define*/
class TkAction implements ActionListener {
	private Membrane mem;
	private String label;
	
	public TkAction(Membrane mem, String label) {
		this.mem = mem;
		this.label = label;
	}
	
	public void actionPerformed(ActionEvent e) {
		//System.out.println(label);
		mem.newAtom(new SymbolFunctor("event"+label, 0));
	}
}
:].

/**
 * テキストエリアを生成します
 */
H=tk.text(Width, Height) :- int(Width), int(Height) | H=[:/*inline*/
	int width = ((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
	int height = ((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
	JTextArea text = new JTextArea(width, height);
	Atom a = mem.newAtom(new ObjectFunctor(text));
	mem.relink(a, 0, me, 2);
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](Width, Height).

/**
 * テキストエリアのテキストを取得します
 */
H=tk.text_get(Text) :- H=[:/*inline*/
	JTextArea ta = (JTextArea)me.nthAtom(0).getFunctor().getValue();
	String text = ta.getText();
	Atom a = mem.newAtom(new StringFunctor(text));
	mem.relink(a, 0, me, 1);
	me.nthAtom(0).remove();
	me.remove();
	:](Text).

/**
 * テキストエリアに文字列をセットします
 */
H=tk.text_set(Text, Str) :- class(Text, "javax.swing.JTextArea"), string(Str) | H=[:/*inline*/
	JTextArea ta = (JTextArea)me.nthAtom(0).getFunctor().getValue();
	String str = ((StringFunctor)me.nthAtom(1).getFunctor()).stringValue();
	ta.setText(str);
	Atom a = mem.newAtom(new SymbolFunctor("done", 1));
	mem.relink(a, 0, me, 2);
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](Text, Str).

/**
 * コンポーネントを配置します
 */
H=tk.pack(Component), tk.root(Frame) :- class(Component, "javax.swing.JComponent"), class(Frame, "javax.swing.JFrame") | H=done, tk.root=[:/*inline*/
	JFrame frame = (JFrame)me.nthAtom(0).getFunctor().getValue();
	JComponent component = (JComponent)me.nthAtom(1).getFunctor().getValue();
	frame.getContentPane().add(component);
	Atom a = mem.newAtom(new ObjectFunctor(frame));
	mem.relink(a, 0, me, 2);
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](Frame, Component).
	
/**
 * コンポーネントを配置します
 */
H=tk.pack(Parent, Component) :- class(Parent, "java.awt.Container"), class(Component, "javax.swing.JComponent") | H=[:/*inline*/
	Container container = (Container)me.nthAtom(0).getFunctor().getValue();
	JComponent component = (JComponent)me.nthAtom(1).getFunctor().getValue();
	container.add(component);
	Atom a = mem.newAtom(new SymbolFunctor("done", 1));
	mem.relink(a, 0, me, 2);
	me.nthAtom(0).remove();
	me.nthAtom(1).remove();
	me.remove();
	:](Parent, Component).

/**
 * 開くファイルを選択するダイアログを表示
 * String
 */
H=tk.getOpenFile, tk.root(Frame) :- class(Frame, "javax.swing.JFrame") | tk.root(Frame), H=[:/*inline*/
	JFrame frame = (JFrame)me.nthAtom(0).getFunctor().getValue();
	JFileChooser fc = new JFileChooser();
	int returnVal = fc.showOpenDialog(frame);
	Functor f;
	if(returnVal == JFileChooser.APPROVE_OPTION) {
		String file = fc.getSelectedFile().getAbsolutePath();
		f = new StringFunctor(file);
	} else {
		f = new SymbolFunctor("nil", 1);
	}
	Atom a = mem.newAtom(f);
	mem.relink(a, 0, me, 1);
	me.nthAtom(0).remove();
	me.remove();
	:](Frame).

/**
 * 保存するファイルを選択するダイアログを表示
 * String
 */
H=tk.getSaveFile, tk.root(Frame) :- class(Frame, "javax.swing.JFrame") | tk.root(Frame), H=[:/*inline*/
	JFrame frame = (JFrame)me.nthAtom(0).getFunctor().getValue();
	JFileChooser fc = new JFileChooser();
	int returnVal = fc.showSaveDialog(frame);
	Functor f;
	if(returnVal == JFileChooser.APPROVE_OPTION) {
		String file = fc.getSelectedFile().getAbsolutePath();
		f = new StringFunctor(file);
	} else {
		f = new SymbolFunctor("nil", 1);
	}
	Atom a = mem.newAtom(f);
	mem.relink(a, 0, me, 1);
	me.nthAtom(0).remove();
	me.remove();
	:](Frame).

H=tk.toolbar, tk.root(Frame) :- class(Frame, "javax.swing.JFrame") | H=[:/*inline*/
	JFrame frame = (JFrame)me.nthAtom(0).getFunctor().getValue();
	JToolBar toolbar = new JToolBar();
	frame.setLayout(new BorderLayout());
	frame.getContentPane().add("North", toolbar);
	Atom a = mem.newAtom(new ObjectFunctor(toolbar));
	mem.relink(a, 0, me, 1);
	me.nthAtom(0).remove();
	me.remove();
	
	Atom root = mem.newAtom(new SymbolFunctor("root", 1, "tk"));
	Atom f = mem.newAtom(new ObjectFunctor(frame));
	mem.newLink(root, 0, f, 0);
	:](Frame).
}.
