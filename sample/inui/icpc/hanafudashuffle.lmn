/*
 * 花札シャッフル
 * http://acm.pku.edu.cn/JudgeOnline/showproblem?problem_id=1978
 * (http://ccserv.adm.ehime-u.ac.jp/ICPC/problems/domestic/d2004/A.jp/A.html)
 *
 * -v0オプションをつけると問題の指示通りに答えが表示される
 *
 * History
 * 2006.02.28 作成
 *            1回分のデータしか実行できない
 * 2006.03.01 shuffle手順をリストにつないだ
 *            まだ1回分のデータしか実行できない
 * 2006.03.11 sample inputは全部解けた
 *            io.list_of_stdinを使っているので入力が大きいと解けない
 */

//publicのリストモジュールが使えないとき
{
module(list).
H=list.split(List,  X, Tail) :- X=0    | H=[], Tail=List.
H=list.split([   ], X, Tail) :- int(X) | H=[], Tail=[].
H=list.split([Y|Z], X, Tail) :- X>0    | H=[Y|list.split(Z,X-1,Tail)].

H=list.append([], B) :- H=B.
H=list.append([Value|Next], B) :- H=[Value|list.append(Next, B)].
}.

io.use.

//膜を使ってみた
//cards=[5,4,3,2,1]を作りたいときn(5)をこの膜につっこむ
{
make_cards.
n(N), cards(X) :- N>0 | cards=list.append(X,[N]), n(N-1).
}.
//上で出来たcardsを外に出すルール
{make_cards, cards(X), n(0), @p} :- ground(X) | {make_cards, @p}, cards(X).

//ここから始まる
s=io.list_of_stdin(), next_set.

//1行読み込んでP, Cを取り出す
next_set, s=[X|Z] :- ss=string.split(" ", X), s(Z), input_nr.
input_nr, ss=[N,R] :- n=string.int_of_str(N), r=string.int_of_str(R).
{make_cards, @p}, n(N) :- int(N) | {make_cards, n(N), cards=[], @p}, do_shuffle.

//手順に従ってシャッフル
do_shuffle, r(R), s=[X|Z] :- R > 0 | ss2=string.split(" ", X), s(Z), r(R-1).
ss2=[P,C] :- shuffle(string.int_of_str(P), string.int_of_str(C)).
shuffle(P,C), cards=[X|Z] :- int(P), int(C) | head=list.split([X|Z], P-1, tail), shuffle(C).
shuffle(C), tail(X) :- int(C) | head2=list.split(X, C, tail2).
r(R), head(X), tail2(Y), head2(Z) :- R > 0 | r(R), cards=list.append(Z,list.append(X,Y)), do_shuffle.
r(R), head(X), tail2(Y), head2(Z) :- R = 0 | cards=list.append(Z,list.append(X,Y)), shuffle_end.

//シャッフルが済んだら答えを表示して次の問題セットへ
shuffle_end, cards=[X|Z] :- ground(Z), r=io.print(string.str_of_int(X)), next_set.
