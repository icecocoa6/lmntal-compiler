//// 迷路の部品クラス

{module(mapSite).
H=mapSite.new :- H={mapSite}.
}.

//部屋
{module(room).
room@@
H=room.new(N) :- int(N) | H={room, roomNo(N), sides=Sides}, Sides=oolist.new(4).
getSide@@
H=getSide({sides=Sides, $p}, N, Res) :- int(N) |
	H={sides=_Sides, $p},
	_Sides=oolist.get(Sides, N, Res).
setSide@@
H=setSide({sides=Sides, $p}, N, MapSite) :- int(N) |
	H={sides=_Sides, $p},
	_Sides=list.set(Sides, N, MapSite, gc).
room_enter@@
H=enter({room, $p}, From, To) :-
	H={room, $p},
	gc(From),
	gc(To),
	gc=io.println("部屋に入りました").
}.

//壁
{module(wall).
wall@@
H=wall.new :- H={wall}.
H=enter({wall, $p}, From, To) :-
	H={wall, $p},
	gc(From),
	gc(To),
	gc=io.println("そこは壁です").
}.

//ドア
{module(door).
door@@
H=door.new(R1, R2) :- H={door, room1(R1), room2(R2), isopen(false)}.
otherSideFrom@@//TODO
H=otherSideFrom({door, room1=R1, room2=R2, $p}, From, To) :-
	H={door, room1=R1, room=_R2, $p}, gc(From), To=oo.ref(R2, _R2).
door_enter@@
H=enter({door, $p}, FromRoom, To) :-
	H=enter2(otherSideFrom({door, r(R), to(To), otherSide(Room), $p}, FromRoom, Room)),
	R=io.println("ドアを開けます").
H=enter2({door, r(R), to(To), otherSide(Room), $p}), R=done :-
	H={door, $p}, To=enter(Room, {}, {}).
}.

{module(enchantedRoom).
H=enchantedRoom.new(N) :- int(N) | H={
	oo.extends(room.new(N)).
	enchantedRoom.
	}.
}.

{module(doorNeedingSpell).
H=doorNeedingSpell.new(R1, R2) :- H={
	oo.extends(door.new(R1, R2)).
	doorNeedingSpell.
	}.
}.

//迷路
{module(maze).
maze@@
H=maze.new :- H={rooms=Rooms}, Rooms=oolist.new(0).
addRoom@@
H=addRoom({rooms=Rooms, $p}, Room) :-
	H={rooms=_Rooms, $p}, _Rooms=[Room|Rooms].
roomNo@@
H=roomNo({rooms=Rooms, $p}, N, Res) :- int(N) |
	H={rooms=_Rooms, $p}, _Rooms=oolist.get(Rooms, N, Res).
}.

//// 迷路を作成するクラス

{module(mazeGame).
mazeGame@@
H=mazeGame.new :- H={mazeGame}.
createMaze@@
H=createMaze({mazeGame, $p}, Maze) :-
	H={mazeGame, $p},
	Maze=addRoom(addRoom(maze.new, Room12), Room22),
	Room1=setSide(setSide(setSide(setSide(oo.ref(room.new(1), Room12), 0, wall.new), 1, Door1), 2, wall.new), 3, wall.new),
	Room2=setSide(setSide(setSide(setSide(oo.ref(room.new(2), Room22), 0, wall.new), 1, wall.new), 2, Door2), 3, wall.new),
	Door1=oo.ref(door.new(Room1, Room2), Door2).
createMaze@@
H=createMaze({mazeGame, $p}, MazeFactory, Maze) :-
	H={mazeGame, $p},
	gc=makeDoor(makeRoom(makeRoom(makeMaze(MazeFactory, _Maze), 1, R11), 2, R21), R12, R22, oo.ref(D1, D2)),
	R14=oo.ref(oo.ref(R11, R12), R13),
	R24=oo.ref(oo.ref(R21, R22), R23),
	Maze=addRoom(addRoom(_Maze, R13), R23),
	gc=setSide(setSide(setSide(setSide(R14, 0, wall.new), 1, D1), 2, wall.new), 3, wall.new),
	gc=setSide(setSide(setSide(setSide(R24, 0, wall.new), 1, wall.new), 2, D2), 3, wall.new),
}.

//// Factory クラス

{module(mazeFactory).
mazeFactory@@
H=mazeFactory.new :- H={}.
//H=makeMaze({}, Maze) :- H={}, Maze=maze.new.
//H=makeWall({}, Wall) :- H={}, Wall=wall.new.
//H=makeRoom({}, N, Room) :- int(N) | H={}, Room=room.new(N).
//H=makeDoor({}, R1, R2, Door) :- H={}, Door=door.new(R1, R2).
}.

{module(enchantedMazeFactory).
H=enchantedMazeFactory.new :- H={}.
H=makeRoom({}, N, Room) :- int(N) | H=oo.ref({}, EMF), Room=enchantedRoom(N, castSpell(EMF)).
H=makeDoor({}, R1, R2, Door) :-
	H={}, Door=doorNeedingSpell(R1, R2).
}.

{module(bombedMazeFactory).
H=bombedMazeFactory.new :- H={}.
H=makeWall({}, Wall) :- H={}, Wall=bombedWall.new.
H=makeRoom({}, N, Room) :- int(N) | H={}, Room=roomWithABomb.new(N).
}.

//// メイン

io.use.
oo.clean.

start.

start :-
	scanner=java_util_Scanner.new(java_lang_System.in).
	gc=createMaze(mazeGame.new, maze).
	maze(Maze) :- gc=roomNo(Maze, 0, Room), gc=enter(Room, {}, player), next.
next, scanner(Scanner) :- scanner=nextInt(Scanner, n).

player(Room), n(N) :- gc=getSide(oo.ref(Room, FromRoom), N, MapSite), gc=enter(MapSite, FromRoom, player), next.