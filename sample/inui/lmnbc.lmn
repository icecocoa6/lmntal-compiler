/*
 * LMNtal dc by inui
 * 
 * 逆ポーランド記法の電卓
 * 
 * History
 *
 * 2006.07.04
 */
lexer.use.

stack=['('], postfix=[], val=lexer.next().

val(Val), postfix(Postfix) :- int(Val) | postfix=list.append(Postfix, [Val]), val=lexer.next().
val('('), stack(Stack) :- stack=['('|Stack], val=lexer.next().
val(')'), stack=[Top|Stack] :- stack(Stack), top(Top).
top('(') :- val=lexer.next().
top(Top1), stack=[Top2|Stack], postfix=Postfix :-
	top(Top2), stack=Stack, postfix=list.append(Postfix, [Top1]).

//演算子
val('+'), stack=[_UA|Stack], postfix=Postfix :- 
	if(is_operator(_UA), step1('+', _UA), stack=['+',_UA|Stack]).
val('-'), stack=[A,B|Stack] :- C=A-B | stack=[C|Stack], val=lexer.next().
val('*'), stack=[A,B|Stack] :- C=A*B | stack=[C|Stack], val=lexer.next().
val('/'), stack=[A,B|Stack] :- C=A/B | stack=[C|Stack], val=lexer.next().

step1(A, B) :- if(compareTo(A, B) >= 0, stack=Stack, potfix=list.append(Postfix, [A])).


//入力終了
val(eof), stack=[A|Stack] :- ground(Stack) | ans(A), lexer.delete.

H=compareTo('+', '+') :- H= 0.
H=compareTo('+', '-') :- H= 0.
H=compareTo('+', '*') :- H=-1.
H=compareTo('+', '/') :- H=-1.
H=compareTo('-', '+') :- H= 0.
H=compareTo('-', '-') :- H= 0.
H=compareTo('-', '*') :- H=-1.
H=compareTo('-', '/') :- H=-1.
H=compareTo('*', '+') :- H= 1.
H=compareTo('*', '-') :- H= 1.
H=compareTo('*', '*') :- H= 0.
H=compareTo('*', '/') :- H= 0.
H=compareTo('/', '+') :- H= 1.
H=compareTo('/', '-') :- H= 1.
H=compareTo('/', '*') :- H= 0.
H=compareTo('/', '/') :- H= 0.

H=is_operator('+') :- H=true.
H=is_operator('-') :- H=true.
H=is_operator('*') :- H=true.
H=is_operator('/') :- H=true.
H=is_operator( C ) :- H=false.