/*
 * swing 版テキストエディタ
 * 要 java_lib
 */

integer.use.

java_lang_String.use.
java_awt_event_ActionEvent.use.
java_io_File.use.
javax_swing_JViewport.use.

/////////////////////////////////////////////
// GUI の生成

{
module(editor).
//ActionListener つきの MenuItem を生成するルール
H=editor.item(Label) :-
	H=addActionListener(javax_swing_JMenuItem.new(Label), java_awt_event_ActionListener.new).
H=editor.item(Label, Listener) :-
	H=addActionListener(javax_swing_JMenuItem.new(Label), java_awt_event_ActionListener.new(Listener)).

H=editor.newAction(Tab) :- class(Tab, "javax.swing.JTabbedPane") | H={
	javax_swing_JTabbedPane.use.
	javax_swing_JViewport.use.
	tab(Tab).
	actionPerformed(ActionEvent), tab(Tab) :- 
		gc(ActionEvent),
		Scroll=javax_swing_JScrollPane.new(TextArea),
		tab=addTab(Tab, "", Scroll),
		TextArea=setFont(javax_swing_JTextArea.new, java_awt_Font.new("Monospaced", java_awt_Font.plain, 14)).	
	gc(Object) :- class(Object, "java.lang.Object") | .
	}.

H=editor.openAction(Frame, Tab) :-
	class(Frame, "javax.swing.JFrame"), class(Tab, "javax.swing.JTabbedPane") | H={
	javax_swing_JTabbedPane.use.
	java_io_File.use.
	integer.use.
	frame(Frame), tab(Tab).
	actionPerformed(ActionEvent), frame(Frame) :- class(Frame, "javax.swing.JFrame") |
		fc=showOpenDialog(javax_swing_JFileChooser.new, Frame, res), frame(Frame), gc(ActionEvent).
	res(0), tab(Tab), fc(FC) :-
		Scroll=javax_swing_JScrollPane.new(TextArea),
		tab=setSelectedIndex(getTabCount(addTab(Tab, Title, Scroll), Count), Count-1),
		gc=getSelectedFile(FC, X),
		gc=getAbsolutePath(getAbsolutePath(X, File), Title),
		TextArea=setText(setFont(
			javax_swing_JTextArea.new,
			java_awt_Font.new("Monospaced", java_awt_Font.plain, 14)), io.gets(File)).
	res_open(1), fc(FC) :- gc(FC).
	gc(Object) :- class(Object, "java.lang.Object") | .
	}.

H=editor.closeAllAction(Tab) :- class(Tab, "javax.swing.JTabbedPane") | H={
	javax_swing_JTabbedPane.use.
	tab(Tab).
	actionPerformed(ActionEvent), tab(Tab) :- gc(ActionEvent), tab=removeAll(Tab).
	gc(Object) :- class(Object, "java.lang.Object") | .
	}.
}.

//メニューバーを生成
SearchMenu=add(javax_swing_JMenu.new("Search"), editor.item("Search"), gc).
FileMenu=add(add(add(add(add(add(add(add(add(
	javax_swing_JMenu.new("File"),
	editor.item("New", editor.newAction(Tab3)), gc),
	editor.item("Open", editor.openAction(Frame, Tab4)), gc),
	editor.item("Close"), gc),
	editor.item("Close All", editor.closeAllAction(Tab2)), gc),
	javax_swing_JSeparator.new, gc),
	editor.item("Save"), SaveItem),
	editor.item("Save as"), gc),
	javax_swing_JSeparator.new, gc),
	editor.item("Exit", ExitActionListener), gc).
EditMenu=add(add(add(add(add(add(add(
	javax_swing_JMenu.new("Edit"),
	editor.item("Copy"), gc),
	editor.item("Cut"), gc),
	editor.item("Paste"), gc),
	editor.item("Select All"), gc),
	javax_swing_JSeparator.new, gc),
	editor.item("to Upper Case"), gc),
	editor.item("to Lower Case"), gc).
menuBar=add(add(add(
	javax_swing_JMenuBar.new,
	FileMenu, gc), EditMenu, gc), SearchMenu, gc).

saveItem=setEnabled(SaveItem, false).

//タブを生成
Tab4=cp(cp(cp(javax_swing_JTabbedPane.new, Tab1), Tab2), Tab3).

//フレームを生成
Frame=cp(setDefaultCloseOperation(getContentPane(setSize(
	javax_swing_JFrame.new("LMNtal Tab Editor"),
	600, 400), ContentPane), javax_swing_JFrame.exit_on_close), frame).
gc=add(ContentPane, "Center", Tab1, tab).

menuBar(MenuBar), frame(Frame) :- frame=setVisible(setJMenuBar(Frame, MenuBar), true).

/////////////////////////////////////////////
// アクションの定義

//アクションイベントからコマンド名を取得する
actionPerformed(ActionEvent) :- gc=getActionCommand(ActionEvent, cmd).

cmd("Save"), tab(Tab) :-
	tab=getSelectedComponent(getTitleAt(getSelectedIndex(Tab, Index), Index, File), Scroll),
	gc=getViewport(Scroll, Viewport), gc=getView(Viewport, TA),
	gc=getText(TA, Contents),
	r=io.puts(File, Contents).

cmd("Save as"), frame(Frame) :- class(Frame, "javax.swing.JFrame") |
	fc=showSaveDialog(javax_swing_JFileChooser.new, Frame, res_save), frame(Frame).
res_save(0), fc(FC), tab(Tab) :-
	gc=getSelectedFile(FC, X),
	gc=getAbsolutePath(getAbsolutePath(X, File), Title),
	tab=setTitleAt(getSelectedIndex(getSelectedComponent(Tab, Scroll), Index), Index, Title),
	gc=getViewport(Scroll, Viewport), gc=getView(Viewport, TA),
	gc=getText(TA, Contents),
	r=io.puts(File, Contents).
	
cmd("Close"), tab(Tab) :-
	tab=remove(getSelectedComponent(Tab, Scroll), Scroll).

//cmd("Close All"), tab(Tab) :- tab=removeAll(Tab).

cmd("Search") :- word=javax_swing_JOptionPane.showInputDialog("Input word.").
word(Word), tab(Tab) :-
	tab=getSelectedComponent(Tab, Scroll),
	gc=getViewport(Scroll, Viewport), gc=getView(Viewport, TA),
	ta=getCaretPosition(getText(TA, Text), Caret),
	gc=indexOf(Text, length(Word, len), Caret, index).
index(Index), len(Len), ta(TA) :- Start=Index, End=Index+Len | gc=requestFocus(select(TA, Start, End)).

cmd("Copy"), tab(Tab) :-
	tab=getSelectedComponent(Tab, Scroll),
	gc=getViewport(Scroll, Viewport), gc=getView(Viewport, TA),
	gc=copy(TA).
	
cmd("Cut"), tab(Tab) :-
	tab=getSelectedComponent(Tab, Scroll),
	gc=getViewport(Scroll, Viewport), gc=getView(Viewport, TA),
	gc=cut(TA).
	
cmd("Paste"), tab(Tab) :-
	tab=getSelectedComponent(Tab, Scroll),
	gc=getViewport(Scroll, Viewport), gc=getView(Viewport, TA),
	gc=paste(TA).
	
cmd("Select All"), tab(Tab) :-
	tab=getSelectedComponent(Tab, Scroll),
	gc=getViewport(Scroll, Viewport), gc=getView(Viewport, TA),
	gc=selectAll(TA).
	
cmd("to Upper Case"), tab(Tab) :-
	tab=getSelectedComponent(Tab, Scroll),
	gc=getViewport(Scroll, Viewport), gc=getView(Viewport, TA),
	gc=replaceSelection(getSelectedText(TA, Text), UpperCaseText),
	gc=toUpperCase(Text, UpperCaseText).
	
cmd("to Lower Case"), tab(Tab) :-
	tab=getSelectedComponent(Tab, Scroll),
	gc=getViewport(Scroll, Viewport), gc=getView(Viewport, TA),
	gc=replaceSelection(getSelectedText(TA, Text), LowerCaseText),
	gc=toLowerCase(Text, LowerCaseText).

ExitActionListener={
	actionPerformed(ActionEvent) :- gc=(ActionEvent), java_lang_System.exit(0).
	gc(Object) :- class(Object, "java.lang.Object") | .
}.

/////////////////////////////////////////////
// GC

gc(Object) :- class(Object, "java.lang.Object") | .
cp(Object, Object1, Object2) :- class(Object, "java.lang.Object") | Object1=Object, Object2=Object.