/**

C. Holzbaur and T. Fruhwirth, A Prolog Constraint Handling Rules Compiler and Runtime System, Special Issue Journal of Applied Artificial Intelligence on Constraint Handling Rules (C. Holzbaur and T. Fruhwirth, Eds.), Taylor & Francis, Vol 14(4), April 2000. 
http://www.informatik.uni-ulm.de/pm/fileadmin/pm/home/fruehwirth/Papers/aai99-final.ps.gz

¤è¤ê


Example 1.2 (Cycle)
The following rule finds all cycles of length five in a graph 
encoded through a collection of directed edges. 

edge(A,B), edge(B,C), edge(C,D), edge(D,E), edge(E,A) ==> loop([A,B,C,D,E]). 

Given these edges, 

edge(1,4), edge(1,9), edge(2,8), edge(3,10), edge(5,1), 
edge(5,8), edge(7,4), edge(7,5), edge(7,10), edge(8,3), 
edge(8,9), edge(9,3), edge(10,7). 

the rule adds the following constraints to the store: 

loop([3,10,7,5,8]), loop([8,3,10,7,5]), loop([5,8,3,10,7]), 
loop([7,5,8,3,10]), loop([10,7,5,8,3]). 

*/

edge(A0, B0), edge(B1, C0), edge(C1, D0), edge(D1, E0), edge(E1, A1) :- 
A0=A1, B0=B1, C0=C1, D0=D1, E0=E1 | 
edge(A0, B0), edge(B1, C0), edge(C1, D0), edge(D1, E0), edge(E1, A1), 
loop([A0, B0, C0, D0, E0]).


edge(1,4), edge(1,9), edge(2,8), edge(3,10), edge(5,1), 
edge(5,8), edge(7,4), edge(7,5), edge(7,10), edge(8,3), 
edge(8,9), edge(9,3), edge(10,7). 

