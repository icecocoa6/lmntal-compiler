%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% 5 moku narabe           by KUDO SHINTARO
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% 1:black 2:white
%
% {stone,
%  x( int ),y( int ),color( int ),
%  {arm,dir(1),hand(N,L1),hand(N,R1)},
%  {arm,dir(2),,},
%  {arm,dir(3),,},
%  {arm,dir(4),,},
%  [ns],[ch],[up],[li]
% }
%
% 1      2      3      4
%
% R       R           L
% |      /     L-R     \
% L     L               R
%
% 1:left  2:right
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% state : 
% start -> wait
% wait < click left > -> input
% input -> input_checking
% input_checking -> turn_end
% input_checking -> input_ok -> player_change
%  player_change -> player_changed -> link
%  link -> linking -> linked -> judge
%  judge -> judging
%  judging -> show_result
%   judging -> judged -> new_stone_delete
%   new_stone_delete -> new_stone_deleting -> new_stone_deleted 
%   new_stone_deleted -> update_ready
%   [ update_ready -> update_ready ] -> [ update -> update ]
%   update -> redraw -> drawed -> turn_end
% turn_end -> wait
% turn_end -> com_think
% com_think -> com_thinking -> input
% 
% show_result -> show_line
% [show_line -> show_line ] -> [ show_other -> show_other]
% show_other -> wait
%
% wait < click right > -> terminated
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

{

{data}.
{for_update}.
{dust}.
nowplayer(1).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ルール:入力に対するチェック
{rule_input_checker.
%  input_check(Xi,Yi),
%  {stone,x(X),y(Y),$s} :-
%    int(X),int(Y),int(Xi),int(Yi),X=Xi,Y=Yi|
%    {stone,x(X),y(Y),$s},input_fault(Xi,Yi).
a :- b.
}.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

input(X,Y),{data,$d},{rule_input_checker,$r,@r} :-
  int(X),int(Y)|
  {data,input_check(X,Y),$d,@r},{rule_input_checker,$r,@r},
  input_checking.

input_checking,{data,input_check(Xi,Yi),$d,@r}/ :- int(Xi),int(Yi)|
  input_ok(Xi,Yi),{data,$d}.
  
input_checking,{data,input_fault(Xi,Yi),$d,@r}/ :- int(Xi),int(Yi)|
  turn_end,{data,$d}.

input_ok(X,Y),nowplayer(C),{data,$p} :- int(X),int(Y),int(C) |
  {data,
   ns={stone,
      {arm,dir(1),hand(1,L1),hand(2,R1)},
      {arm,dir(2),hand(1,L2),hand(2,R2)},
      {arm,dir(3),hand(1,L3),hand(2,R3)},
      {arm,dir(4),hand(1,L4),hand(2,R4)},
      x(X),y(Y),color(C),up},
    L1=n,L2=n,L3=n,L4=n,R1=n,R2=n,R3=n,R4=n,
    $p},
  player_change,nowplayer(C).

player_change,nowplayer(1):- player_changed,nowplayer(2).
player_change,nowplayer(2):- player_changed,nowplayer(1).

player_changed :- link.

player_changed :- turn_end.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{rule_linker.

  ns={stone,x(X1),y(Y1),{arm,dir(1),hand(HN1,H1),$a1},$p},H1=n,
     {stone,x(X2),y(Y2),{arm,dir(1),hand(HN2,H2),$a2},$q},H2=n :-
  int(X1),int(X2),int(Y1),int(Y2),int(HN1),int(HN2),
  X1=X2,Y2-Y1=HN2-HN1|
  [:/*inline*/
    int x1=((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
    int x2=((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
    int y1=((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
    int y2=((IntegerFunctor)me.nthAtom(3).getFunctor()).intValue();
    int hn1=((IntegerFunctor)me.nthAtom(4).getFunctor()).intValue();
    int hn2=((IntegerFunctor)me.nthAtom(5).getFunctor()).intValue();
    System.out.println("link ("+ x1+","+y1+"):"+hn1+",("+x2+","+y2+"):"+hn2+".");
    me.nthAtom(0).remove();
    me.nthAtom(1).remove();
    me.nthAtom(2).remove();
    me.nthAtom(3).remove();
    me.nthAtom(4).remove();
    me.nthAtom(5).remove();
    me.remove();
  :](X1,X2,Y1,Y2,HN1,HN2),
  ns={stone,x(X1),y(Y1),{arm,dir(1),hand(HN1,X ),$a1},$p},
     {stone,x(X2),y(Y2),{arm,dir(1),hand(HN2,X ),$a2},$q}.

  ns={stone,x(X1),y(Y1),{arm,dir(3),hand(HN1,H1),$a1},$p},H1=n,
     {stone,x(X2),y(Y2),{arm,dir(3),hand(HN2,H2),$a2},$q},H2=n :-
  int(X1),int(X2),int(Y1),int(Y2),int(HN1),int(HN2),
  Y1=Y2,X2-X1=HN2-HN1|
  ns={stone,x(X1),y(Y1),{arm,dir(3),hand(HN1,X ),$a1},$p},
     {stone,x(X2),y(Y2),{arm,dir(3),hand(HN2,X ),$a2},$q}.

  ns={stone,x(X1),y(Y1),{arm,dir(2),hand(HN1,H1),$a1},$p},H1=n,
     {stone,x(X2),y(Y2),{arm,dir(2),hand(HN2,H2),$a2},$q},H2=n :-
  int(X1),int(X2),int(Y1),int(Y2),int(HN1),int(HN2),
  X1+Y1=X2+Y2,X2-X1=HN2-HN1|
  ns={stone,x(X1),y(Y1),{arm,dir(2),hand(HN1,X ),$a1},$p},
     {stone,x(X2),y(Y2),{arm,dir(2),hand(HN2,X ),$a2},$q}.

  ns={stone,x(X1),y(Y1),{arm,dir(4),hand(HN1,H1),$a1},$p},H1=n,
     {stone,x(X2),y(Y2),{arm,dir(4),hand(HN2,H2),$a2},$q},H2=n :-
  int(X1),int(X2),int(Y1),int(Y2),int(HN1),int(HN2),
  X1-Y1=X2-Y2,X2-X1=HN2-HN1|
  ns={stone,x(X1),y(Y1),{arm,dir(4),hand(HN1,X ),$a1},$p},
     {stone,x(X2),y(Y2),{arm,dir(4),hand(HN2,X ),$a2},$q}.

}.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
link, {rule_linker,@r},{data,$p} :-
    linking,{rule_linker,@r},{data,$p,@r}.
    
linking,{data,$p,@r}/ :- linked,{data,$p}.

linked :- judge.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{rule_judger.
  
  ns={stone,{arm,dir(D1),hand(HN11,L1),              $a1},color(C1),$p1},
     {stone,{arm,dir(D2),hand(HN21,L2),hand(HN22,L1),$a2},color(C2),$p2},
     {stone,{arm,dir(D3),hand(HN31,L3),hand(HN32,L2),$a3},color(C3),$p3},
     {stone,{arm,dir(D4),hand(HN41,L4),hand(HN42,L3),$a4},color(C4),$p4},
     {stone,{arm,dir(D5),              hand(HN52,L4),$a5},color(C5),$p5},data :-
  int(C1),int(C2),int(C3),int(C4),int(C5),C1=C2,C2=C3,C3=C4,C4=C5,
  int(D1),int(D2),int(D3),int(D4),int(D5),D1=D2,D2=D3,D3=D4,D4=D5,
  int(HN11),int(HN21),int(HN31),int(HN41),
  int(HN22),int(HN32),int(HN42),int(HN52)|
  ns={stone,{arm,dir(D1),hand(HN11,L1),              $a1},color(C1),li,$p1},
     {stone,{arm,dir(D2),hand(HN21,L2),hand(HN22,L1),$a2},color(C2),li,$p2},
     {stone,{arm,dir(D3),hand(HN31,L3),hand(HN32,L2),$a3},color(C3),li,$p3},
     {stone,{arm,dir(D4),hand(HN41,L4),hand(HN42,L3),$a4},color(C4),li,$p4},
     {stone,{arm,dir(D5),              hand(HN52,L4),$a5},color(C5),li,$p5},win(C1).

     {stone,{arm,dir(D1),hand(HN11,L1),              $a1},color(C1),$p1},
  ns={stone,{arm,dir(D2),hand(HN21,L2),hand(HN22,L1),$a2},color(C2),$p2},
     {stone,{arm,dir(D3),hand(HN31,L3),hand(HN32,L2),$a3},color(C3),$p3},
     {stone,{arm,dir(D4),hand(HN41,L4),hand(HN42,L3),$a4},color(C4),$p4},
     {stone,{arm,dir(D5),              hand(HN52,L4),$a5},color(C5),$p5},data :-
  int(C1),int(C2),int(C3),int(C4),int(C5),C1=C2,C2=C3,C3=C4,C4=C5,
  int(D1),int(D2),int(D3),int(D4),int(D5),D1=D2,D2=D3,D3=D4,D4=D5,
  int(HN11),int(HN21),int(HN31),int(HN41),
  int(HN22),int(HN32),int(HN42),int(HN52)|
     {stone,{arm,dir(D1),hand(HN11,L1),              $a1},color(C1),li,$p1},
  ns={stone,{arm,dir(D2),hand(HN21,L2),hand(HN22,L1),$a2},color(C2),li,$p2},
     {stone,{arm,dir(D3),hand(HN31,L3),hand(HN32,L2),$a3},color(C3),li,$p3},
     {stone,{arm,dir(D4),hand(HN41,L4),hand(HN42,L3),$a4},color(C4),li,$p4},
     {stone,{arm,dir(D5),              hand(HN52,L4),$a5},color(C5),li,$p5},win(C1).

     {stone,{arm,dir(D1),hand(HN11,L1),              $a1},color(C1),$p1},
     {stone,{arm,dir(D2),hand(HN21,L2),hand(HN22,L1),$a2},color(C2),$p2},
  ns={stone,{arm,dir(D3),hand(HN31,L3),hand(HN32,L2),$a3},color(C3),$p3},
     {stone,{arm,dir(D4),hand(HN41,L4),hand(HN42,L3),$a4},color(C4),$p4},
     {stone,{arm,dir(D5),              hand(HN52,L4),$a5},color(C5),$p5},data :-
  int(C1),int(C2),int(C3),int(C4),int(C5),C1=C2,C2=C3,C3=C4,C4=C5,
  int(D1),int(D2),int(D3),int(D4),int(D5),D1=D2,D2=D3,D3=D4,D4=D5,
  int(HN11),int(HN21),int(HN31),int(HN41),
  int(HN22),int(HN32),int(HN42),int(HN52)|
     {stone,{arm,dir(D1),hand(HN11,L1),              $a1},color(C1),li,$p1},
     {stone,{arm,dir(D2),hand(HN21,L2),hand(HN22,L1),$a2},color(C2),li,$p2},
  ns={stone,{arm,dir(D3),hand(HN31,L3),hand(HN32,L2),$a3},color(C3),li,$p3},
     {stone,{arm,dir(D4),hand(HN41,L4),hand(HN42,L3),$a4},color(C4),li,$p4},
     {stone,{arm,dir(D5),              hand(HN52,L4),$a5},color(C5),li,$p5},win(C1).

}.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
judge,{rule_judger,$r,@r},{data,$p} :-
    judging,{rule_judger,$r,@r},{data,$p,@r}.
    
judging,{data,$p,@r}/ :- judged,{data,$p}.

judging,{win(C),$p,@r}/ :- int(C)| show_result,{win(C),$p}.

judged :- ns_delete.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{rule_ns_deleter.
  ns={$p} :-{$p}.
}.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ns_delete,{rule_ns_deleter,@r},{data,$p} :-
  ns_deleting,{rule_ns_deleter,@r},{data,$p,@r}.

ns_deleting,{data,$p,@r}/ :- ns_deleted,{data,$p}.

ns_deleted :- update_ready.

update_ready,{for_update,$o},{data,{stone,up,$q},$p} :-
{data,$p},{for_update,{stone,$q},$o},update_ready.

update_ready,{data,$p} :-
\+($p = ( {stone,up,$q},$pp))|update,{data,$p}.

drawed :- turn_end.

turn_end,nowplayer(2) :- com_think,nowplayer(2).

turn_end,nowplayer(2) :- wait,nowplayer(2).

turn_end,nowplayer(1) :- wait,nowplayer(1).

com_think,nowplayer(C),{rule_thinker,@r},{data,$p} :- int(C)|
  {thinking,think(C),@r,{data,$p}},{rule_thinker,@r},
  nowplayer(C),com_thinking.

com_thinking,{dust,$dust},{thinking,input(X,Y),{data,$p},@r,$o}/ :-
  int(X),int(Y) | 
  {data,$p},input(X,Y),{dust,$o,$dust}.
  
{dust,{},$dust} :- {dust,$dust}.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{rule_thinker.
  think(C),{data,$p} :- int(C)| {data,$p,think1(C),
    ( think1(C),
      {stone,{arm,dir(D1),hand(HN11,L1),              $a1},color(C1),$p1},
      {stone,{arm,dir(D2),hand(HN21,L2),hand(HN22,L1),$a2},color(C2),$p2},
      {stone,{arm,dir(D3),hand(HN31,L3),hand(HN32,L2),$a3},color(C3),x(X3),y(Y3),$p3},
      {stone,{arm,dir(D4),hand(HN41,L4),hand(HN42,L3),$a4},color(C4),x(X4),y(Y4),$p4},
      L4=n :-
      int(C),int(C1),int(C2),int(C3),int(C4),
      int(D1),int(D2),int(D3),int(D4),
      int(X3),int(Y3),int(X4),int(Y4),
      int(HN11),int(HN21),int(HN31),int(HN41),
                int(HN22),int(HN32),int(HN42),
      C=C1,C1=C2,C2=C3,C3=C4,
      D1=D2,D2=D3,D3=D4,
      X4+X4-X3>=0,X4+X4-X3<19,
      Y4+Y4-Y3>=0,Y4+Y4-Y3<19|
      {stone,{arm,dir(D1),hand(HN11,L1),              $a1},color(C1),$p1},
      {stone,{arm,dir(D2),hand(HN21,L2),hand(HN22,L1),$a2},color(C2),$p2},
      {stone,{arm,dir(D3),hand(HN31,L3),hand(HN32,L2),$a3},color(C3),x(X3),y(Y3),$p3},
      {stone,{arm,dir(D4),hand(HN41,L4),hand(HN42,L3),$a4},color(C4),x(X4),y(Y4),$p4},
      L4=n,
      input,x(X4+X4-X3),y(Y4+Y4-Y3) )
    }.

  {think1(C),$p,@p}/ :- int(C)| {$p,think2(C),
    ( think2(C),
      {stone,{arm,dir(D1),hand(HN11,L1),              $a1},color(C1),$p1},
      {stone,{arm,dir(D2),hand(HN21,L2),hand(HN22,L1),$a2},color(C2),$p2},
      {stone,{arm,dir(D3),hand(HN31,L3),hand(HN32,L2),$a3},color(C3),x(X3),y(Y3),$p3},
      {stone,{arm,dir(D4),hand(HN41,L4),hand(HN42,L3),$a4},color(C4),x(X4),y(Y4),$p4},
      L4=n :-
      int(C),int(C1),int(C2),int(C3),int(C4),
      int(D1),int(D2),int(D3),int(D4),
      int(X3),int(Y3),int(X4),int(Y4),
      int(HN11),int(HN21),int(HN31),int(HN41),
                int(HN22),int(HN32),int(HN42),
      3-C=C1,C1=C2,C2=C3,C3=C4,
      D1=D2,D2=D3,D3=D4,
      X4+X4-X3>=0,X4+X4-X3<19,
      Y4+Y4-Y3>=0,Y4+Y4-Y3<19|
      {stone,{arm,dir(D1),hand(HN11,L1),         $a1},color(C1),$p1},
      {stone,{arm,dir(D2),hand(HN21,L2),hand(HN22,L1),$a2},color(C2),$p2},
      {stone,{arm,dir(D3),hand(HN31,L3),hand(HN32,L2),$a3},color(C3),x(X3),y(Y3),$p3},
      {stone,{arm,dir(D4),hand(HN41,L4),hand(HN42,L3),$a4},color(C4),x(X4),y(Y4),$p4},
      L4=n,
      input,x(X4+X4-X3),y(Y4+Y4-Y3) )
    }.

  {think2(C),$p,@p}/ :- int(C)| {$p,think3(C),
    ( think3(C),
      {stone,{arm,dir(D1),hand(HN11,L1),         $a1},color(C1),$p1},
      {stone,{arm,dir(D2),hand(HN21,L2),hand(HN22,L1),$a2},color(C2),x(X2),y(Y2),$p2},
      {stone,{arm,dir(D3),hand(HN31,L3),hand(HN32,L2),$a3},color(C3),x(X3),y(Y3),$p3},
      L3=n :-
      int(C),int(C1),int(C2),int(C3),
      int(D1),int(D2),int(D3),
      int(X2),int(Y2),int(X3),int(Y3),
      C=C1,C1=C2,C2=C3,
      D1=D2,D2=D3,
      X3+X3-X2>=0,X3+X3-X2<19,
      Y3+Y3-Y2>=0,Y3+Y3-Y2<19|
      {stone,{arm,dir(D1),hand(HN11,L1),         $a1},color(C1),$p1},
      {stone,{arm,dir(D2),hand(HN21,L2),hand(HN22,L1),$a2},color(C2),x(X2),y(Y2),$p2},
      {stone,{arm,dir(D3),hand(HN31,L3),hand(HN32,L2),$a3},color(C3),x(X3),y(Y3),$p3},
      L3=n,
      input,x(X3+X3-X2),y(Y3+Y3-Y2) )
    }.

  {think_randam,$p}:-
    {rnd,randamX(integer.rnd(19)),randamY(integer.rnd(19))},
    {thinking_randam,$p}.
  {thinking_randam,$p},{rnd,randamX(X),randamY(Y),$r,@r} :-
    int(X),int(Y)|{input,x(X),y(Y),$p},{$r}.
  input,x(X),y(Y) :- int(X),int(Y)|input(X,Y).
  {input,x(X),y(Y),$p,@p}/ :- int(X),int(Y)|
    {$p},input,x(X),y(Y).
  {think3(C),$p,@p}/ :- int(C)| {think_randam,$p}.
}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%以下、inlineによる入出力。 in Java
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
[:/*inline_define*/
import java.util.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

class FiveStoneFrame extends JFrame implements MouseListener{
    final Membrane mem;
    volatile boolean flgWait;
    int gameState;
    final int screen_w=500;
    final int screen_h=500;
    final int begin_x = 25;
    final int begin_y = 25+25;
    final int stage_w = 19;
    final int stage_h = 19;
    final int box_w=25;
    final int box_h=25;
    final int stone_w = 24;
    final int stone_h = 24;
    final int space_top = 25;
    final int space_left= 0;
    final int EMPTY = 0;
    final int BLACK = 1;
    final int WHITE = 2;

    int cursorX;
    int cursorY;
    LinkedList stones;
    LinkedList lineStones;
    public FiveStoneFrame(Membrane targetMem){
        this.mem = targetMem;
        setTitle("5 stone pazzle");
        setBounds(100,100,screen_w+space_left,screen_h+space_top);
        addMouseListener(this);
        setVisible(true);
        setResizable(false);
        flgWait=true;
        cursorX=0;
        cursorY=0;
        stones=new LinkedList();
        lineStones=new LinkedList();
        gameState=0;
    }
    public void paint(Graphics g){
        drawStage(g);
        Object[] stonesArray=stones.toArray();
        System.out.println("paint");
        for(int i=0;i<stonesArray.length;i++){
            drawStone(false,
                      ((Stone)stonesArray[i]).color,
                      ((Stone)stonesArray[i]).x,
                      ((Stone)stonesArray[i]).y,g);
        }
        if(gameState>0){
            Object[] lineStonesArray=lineStones.toArray();
            for(int i=0;i<lineStonesArray.length;i++){
                drawStone(true,
                      ((Stone)lineStonesArray[i]).color,
                      ((Stone)lineStonesArray[i]).x,
                      ((Stone)lineStonesArray[i]).y,g);
            }
        }
    }
    Image img;
    Graphics gr;
    public void update(Graphics g){
        if(img==null){
            img=createImage(screen_w+space_left,screen_h+space_top);
            gr=img.getGraphics();
        }
        paint(gr);
        g.drawImage(img,0,0,this);
    }

    public void drawStone(boolean on_line,int color,int x,int y,Graphics g){
        if(color==EMPTY)return;
        if(on_line){
            g.setColor(Color.red);
            g.fillOval(begin_x+box_w*x-stone_w/2-1,
                       begin_y+box_h*y-stone_h/2-1,
                       stone_w,stone_h);
        }
        g.setColor(Color.black);
        g.fillOval(begin_x+box_w*x-stone_w/2,
                   begin_y+box_h*y-stone_h/2,
                   stone_w-2,stone_h-2);
        g.setColor((color==BLACK)?Color.black:Color.white);
        g.fillOval(begin_x+box_w*x-stone_w/2+1,
                   begin_y+box_h*y-stone_h/2+1,
                   stone_w-4,stone_h-4);
    }

    public void drawStage(Graphics g){
        g.setColor(new Color(255,240,130));
        g.fillRect(0,0,begin_x+(stage_w-1)*box_w+begin_x,
                       begin_y+(stage_h-1)*box_h+begin_y);
        g.setColor(Color.black);
        for(int i=0;i<stage_w;i++){
            g.drawLine(begin_x+i*box_w,begin_y,
                       begin_x+i*box_w,begin_y+(stage_h-1)*box_h);
        }
        for(int i=0;i<stage_h;i++){
            g.drawLine(begin_x,begin_y+i*box_h,
                       begin_x+(stage_w-1)*box_w,begin_y+i*box_h);
        }
    }

    public void mousePressed(MouseEvent e){}
    public void mouseReleased(MouseEvent e){}
    public void mouseClicked(MouseEvent e){
       System.out.println("mouse clicked");
       switch(e.getButton()){
       case MouseEvent.BUTTON1:
           flgWait=false;
           int x=((e.getX()+stone_w/2-begin_x) / box_w);
           int y=((e.getY()+stone_h/2-begin_y) / box_h);
           if(x>=0 && x<stage_w && y>=0 && y<stage_h && gameState==0){
               Object[] stonesArray = stones.toArray();
               boolean flgPresented=false;
               for(int i=0;i<stonesArray.length;i++){
                   if(((Stone)stonesArray[i]).x==x &&
                       ((Stone)stonesArray[i]).y==y){
                       flgPresented=true;
                       break;
                   }
               }
               if(flgPresented){
                   mem.newAtom(new Functor("wait",0));
               }else{
                   mem.asyncLock();
                   Atom ax=mem.newAtom(new IntegerFunctor(x));
                   Atom ay=mem.newAtom(new IntegerFunctor(y));
                   Atom input=mem.newAtom(new Functor("input",2));
                   mem.newLink(input,0,ax,0);
                   mem.newLink(input,1,ay,0);
                   mem.asyncUnlock();
                   System.out.println("input atom created.");
               }
           }else{
               mem.newAtom(new Functor("wait",0));
           }
           break;
       case MouseEvent.BUTTON3:
           flgWait=false;
           mem.newAtom(new Functor("end",0));
           break;
       }
    }
    public void mouseEntered(MouseEvent e){}
    public void mouseExited(MouseEvent e){}

    public void waiting(){
        flgWait=true;
        repaint();
        while(flgWait){
            try{
                Thread.sleep(100);
            }catch(InterruptedException e){}
        }
        System.out.println("loop out");
    }

    public void addStone(int x,int y,int color){
        System.out.println("add stone : "+ x + ","+y+":"+color);
        stones.add(new Stone(x,y,color));
    }
    
    public void addLineStone(int x,int y,int color){
        System.out.println("add line stone : "+x + ","+y+":"+color);
        lineStones.add(new Stone(x,y,color));
    }
    
    public void clearStones(){
        System.out.println("clear");
        stones.clear();
    }
    
    //public void redraw(){
    //    System.out.println("repait");
    //    repaint();
    //}
    
    public void setWinner(int winner){
        System.out.println("win");
        gameState=winner;
    }

}

class Stone{
    public int x,y,color;
    public Stone(int fx,int fy,int fc){
        x=fx;y=fy;color=fc;
    }
}

:].

start.
start :- [:/*inline*/
    FiveStoneFrame frame = new FiveStoneFrame((Membrane)mem);
    Atom a= mem.newAtom(new Functor("frame",1));
    Atom b= mem.newAtom(new ObjectFunctor(frame));
    mem.newLink(a,0,b,0);
    mem.removeAtom(me);
    mem.makePerpetual(true);
:],wait.

wait,frame(F) :- class(F,"FiveStoneFrame") |
    frame(F),[:/*inline*/
    ObjectFunctor framefunc = (ObjectFunctor)me.nthAtom(0).getFunctor();
    FiveStoneFrame frame = (FiveStoneFrame)framefunc.getObject();
    frame.waiting();
    mem.removeAtom(me.nthAtom(0));
    mem.removeAtom(me);
  :](F).

end,frame(F) :- class(F,"FiveStoneFrame") |
    [:/*inline*/
    ObjectFunctor framefunc = (ObjectFunctor)me.nthAtom(0).getFunctor();
    FiveStoneFrame frame = (FiveStoneFrame)framefunc.getObject();
    frame.setVisible(false);
    System.out.println("end");
    frame.dispose();
    mem.removeAtom(me.nthAtom(0));
    mem.removeAtom(me);
:](F),terminated.

update,frame(F),{for_update,{stone,x(X),y(Y),color(C),$q},$p},{data,$r} :-
int(X),int(Y),int(C),class(F,"FiveStoneFrame") | [:/*inline*/
    int x=((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
    int y=((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
    int c=((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
    ObjectFunctor framefunc = (ObjectFunctor)me.nthAtom(3).getFunctor();
    FiveStoneFrame frame = (FiveStoneFrame)framefunc.getObject();
    
    frame.addStone(x,y,c);
    me.nthAtom(0).remove();
    me.nthAtom(1).remove();
    me.nthAtom(2).remove();
    me.nthAtom(3).remove();
    me.remove();
    :](X,Y,C,F),frame(F),
    update,{for_update,$p},{data,{stone,x(X),y(Y),color(C),$q},$r}.

update,{for_update,$p} :- \+($p = ({stone,$q},$pp))|
%    redraw,{for_update,$p}.
    drawed,{for_update,$p}.

%redraw,frame(F) :- class(F,"FiveStoneFrame") | [:/*inline*/
%    ObjectFunctor framefunc=(ObjectFunctor)me.nthAtom(0).getFunctor();
%    FiveStoneFrame frame = (FiveStoneFrame)framefunc.getObject();
%    synchronized(frame){
%        frame.redraw();
%    }
%    me.nthAtom(0).remove();
%    me.remove();
%:](F),frame(F),drawed.

show_result,frame(F),{win(C),$p} :-
  class(F,"FiveStoneFrame"),int(C) | [:/*inline*/
    ObjectFunctor framefunc = (ObjectFunctor)me.nthAtom(0).getFunctor();
    FiveStoneFrame frame = (FiveStoneFrame)framefunc.getObject();
    int winner=((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
    frame.clearStones();
    frame.setWinner(winner);
    me.nthAtom(0).remove();
    me.nthAtom(1).remove();
    me.remove();
    :](F,C),frame(F),{winning,$p},{winning_showed},show_line.

show_line,{winning,{li,x(X),y(Y),color(C),$o},$p},
  {winning_showed,$q},frame(F):-
  class(F,"FiveStoneFrame"),int(X),int(Y),int(C)|[:/*inline*/
    int x=((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
    int y=((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
    int c=((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
    ObjectFunctor framefunc = (ObjectFunctor)me.nthAtom(3).getFunctor();
    FiveStoneFrame frame = (FiveStoneFrame)framefunc.getObject();
    frame.addLineStone(x,y,c);
    me.nthAtom(0).remove();
    me.nthAtom(1).remove();
    me.nthAtom(2).remove();
    me.nthAtom(3).remove();
    me.remove();
    :](X,Y,C,F),frame(F),{winning,$p},
    {winning_showed,{li,x(X),y(Y),color(C),$o},$q},show_line.
    
show_line,{winning,$p} :- \+($p = ({li,$q},$pp))|show_other,{winning,$p}.

show_other,{winning,{x(X),y(Y),color(C),stone,$o},$p},
  {winning_showed,$q},frame(F):-
  class(F,"FiveStoneFrame"),int(X),int(Y),int(C)|
    [:/*inline*/
    int x=((IntegerFunctor)me.nthAtom(0).getFunctor()).intValue();
    int y=((IntegerFunctor)me.nthAtom(1).getFunctor()).intValue();
    int c=((IntegerFunctor)me.nthAtom(2).getFunctor()).intValue();
    ObjectFunctor framefunc = (ObjectFunctor)me.nthAtom(3).getFunctor();
    FiveStoneFrame frame = (FiveStoneFrame)framefunc.getObject();
    frame.addStone(x,y,c);
    me.nthAtom(0).remove();
    me.nthAtom(1).remove();
    me.nthAtom(2).remove();
    me.nthAtom(3).remove();
    me.remove();
    :](X,Y,C,F),frame(F),{winning,$p},
    {winning_showed,{stone,x(X),y(Y),color(C),$o},$q},show_other.

show_other,{winning,$p},frame(F) :- \+($p= ({stone,$q},$pp)),
  class(F,"FiveStoneFrame")|frame(F),
  [:/*inline*/
    ObjectFunctor framefunc=(ObjectFunctor)me.nthAtom(0).getFunctor();
    FiveStoneFrame frame = (FiveStoneFrame)framefunc.getObject();
    //synchronized(frame){
    //    frame.redraw();
    //}
    me.nthAtom(0).remove();
    me.remove();
  :](F),wait,{winning,$p}.
  
}.

{terminated,$p,@p} :- {$p}.
