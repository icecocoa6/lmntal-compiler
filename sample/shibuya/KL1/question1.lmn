/*

question1.lmn: sum up of n^2 + n^3 (n: fibonacchi number < N)

original:
  main(Target, Answer) :- true |
    fibonacci(0, 1, Fibo, Target),
    square(Fibo, Squares), cube(Fibo, Cubes),
    merge(Squares, Cubes, Both),
    sum(Both, Answer).

*/

% fibonacci number
Stream = fibonacci(N1, N2, Target) :- int(N1), N2 >= Target | Stream = [].
Stream = fibonacci(N1, N2, Target) :- 
  N2 < Target | Stream = [N2 | fibonacci(N2, N1+N2, Target)].

% n^3
Out = cube([]) :- Out = [].
Out = cube([One|Rest]) :- int(One) | Out = [One*One*One|cube(Rest)].

% n^2
Out = square([]) :- Out = [].
Out = square([One|Rest]) :- int(One) | Out = [One*One|square(Rest)].

% merge two streams
Out = merge([], In2) :- Out = In2.
Out = merge(In1, []) :- Out = In1.
Out = merge([Msg|In1], In2) :- Out = [Msg|merge(In1, In2)].
Out = merge(In1, [Msg|In2]) :- Out = [Msg|merge(In1, In2)].

% sum of elements in the list
Sum = sum([], PSum) :- Sum = PSum.
Sum = sum([One|Rest], PSum) :- Sum = sum(Rest, PSum+One).

Sum = sum(List) :- Sum = sum(List, 0).

% sum up n^2 + n^3
Answer = queer_sum(Target) :- int(Target) |
  Squares = square(fibonacci(0, 1, Target)), Cubes = cube(fibonacci(0, 1, Target)),
  Both = merge(Squares, Cubes),
  Answer = sum(Both).

n = queer_sum(10). m = queer_sum(100).