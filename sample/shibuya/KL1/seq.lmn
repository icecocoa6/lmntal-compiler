/*

seq.lmn: tree evaluation using cut off

original:
  main :- true | 
    eval(T, E), io:outstream([print(E), nl]),
    T = and(and(and(t, or(f, or(t, f))), f), or(t, or(and(t, f), f))).

  eval(and(L, R), E) :- true | eval(L, EL), and_node(EL, R, E).
  eval(or(L, R), E) :- true | eval(L, EL), or_node(EL, R, E).
  eval(t, E) :- true | E = t.
  eval(f, E) :- true | E = f.

  and_node(f, _, E) :- true | E = f.
  and_node(t, R, E) :- true | eval(R, E).


  or_node(f, R, E) :- eval(R, E).
  or_node(t, _, E) :- E = t.

*/

E = eval(and(L, R)) :- E = and_node(eval(L), R).
E = eval(or(L, R)) :- E = or_node(eval(L), R).
E = eval(t) :- E = t.
E = eval(f) :- E = f.

E = and_node(f, R) :- ground(R) | E = f.
E = and_node(t, R) :- E = eval(R).

E = or_node(f, R) :- E = eval(R).
E = or_node(t, R) :- ground(R) | E = t.

e = eval(and(and(and(t, or(f, or(t, f))), f), or(t, or(and(t, f), f)))).
f = eval(or(or(or(f, or(f, or(f, f))), f), or(f, or(or(f, f), f)))).
