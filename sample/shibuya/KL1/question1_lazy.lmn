/*

question1_lazy.lmn: sum up of n^2 + n^3 (n: fibonacchi number < N) by lazy evaluation

original:
  main(Target, Amswer) :- true |
    fibonacci_lazy(0, 1, Stream),
    dispatch(Stream, Target, Fibo),
    square(Fibo, Squares), cube(Fibo, Cubes),
    merge(Squares, Cubes, Both),
    sum(Both, Answer).

  fibonacci_lazy(N1, N2, []) :- true | true.
  fibonacci_lazy(N1, N2, [make(X)|Stream]) :- true |
    X = N2, N3 := N1+N2, fibonacci_lazy(N2, N3, Stream).

  dispatch(Stream, Target, Fibo) :- true |
    Stream =  [make(X)|StreamN],
    dispatch(StreamN, Target, Fibo, X).

  dispatch(Stream, Target, Fibo, X) :- X >= Target | Stream = [], Fibo = [].
  dispatch(Stream, Target, Fibo, X) :-
    X < Target | Fibo = [X|FiboN], dispatch(Stream, Target, FiboN).

*/

% fibonacci number
fibonacci_lazy(N1, N2, []) :- int(N1), int(N2) |.
fibonacci_lazy(N1, N2, [make(X)|Stream]) :- int(N1), int(N2) |
  X = N2, fibonacci_lazy(N2, N1+N2, Stream).

% dispatch
dispatch(Stream, Target, Fibo) :- 
  Stream =  [make(X)|StreamN],
  dispatch(StreamN, Target, Fibo, X).

dispatch(Stream, Target, Fibo, X) :- X >= Target | Stream = [], Fibo = [].
dispatch(Stream, Target, Fibo, X) :-
  X < Target | Fibo = [X|FiboN], dispatch(Stream, Target, FiboN).

% n^3
Out = cube([]) :- Out = [].
Out = cube([One|Rest]) :- int(One) | Out = [One*One*One|cube(Rest)].

% n^2
Out = square([]) :- Out = [].
Out = square([One|Rest]) :- int(One) | Out = [One*One|square(Rest)].

% merge two streams
Out = merge([], In2) :- Out = In2.
Out = merge(In1, []) :- Out = In1.
Out = merge([Msg|In1], In2) :- Out = [Msg|merge(In1, In2)].
Out = merge(In1, [Msg|In2]) :- Out = [Msg|merge(In1, In2)].

% sum of elements in the list
Sum = sum([], PSum) :- Sum = PSum.
Sum = sum([One|Rest], PSum) :- Sum = sum(Rest, PSum+One).

Sum = sum(List) :- Sum = sum(List, 0).

% sum up n^2 + n^3
Answer = queer_sum(Target) :- int(Target) |
  fibonacci_lazy(0, 1, Stream),
  fibonacci_lazy(0, 1, Stream2),
  dispatch(Stream, Target, Fibo),
  dispatch(Stream2, Target, Fibo2),
  Squares = square(Fibo), Cubes = cube(Fibo2),
  Both = merge(Squares, Cubes),
  Answer = sum(Both).

n = queer_sum(10). m = queer_sum(100).