root(null).
%insert(X), root(A) :- unary(A) | insert(X)=root(A).
%insert(X)=root(null) :- int(X) | root=n(X,null,null).
%insert(X)=root(A) :- unary(A) | insert(X)=A.
insert(X), root(null) :- n(X,root,null,null).
insert(X), root(A) :- root(A), insert(X)=A.

insert(X)=A, n(Num,T, null, R)
	:- int(X), int(Num), X<Num, ground(A) | n(Num,T, n(X,null,null) , R).
insert(X)=A, n(Num,T, L, null)
	:- int(X), int(Num), X>=Num, ground(A) | n(Num,T, L, n(X,null,null)).

%insert(X)=A, n(Num,T, L, R)
%	:- int(X), int(Num), X<Num, ground(L) | T2=n(Num, insert(X)=L , R).
%insert(X)=A, n(Num,T, L, R)
%	:- int(X), int(Num), X>=Num, ground(R) | T2=n(Num, L, insert(X)=R).

%insert(X), root(null) :- int(X) | root=n(X,null,null).
%insert(X), root=n(Num,L, R) :- int(Num), L=\=null, R=\=null | insert(X).
%insert(X), Y=n(Num, null, R)
%	:- int(X), int(Num), X<Num | Y=n(Num, n(X,null,null) , R).
%insert(X), Y=n(Num, L , null)
%	:- int(X), int(Num), X>=Num | Y=n(Num, L, n(X,null,null)).
insert(3).
insert(2).
insert(5).
insert(7).
insert(8).
insert(1).
insert(9).