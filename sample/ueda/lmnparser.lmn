t=lmnsrcparser.parse("a(X,Y):-b(Y,X). c.")
link{atom(L,$m),+L2,$p,@p}, atom{+L,link(L2,$n),$q,@q} :- int($m), int($n) |
    link{atom(L,$m),$p,@p}, atom{link(L,$n),$q,@q}.
mem{atom(L),+L2,$p,@p}, atom{+L,mem(L2),$q,@q} :- mem{atom(L),$p,@p}, atom{mem(L),$q,@q}.
mem{mem(L),+L2,$p,@p}, mem{+L,parent(L2),$q,@q} :- mem{mem(L),$p,@p}, mem{parent(L),$q,@q}.
link{buddy(L),+L2,$p,@p}, link{+L,buddy(L2),$q,@q} :- link{buddy(L),$p,@p}, link{buddy(L),$q,@q}.
mem{rule(L),+L2,$p,@p}, rule{+L,mem(L2),$q,@q} :- mem{rule(L),$p,@p}, rule{mem(L),$q,@q}.
mem{typedproccxt(L),+L2,$p,@p}, typedproccxt{+L,mem(L2),$q,@q} :-
    mem{typedproccxt(L),$p,@p}, typedproccxt{mem(L),$q,@q}.
link{atom(L,$m),+L2,$p,@p}, typedproccxt{+L,link(L2,$n),$q,@q} :- int($m), int($n) |
    link{atom(L,$m),$p,@p}, typedproccxt{link(L,$n),$q,@q}.
cxtdef{rhsOcc(L),+L2,$p,@p}, typedproccxt{+L,def(L2),$q,@q} :-
    cxtdef{rhsOcc(L),$p,@p}, typedproccxt{def(L),$q,@q}.
cxtdef{lhsOcc(L),+L2,$p,@p}, typedproccxt{+L,def(L2),$q,@q} :-
    cxtdef{lhsOcc(L),$p,@p}, typedproccxt{def(L),$q,@q}.
mem{proccxt(L),+L2,$p,@p}, proccxt{+L,mem(L2),$q,@q} :-
    mem{proccxt(L),$p,@p}, proccxt{mem(L),$q,@q}.
link{atom(L,$m),+L2,$p,@p}, proccxt{+L,link(L2,$n),$q,@q} :- int($m), int($n) |
    link{atom(L,$m),$p,@p}, proccxt{link(L,$n),$q,@q}.
cxtdef{rhsOcc(L),+L2,$p,@p}, proccxt{+L,def(L2),$q,@q} :-
    cxtdef{rhsOcc(L),$p,@p}, proccxt{def(L),$q,@q}.
cxtdef{lhsOcc(L),+L2,$p,@p}, proccxt{+L,def(L2),$q,@q} :-
    cxtdef{lhsOcc(L),$p,@p}, proccxt{def(L),$q,@q}.
mem{rulecxt(L),+L2,$p,@p}, rulecxt{+L,mem(L2),$q,@q} :-
    mem{rulecxt(L),$p,@p}, rulecxt{mem(L),$q,@q}.
cxtdef{rhsOcc(L),+L2,$p,@p}, rulecxt{+L,def(L2),$q,@q} :-
    cxtdef{rhsOcc(L),$p,@p}, rulecxt{def(L),$q,@q}.
cxtdef{lhsOcc(L),+L2,$p,@p}, rulecxt{+L,def(L2),$q,@q} :-
    cxtdef{lhsOcc(L),$p,@p}, rulecxt{def(L),$q,@q}.






