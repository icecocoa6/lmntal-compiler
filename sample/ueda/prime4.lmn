/* prime number generator a la concurrent logic programming
   Kazunori Ueda, 2004-03-12
*/

gen(N,Max,Ns) :- N > Max | Ns=[].
gen(N,Max,Ns) :- N =<Max | Ns=[N|Ns1], gen(N+1,Max,Ns1).

sift(Max,Xs,Zs), Xs=[] :- int(Max) | Zs=[].
sift(Max,Xs0,Zs), Xs0=[P|Xs] :- int(Max), int(P), P*P<Max |
  Zs=[P|Zs1], filter(P,Xs,Ys), sift(Max,Ys,Zs1).
sift(Max,Xs0,Zs), Xs0=[P|Xs] :- int(Max), int(P), P*P>=Max |
  Zs=[P|Zs1], sift(Max,Xs,Zs1).

filter(P,Xs,Ys), Xs=[] :- int(P) | Ys=[].
filter(P,Xs0,Ys), Xs0=[X|Xs] :- X mod P=:=0 | filter(P,Xs,Ys).
filter(P,Xs0,Ys), Xs0=[X|Xs] :- X mod P=\=0 | Ys=[X|Ys1], filter(P,Xs,Ys1).

primes(Max,Ps) :- int(Max) | gen(2,Max,Ns), sift(Max,Ns,Ps).

//primes(10000,X), io.printList(X,'*'). // 
primes(1000,answer).

% filter(2,[3,4,5,6,7],result)
