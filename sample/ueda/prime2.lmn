/* prime number generator a la concurrent logic
   programming
   Kazunori Ueda, 2004-03-12
*/

gen(N,Max,Ns) :- N > Max | Ns=[].
gen(N,Max,Ns) :- N =<Max |
   Ns=[N|Ns1], gen(N+1,Max,Ns1).

sift([],Zs) :- Zs=[].
sift([P|Xs],Zs) :- int(P) |
   Zs=[P|Zs1], filter(P,Xs,Ys), sift(Ys,Zs1).

filter(P,[],Ys) :- int(P) | Ys=[].
filter(P,[X|Xs],Ys) :- X mod P=:=0 |
   filter(P,Xs,Ys).
filter(P,[X|Xs],Ys) :- X mod P=\=0 |
   Ys=[X|Ys1], filter(P,Xs,Ys1).

primes(Max,Ps) :- gen(2,Max,Ns), sift(Ns,Ps).

primes(400,result).

% filter(2,[3,4,5,6,7],result)
