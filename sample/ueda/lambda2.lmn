// lambda calculus

{ lambda.use. example1.
  // (lambda y . y y) x => x x
  r=apply(lambda(cp(Y0,Y1), apply(Y0,Y1)), x).
}

{ lambda.use. example2.
  // (lambda f . (lambda x . f (f x) ) ) succ 0
  // => succ (succ 0)
  r=apply(apply(lambda(cp(F0,F1),
                lambda(X, apply(F0,apply(F1,X)))),
    succ), 0).
  // H=apply(succ, I) :- int(I) | H=I+1.
}

{ lambda.use. example3.
  // (lambda mul . (lambda sqr . sqr 5) (lambda x . mul x x)) 
  //     (lambda x . (lambda y . * x y) ) 
  r=apply(
     lambda(Mul,
       apply(lambda(Sqr, apply(Sqr,5)),
         lambda(cp(X0,X1), apply(apply(Mul,X0),X1)))),
     lambda(A, lambda(B, '*'(A,B)))).
}

{ lambda.use. example4.
  // exponentiation of natural numbers in Church encoding
  // n is encoded as f^n x
  // then n^m is encoded as lambda n m -> m n

  // N=n0 :- N=lambda(rm, lambda(X, X)).
  // N=n1 :- N=lambda(F, lambda(X, (F,X))).
  // N=n2 :- N=lambda(cp(F0,F1), lambda(X,
  //            apply(F0,apply(F1,X)))).
  N=n(3) :- N=lambda(cp(F0,cp(F1,F2)), lambda(X,
              apply(F0,apply(F1,apply(F2,X))))).
  N=n(4) :- N=lambda(cp(F0,cp(F1,cp(F2,F3))), lambda(X,
              apply(F0,apply(F1,apply(F2,apply(F3,X)))))).

  r=apply(apply(apply(n(4), n(3)), s), 0).
  
  H=apply(s, I) :- int(I) | H=I+1.
}
