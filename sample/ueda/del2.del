Using temporary directory : c:\DOCUME~1\Ueda\LOCALS~1\Temp\lmn_translate6
Compiled Rule (  :- aa(_2), bb(_4), cc(_6), '[]'(_7), '.'(_6,_7,_5), '.'(_4,_5,_3), '.'(_2,_3,_1), dd(_9), ee(_11), '[]'(_12), '.'(_11,_12,_10), '.'(_9,_10,_8), result(_13), append(_1,_8,_13), ( append(_14,Y,Z0), '[]'(_14) :- '='(Y,Z0) ), ( append(X0,Y,Z0), '.'(A,X,X0) :- '.'(A,Z,Z0), append(X,Y,Z) ) )
	--atommatch:
		spec           [2, 2]
	--memmatch:
		spec           [1, 1]
		jump           [L116, [0], [], []]
	--guard:L116:
		spec           [1, 1]
		jump           [L117, [0], [], []]
	--body:L117:
		spec           [1, 41]
		commit         [(  :- aa(_2), bb(_4), cc(_6), '[]'(_7), '.'(_6,_7,_5), '.'(_4,_5,_3), '.'(_2,_3,_1), dd(_9), ee(_11), '[]'(_12), '.'(_11,_12,_10), '.'(_9,_10,_8), result(_13), append(_1,_8,_13), ( append(_14,Y,Z0), '[]'(_14) :- '='(Y,Z0) ), ( append(X0,Y,Z0), '.'(A,X,X0) :- '.'(A,Z,Z0), append(X,Y,Z) ) )]
		loadruleset    [0, @601]
		newatom     [1, 0, aa_1]
		newatom     [2, 0, bb_1]
		newatom     [3, 0, cc_1]
		newatom     [4, 0, []_1]
		newatom     [5, 0, ._3]
		newatom     [6, 0, ._3]
		newatom     [7, 0, ._3]
		newatom     [8, 0, dd_1]
		newatom     [9, 0, ee_1]
		newatom    [10, 0, []_1]
		newatom    [11, 0, ._3]
		newatom    [12, 0, ._3]
		newatom    [13, 0, result_1]
		newatom    [14, 0, append_3]
		alloclink  [15, 1, 0]
		alloclink  [16, 2, 0]
		alloclink  [17, 3, 0]
		alloclink  [18, 4, 0]
		alloclink  [19, 5, 0]
		alloclink  [20, 5, 1]
		alloclink  [21, 5, 2]
		alloclink  [22, 6, 0]
		alloclink  [23, 6, 1]
		alloclink  [24, 6, 2]
		alloclink  [25, 7, 0]
		alloclink  [26, 7, 1]
		alloclink  [27, 7, 2]
		alloclink  [28, 8, 0]
		alloclink  [29, 9, 0]
		alloclink  [30, 10, 0]
		alloclink  [31, 11, 0]
		alloclink  [32, 11, 1]
		alloclink  [33, 11, 2]
		alloclink  [34, 12, 0]
		alloclink  [35, 12, 1]
		alloclink  [36, 12, 2]
		alloclink  [37, 13, 0]
		alloclink  [38, 14, 0]
		alloclink  [39, 14, 1]
		alloclink  [40, 14, 2]
		unifylinks     [15, 25, 0]
		unifylinks     [16, 22, 0]
		unifylinks     [17, 19, 0]
		unifylinks     [18, 20, 0]
		unifylinks     [21, 23, 0]
		unifylinks     [24, 26, 0]
		unifylinks     [27, 38, 0]
		unifylinks     [28, 34, 0]
		unifylinks     [29, 31, 0]
		unifylinks     [30, 32, 0]
		unifylinks     [33, 35, 0]
		unifylinks     [36, 39, 0]
		unifylinks     [37, 40, 0]
		enqueueatom    [14]
		enqueueatom    [13]
		enqueueatom    [9]
		enqueueatom    [8]
		enqueueatom    [3]
		enqueueatom    [2]
		enqueueatom    [1]
		proceed        []

Compiled Rule ( append(_14,Y,Z0), '[]'(_14) :- '='(Y,Z0) )
	--atommatch:
		spec           [2, 7]
		branch         [
                  spec           [2, 7], 
                  func           [1, append_3], 
                  testmem        [0, 1], 
                  getlink     [2, 1, 0], 
                  getlink     [3, 1, 1], 
                  getlink     [4, 1, 2], 
                  deref       [5, 1, 0, 0], 
                  func           [5, []_1], 
                  getlink     [6, 5, 0], 
                  jump           [L101, [0], [1, 5], []] ]
	--memmatch:
		spec           [1, 3]
		findatom    [1, 0, append_3]
		deref       [2, 1, 0, 0]
		func           [2, []_1]
		jump           [L101, [0], [1, 2], []]
	--body:L101:
		spec           [3, 3]
		unify          [1, 1, 1, 2, 0]
		commit         [( append(_14,Y,Z0), '[]'(_14) :- '='(Y,Z0) )]
		dequeueatom    [1]
		dequeueatom    [2]
		removeatom     [1, 0, append_3]
		removeatom     [2, 0, []_1]
		freeatom       [1]
		freeatom       [2]
		proceed        []

Compiled Rule ( append(X0,Y,Z0), '.'(A,X,X0) :- '.'(A,Z,Z0), append(X,Y,Z) )
	--atommatch:
		spec           [2, 9]
		branch         [
                  spec           [2, 9], 
                  func           [1, append_3], 
                  testmem        [0, 1], 
                  getlink     [2, 1, 0], 
                  getlink     [3, 1, 1], 
                  getlink     [4, 1, 2], 
                  deref       [5, 1, 0, 2], 
                  func           [5, ._3], 
                  getlink     [6, 5, 0], 
                  getlink     [7, 5, 1], 
                  getlink     [8, 5, 2], 
                  jump           [L109, [0], [1, 5], []] ]
	--memmatch:
		spec           [1, 3]
		findatom    [1, 0, append_3]
		deref       [2, 1, 0, 2]
		func           [2, ._3]
		jump           [L109, [0], [1, 2], []]
	--body:L109:
		spec           [3, 9]
		getlink     [6, 1, 2]
		getlink     [7, 2, 1]
		commit         [( append(X0,Y,Z0), '.'(A,X,X0) :- '.'(A,Z,Z0), append(X,Y,Z) )]
		dequeueatom    [1]
		dequeueatom    [2]
		newlink        [2, 1, 1, 2, 0]
		inheritlink    [2, 2, 6, 0]
		inheritlink    [1, 0, 7, 0]
		enqueueatom    [1]
		proceed        []

