Compiled Rule ( append(_1,Y,Z0), '[]'(_1) :- '='(Y,Z0) )
  --atommatch:
    spec           [2, 7]
    branch         [
                  spec           [2, 7], 
                  func           [1, 'append'_3], 
                  testmem        [0, 1], 
                  getlink     [2, 1, 0], 
                  getlink     [3, 1, 1], 
                  getlink     [4, 1, 2], 
                  deref       [5, 1, 0, 0], 
                  func           [5, '[]'_1], 
                  getlink     [6, 5, 0], 
                  jump           [L101, [0], [1, 5], []] ]]
  --memmatch:
    spec           [1, 3]
    findatom    [1, 0, 'append'_3]
    deref       [2, 1, 0, 0]
    func           [2, '[]'_1]
    jump           [L101, [0], [1, 2], []]
  --body:L101:
    spec           [3, 3]
    unify          [1, 1, 1, 2, 0]
    commit         [( append(_1,Y,Z0), '[]'(_1) :- '='(Y,Z0) )]
    dequeueatom    [1]
    dequeueatom    [2]
    removeatom     [1, 0, 'append'_3]
    removeatom     [2, 0, '[]'_1]
    freeatom       [1]
    freeatom       [2]
    proceed        []

Compiled Rule ( append(X0,Y,Z0), '.'(A,X,X0) :- '.'(A,Z,Z0), append(X,Y,Z) )
  --atommatch:
    spec           [2, 9]
    branch         [
                  spec           [2, 9], 
                  func           [1, 'append'_3], 
                  testmem        [0, 1], 
                  getlink     [2, 1, 0], 
                  getlink     [3, 1, 1], 
                  getlink     [4, 1, 2], 
                  deref       [5, 1, 0, 2], 
                  func           [5, '.'_3], 
                  getlink     [6, 5, 0], 
                  getlink     [7, 5, 1], 
                  getlink     [8, 5, 2], 
                  jump           [L109, [0], [1, 5], []] ]]
  --memmatch:
    spec           [1, 3]
    findatom    [1, 0, 'append'_3]
    deref       [2, 1, 0, 2]
    func           [2, '.'_3]
    jump           [L109, [0], [1, 2], []]
  --body:L109:
    spec           [3, 9]
    getlink     [6, 1, 2]
    getlink     [7, 2, 1]
    commit         [( append(X0,Y,Z0), '.'(A,X,X0) :- '.'(A,Z,Z0), append(X,Y,Z) )]
    dequeueatom    [1]
    dequeueatom    [2]
    newlink        [2, 1, 1, 2, 0]
    inheritlink    [2, 2, 6, 0]
    inheritlink    [1, 0, 7, 0]
    enqueueatom    [1]
    proceed        []

