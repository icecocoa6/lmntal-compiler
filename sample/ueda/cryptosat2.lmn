{
/*  cryptoarithmetic to SAT converter

     SEND      S=1 E=2 N=3 D=4 M=5 O=6 R=7 Y=8 C1=9 C2=10 C3=11 C0=12
   + MORE       0+D+E=C1+Y   12 4 2  9 8
   ------      C1+N+R=C2+E    9 3 7 10 2
    MONEY      C2+E+O=C3+N   10 2 6 11 3
               C3+S+M=M+O    11 1 5  5 6
*/

/* list of variables */
/* IMPORTANT: variable names must be multiples of 10 */

vars([10,20,30,40,50,60,70,80]).

/* digits (= 0..9) */

digit(10).  digit(20).  digit(30).  digit(40).
digit(60).  digit(70).  digit(80).

/* carries (= 0..1) */

carry(50), carry(90), carry(100), carry(110).

/* equations */

d(120, 40, 20, 90, 80).
d( 90, 30, 70,100, 20).
d(100, 20, 60,110, 30).
d(110, 10, 50, 50, 60).

/* first carry is zero */
or([120]).

/* top digits are not zero */
or([-10]).
or([-50]).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% constraints from cryptoarithmetic

{ adder_table_creation.
  a(integer.set(0,1), integer.set(0,9), integer.set(0,9)).
  a(X,Y,Z) :- S=X+Y+Z, S>=10 | a(X,Y,Z,1,S-10).
  a(X,Y,Z) :- S=X+Y+Z, S<10 | a(X,Y,Z,0,S).
}.
{ adder_table_creation, $p, @p}/ :- { adder_table, $p }.

d(C,X,Y,D,Z), {adder_table, $p[]} :- int(C), int(X), int(Y), int(D), int(Z) |
  {adder_table, $p[]}, 
  {d(C,X,Y,D,Z), $p[].
   d(C,X,Y,D,Z), a(J,K,L,M,N) :- int(C), int(X), int(Y), int(D), int(Z),
                                 int(J), int(K), int(L), int(M), int(N) |
     d(C,X,Y,D,Z),
     or([-(C+J),-(X+K),-(Y+L),D+M]),
     or([-(C+J),-(X+K),-(Y+L),Z+N]).
  }.

{ d(C,X,Y,D,Z), $p, @p }/ :- int(C), int(X), int(Y), int(D), int(Z) | $p.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% constraints on each digit

{ diff_table_creating. 
  diff(integer.set(0,9), integer.set(0,9)).
  diff(A,B) :- A>=B | .
}.

{ diff_table_creating, $p, @p }/ :- { diff_table, $p }.

/* each digit cannot take two values */
digit(N), { diff_table, $p[] } :- int(N) |
    digit2(N),
    { diff_table, $p[] },
    { digit(N), $p[]. 
      digit(N), diff(A,B) :- int(N) | digit(N), or([-(N+A),-(N+B)]).
    }.
{ digit(N), $p, @p }/ :- int(N) | $p.

/* each digit is either 0, 1, ..., or 9 */
digit2(N) :- int(N) | or([N+0,N+1,N+2,N+3,N+4,N+5,N+6,N+7,N+8,N+9]).

/* carries are zero or one */
carry(N) :- int(N) | or([N,N+1]), or([-N,-(N+1)]).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% constraint between different digits

vars(L) :- ground(L) |
{ all_different.
  product(L,L).
  product([],M) :- ground(M) | .
  product([L|Ls],M) :- ground(M) | p2(L,M), product(Ls,M).

  p2(L,[]) :- unary(L) | .
  p2(L,[M|Ms]) :- unary(L) | pair(L,M), p2(L,Ms).

  pair(M,N) :- M>=N | .
}.

{ all_different.  $p, @p }/ :- $p.
pair(M,N) :- pair(M,N,integer.set(0,9)).

/* diffent digit must have dirrent values */
pair(M,N,D) :- int(D) | or([-(M+D),-(N+D)]).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% printing
io.use.
r(done).
r(done), or(L) :- conv(L,R), or_spaced(R).
conv([],R):- R=[0,"\n"].
conv([X|Xs],Ys0) :- Ys0=[X," "|Ys], conv(Xs,Ys).
or_spaced(R) :- r=io.lprint(R).

}.

{$p[], @p}/ :- .
