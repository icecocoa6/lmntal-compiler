/**
NAME
	Finite (enumeration, list) domain solver over integers

SEE ALSO
	WebCHR(http://bach.informatik.uni-ulm.de/~webchr/)

AUTHOR
	Koji Hara

HISTORY
	2006/01/28(ез) 18:32:54

*/

%% Slim Abdennadher, Thom Fruehwirth, LMU, July 1998
%% Finite (enumeration, list) domain solver over integers


%% special cases
Fail@@
X :: [] :- fail(X).

%% intersection of domains for the same variable
SameVariable0@@
X0 :: L1, X1 :: L2 :- X0=X1, custom_i_is_list(L1), custom_i_is_list(L2) |
X0 :: intersection(L1, L2).

SameVariable1@@
X0 :: L, X1 :: '..'(_IMin, _IMax) :- X0=X1, custom_i_is_list(L) |
X0 :: remove_higher(_IMax, remove_lower(_IMin, L)).

%% interaction with inequalities

Le0@@
le(X0, Y0), X1::L1, Y1::L2 :- 
X0=X1, Y0=Y1, uniq(X0, Y0, L1, L2), 
custom_i_is_list(L1), custom_i_is_list(L2),
custom_io_list_min(L1, MinX),
custom_io_list_min(L2, MinY),
custom_io_list_max(L2, MaxY),
MinX > MinY |
le(X0, Y0), X1::L1, Y1::L2, Y0::'..'(MinX, MaxY).

Le1@@
le(X0, Y0), X1::L1, Y1::L2 :- 
X0=X1, Y0=Y1, uniq(X0, Y0, L1, L2), 
custom_i_is_list(L1), custom_i_is_list(L2),
custom_io_list_max(L1, MaxX),
custom_io_list_max(L2, MaxY),
custom_io_list_min(L1, MinX),
MaxX > MaxY |
le(X0, Y0), X1::L1, Y1::L2, X0::'..'(MinX, MaxY).


Lt0@@
lt(X0, Y0), X1::L1, Y1::L2 :-
X0=X1, Y0=Y1, uniq(X0, Y0, L1, L2), 
custom_i_is_list(L1), custom_i_is_list(L2),
custom_io_list_max(L1, MaxX),
custom_io_list_max(L2, MaxY),
custom_io_list_min(L1, MinX),
MaxY1=MaxY-1, MaxY1<MaxX |
lt(X0, Y0), X1::L1, Y1::L2, X0::'..'(MinX, MaxY1).



//X lt Y, X::L1,  Y::L2 ==> is_list(L1), is_list(L2), 
//min_list(L1,MinX), min_list(L2,MinY),  
//MinX1 is MinX + 1, MinX1 > MinY |
//max_list(L2,MaxY), Y :: MinX1..MaxY.


Lt1@@
lt(X0, Y0), X1::L1, Y1::L2 :-
X0=X1, Y0=Y1, uniq(X0, Y0, L1, L2), 
custom_i_is_list(L1), custom_i_is_list(L2),
custom_io_list_min(L1, MinX),
custom_io_list_min(L2, MinY),
custom_io_list_max(L2, MaxY),
MinX1=MinX+1, MinX1>MinY |
lt(X0, Y0), X1::L1, Y1::L2, Y0::'..'(MinX1, MaxY).


//X ne Y \  Y::D <=> ground(X), is_list(D), member(X,D) | select(X,D,D1), Y::D1.
//Y ne X \  Y::D <=> ground(X), is_list(D), member(X,D) | select(X,D,D1), Y::D1.
//Y::D \ X ne Y <=>  ground(X), is_list(D), \+ member(X,D) | true.
//Y::D \ Y ne X <=>  ground(X), is_list(D), \+ member(X,D) | true.


%% interaction with addition
%% no backpropagation yet!

//add(X,Y,Z), X::L1, Y::L2 ==> is_list(L1), is_list(L2) | 
//all_addition(L1,L2,L3), Z::L3.

Add@@
Z=add(X0, Y0), X1::L1, Y1::L2 :-
uniq(Z, X0, Y0, L1, L2), 
custom_i_is_list(L1), custom_i_is_list(L2) |
Z=add(X0, Y0), X1::L1, Y1::L2, Z::all_addition(L1, L2).

%% interaction with multiplication
%% no backpropagation yet!

//mult(X,Y,Z), X::L1, Y::L2 ==> is_list(L1), is_list(L2) |
//all_multiplication(L1,L2,L3), Z::L3.

Mult@@
Z=mult(X0, Y0), X1::L1, Y1::L2 :-
uniq(Z, X0, Y0, L1, L2), 
custom_i_is_list(L1), custom_i_is_list(L2) |
Z=mult(X0, Y0), X1::L1, Y1::L2, Z::all_multiplication(L1, L2).


%% auxiliary predicates =============================================

RemoveLower0 @@ L1=remove_lower(_IMin, []) :- L1=[].
RemoveLower1 @@ L1=remove_lower(_IMin, [H|T]) :- H<_IMin | L1=remove_lower(_IMin, T).
RemoveLower2 @@ L1=remove_lower(_IMin, [H|T]) :- H>=_IMin | L1=[H|remove_lower(_IMin, T)].

RemoveHigher0 @@ L1=remove_higher(_IMax, []) :- L1=[].
RemoveHigher1 @@ L1=remove_higher(_IMax, [H|T]) :- H>_IMax | L1=remove_higher(_IMax, T).
RemoveHigher2 @@ L1=remove_higher(_IMax, [H|T]) :- H=<_IMax | L1=[H|remove_higher(_IMax, T)].

Intersection0 @@ L3=intersection([], L2) :- ground(L2) | L3=[].
Intersection1 @@ L3=intersection([H|T], L2) :- unary(H), custom_ii_member(H,L2)     | L3=[H|intersection(T, L2)].
Intersection2 @@ L3=intersection([H|T], L2) :- unary(H), custom_ii_not_member(H,L2) | L3=intersection(T, L2).

//all_addition(L1,L2,L3) :- 
//	setof(Z, X^Y^(member(X,L1), member(Y,L2), Z is X + Y), L3).
//
//all_multiplication(L1,L2,L3) :-
//	setof(Z, X^Y^(member(X,L1), member(Y,L2), Z is X * Y), L3).

[:/*inline_define*/
import util.Util;
class CustomGuardImpl implements CustomGuard {
	public boolean run(String guardID, Membrane mem, Object obj) {
//		System.out.println("guardID "+guardID);
		ArrayList ary = (ArrayList)obj;
//		for(int i=0;i<ary.size();i++) {
//			System.out.println(ary.get(i).getClass());
//		}
//		System.out.println("CustomGuardImpl "+ary);
		
		if(guardID.equals("is_list")) {
			return Util.isList((Link)ary.get(0));
		}
		else if(guardID.equals("list_max")) {
			Atom a = new Atom(null, new IntegerFunctor(0));
			boolean b = Util.listMax((Link)ary.get(0), a);
			ary.set(1, a);
			return b;
		}
		else if(guardID.equals("list_min")) {
			Atom a = new Atom(null, new IntegerFunctor(0));
			boolean b = Util.listMin((Link)ary.get(0), a);
			ary.set(1, a);
			return b;
		}
		else if(guardID.equals("member")) {
			return Util.listMember((Atom)ary.get(0), (Link)ary.get(1));
		}
		else if(guardID.equals("not_member")) {
			return !Util.listMember((Atom)ary.get(0), (Link)ary.get(1));
		}
		else if(guardID.equals("test")) {
//			boolean b = Util.listMin((Link)ary.get(0), a);
			Atom aa = mem.newAtom(new IntegerFunctor(777));
			Link link = (Link)ary.get(0);
//			link.getAtom().remove();
			mem.inheritLink(aa, 0, link);
			return true;
		}
		return false;
	}
}
:].

/*
%% EXAMPLE ==========================================================

//?- X::[1,2,3,4,5,6,7], Y::[2,4,6,7,8,0], Y lt X, X::4..9, X ne Y, add(X,Y,Z), mult(X,Y,Z).


x::[1,2,3,4,5,6,7], y::[2,4,6,7,8,0], lt(y, x), x::'..'(4, 9), ne(x, y).
==> y(ne(x)), x(lt(y)), '::'(x,[4,5,6,7]), '::'(y,[2,4,6,0])


lt(x, y), x::[4,5,6],y::[2,3,4,5,6]
==> y(lt(x)), '::'(x,[4,5]), '::'(y,[5,6])


x::[3,4,5,6,7].
y::[3,4,5,6,7].
z::[3,4,5,6,7].
w::[3,4,5,6,7].
lt(x,y),lt(y,z),lt(z,w).
==>y(lt(x)), z(lt(y)), w(lt(z)), '::'(x,[3,4]), '::'(z,[5,6]), '::'(y,[4,5]), '::'(w,[6,7])


x::[3,4,5,6,7].
y::[3,4,5,6,7].
z::[3,4,5,6,7].
w::[3,4,5,6,7].
lt(x,y),lt(y,z),lt(z,w),lt(w,x).
==> y(lt(x)), y(fail), z(lt(y)), x(lt(w)), w(lt(z)), '::'(z,[4]),'::'(w,[5]), '::'(x,[6])

x::[2,4,6,8].
y::[1,3,5,7,9].
z::[5,6,7,8,9].
w::[1,2,3,4,5,6].
lt(x,y),lt(y,z),lt(z,w).
==> y(lt(x)), z(lt(y)), w(lt(z)), '::'(z,[5]), '::'(x,[2]), '::'(y,[3]), '::'(w,[6])

%% end of handler listdom.pl =================================================
%% ===========================================================================
*/

x::[2,4,6,8].
y::[1,3,5,7,9].
z::[5,6,7,8,9].
w::[1,2,3,4,5,6].
lt(x,y),lt(y,z),lt(z,w).
//==> y(lt(x)), z(lt(y)), w(lt(z)), '::'(z,[5]), '::'(x,[2]), '::'(y,[3]), '::'(w,[6])


//argv = sys.usage("\n\nUsage : <This file> <Num variables>\n\n", sys.argv).
argv=[_S] :- go(string.int_of_str(_S)).

go(_I) :- l=genLt(genDom(genVar(_I), _I)).

H=genVar(0) :- H=[].
H=genVar(_I) :- N=_I-1 | H=[N|genVar(N)].

H=genDom([], _I) :- H=[].
R=genDom([_UH|T], _I) :- _UH::genVar(_I), R=[_UH|genDom(T, _I)].

H=genLt([_U]) :- H=[_U].
R=genLt([_UA, _UB|T]) :- lt(_UA, _UB), R=[_UA|genLt([_UB|T])].

