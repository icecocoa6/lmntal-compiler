//  rules of ccs01-nd03
//  module未使用、system_ruleset未使用

input{$i, @i}, ccs_nd_rules{@c} :- 
  factory{
    //  状態のコピー
    generator{ccs_nd{copyFlag(0, 0), $r[], @r}, $g, @g}/ :- 
      generator{
        ccs_nd{copyFlag(0, 1), $r[], @r}, 
        ccs_nd{copyFlag(1, 1), $r[], @r}, $g, @g
      }.
      
    generator{
      transitions{}, nextActionID(0), nextStateID(0), $i, @i, @c
    }
  }.

factory{generator{transitions{$t}, $g[], @g}, $f[], @f}/ :- result{$t}.

ccs_nd_rules{
  //  actionIDを付与
  //  安定版
  ccs_nd{
    {{send(C1, {$q1}), $p1}, $q2}, {name(CN), +C1, $c}, $r1, @r1
  }/, 
  nextActionID(N1) :- 
    int(CN), N2 = N1 + 1 | 
    ccs_nd{
      {{send(N1, C2, {$q1}), $p1}, $q2}, 
      {name(CN), +C2, $c}, $r1, @r1
    }, 
    nextActionID(N2).
  ccs_nd{
    {{send(C1, {$q1}), $p1}, {name(CN), +C1, $c}, $q2}, $r1, @r1
  }/, 
  nextActionID(N1) :- 
    int(CN), N2 = N1 + 1 | 
    ccs_nd{
      {{send(N1, C2, {$q1}), $p1}, {name(CN), +C2, $c}, $q2}, 
      $r1, @r1
    }, 
    nextActionID(N2).
  ccs_nd{
    {{receive(C1, {$q1}), $p1}, $q2}, {name(CN), +C1, $c}, $r1, @r1
  }/, 
  nextActionID(N1) :- 
    int(CN), N2 = N1 + 1 | 
    ccs_nd{
      {{receive(N1, C2, {$q1}), $p1}, $q2}, 
      {name(CN), +C2, $c}, $r1, @r1
    }, 
    nextActionID(N2).
  ccs_nd{
    {{receive(C1, {$q1}), $p1}, {name(CN), +C1, $c}, $q2}, $r1, @r1
  }/, 
  nextActionID(N1) :- 
    int(CN), N2 = N1 + 1 | 
    ccs_nd{
      {{receive(N1, C2, {$q1}), $p1}, {name(CN), +C2, $c}, $q2}, 
      $r1, @r1
    }, 
    nextActionID(N2).
  ccs_nd{{{internal({$q1}), $p1}, $q2}, $r1, @r1}/, 
  nextActionID(N1) :- 
    N2 = N1 + 1 | 
    ccs_nd{{{internal(N1, {$q1}), $p1}, $q2}, $r1, @r1}, 
    nextActionID(N2).
    
  //  外部に送信
  ccs_nd{
    {{send(A_ID1, C1, {$q1}), $p1}, $q2}, 
    {name(CN), +C1, $c}, stateID(S_ID1), copyFlag(1, 1), $r1, @r1
  }/, 
  ccs_nd{stateID(S_ID2), copyFlag(0, 1), $r2, @r2}, 
  transitions{$t}, nextStateID(N1) :- 
    int(A_ID1), int(CN), T = CN, S_ID1 = S_ID2, N2 = N1 + 1, 
    uniq(A_ID1, S_ID1) | 
    ccs_nd{
      memkill({$p1}, killed), {name(CN), $c}, {$q1, $q2}, 
      stateID(N1), copyFlag(0, 0), $r1, @r1
    }, 
    ccs_nd{stateID(S_ID2), copyFlag(0, 0), $r2, @r2}, 
    transitions{transition(S_ID1, T, N1), $t}, nextStateID(N2).
    
  //  外部から受信
  ccs_nd{
    {{receive(A_ID1, C1, {$q1}), $p1}, $q2}, 
    {name(CN), +C1, $c}, stateID(S_ID1), copyFlag(1, 1), $r1, @r1
  }/, 
  ccs_nd{stateID(S_ID2), copyFlag(0, 1), $r2, @r2}, 
  transitions{$t}, nextStateID(N1) :- 
    int(A_ID1), int(CN), T = -CN, S_ID1 = S_ID2, N2 = N1 + 1, 
    uniq(A_ID1, S_ID1) | 
    ccs_nd{
      memkill({$p1}, killed), {name(CN), $c}, {$q1, $q2}, 
      stateID(N1), copyFlag(0, 0), $r1, @r1
    }, 
    ccs_nd{stateID(S_ID2), copyFlag(0, 0), $r2, @r2}, 
    transitions{transition(S_ID1, T, N1), $t}, nextStateID(N2).
    
  //  明示的な内部動作
  ccs_nd{
    {{internal(A_ID1, {$q1}), $p1}, $q2}, 
    stateID(S_ID1), copyFlag(1, 1), $r1, @r1
  }/, 
  ccs_nd{stateID(S_ID2), copyFlag(0, 1), $r2, @r2}, 
  transitions{$t}, nextStateID(N1) :- 
    int(A_ID1), S_ID1 = S_ID2, N2 = N1 + 1, uniq(A_ID1, S_ID1) | 
    ccs_nd{
      memkill({$p1}, killed), {$q1, $q2}, 
      stateID(N1), copyFlag(0, 0), $r1, @r1
    }, 
    ccs_nd{stateID(S_ID2), copyFlag(0, 0), $r2, @r2}, 
    transitions{transition(S_ID1, 0, N1), $t}, nextStateID(N2).
    
  //  異なるRestriction膜内で大域チャネルによる送受信
  ccs_nd{
    {{send(A_ID1, C1, {$q1}), $p1}, $q2}, 
    {{receive(A_ID2, C2, {$q3}), $p2}, $q4}, 
    {name(CN), +C1, +C2, $c}, 
    stateID(S_ID1), copyFlag(1, 1), $r1, @r1
  }/, 
  ccs_nd{stateID(S_ID2), copyFlag(0, 1), $r2, @r2}, 
  transitions{$t}, nextStateID(N1) :- 
    int(A_ID1), int(A_ID2), int(CN), S_ID1 = S_ID2, N2 = N1 + 1, 
    uniq(A_ID1, A_ID2, S_ID1) | 
    ccs_nd{
      memkill({$p1, $p2}, killed), {name(CN), $c}, 
      {$q1, $q2}, {$q3, $q4}, stateID(N1), copyFlag(0, 0), $r1, @r1
    }, 
    ccs_nd{stateID(S_ID2), copyFlag(0, 0), $r2, @r2}, 
    transitions{transition(S_ID1, 0, N1), $t}, nextStateID(N2).
    
  //  同一Restriction膜内で大域チャネルによる送受信
  ccs_nd{
    {
      {send(A_ID1, C1, {$q1}), $p1}, 
      {receive(A_ID2, C2, {$q2}), $p2}, $q3
    }, 
    {name(CN), +C1, +C2, $c}, 
    stateID(S_ID1), copyFlag(1, 1), $r1, @r1
  }/, 
  ccs_nd{stateID(S_ID2), copyFlag(0, 1), $r2, @r2}, 
  transitions{$t}, nextStateID(N1) :- 
    int(A_ID1), int(A_ID2), int(CN), S_ID1 = S_ID2, N2 = N1 + 1, 
    uniq(A_ID1, A_ID2, S_ID1) | 
    ccs_nd{
      memkill({$p1, $p2}, killed), {name(CN), $c}, 
      {$q1, $q2, $q3}, stateID(N1), copyFlag(0, 0), $r1, @r1
    }, 
    ccs_nd{stateID(S_ID2), copyFlag(0, 0), $r2, @r2}, 
    transitions{transition(S_ID1, 0, N1), $t}, nextStateID(N2).
    
  //  同一Restriction膜内で局所チャネルによる送受信
  ccs_nd{
    {
      {send(A_ID1, C1, {$q1}), $p1}, 
      {receive(A_ID2, C2, {$q2}), $p2}, 
      {name(CN), +C1, +C2, $c}, $q3
    }, 
    stateID(S_ID1), copyFlag(1, 1), $r1, @r1
  }/, 
  ccs_nd{stateID(S_ID2), copyFlag(0, 1), $r2, @r2}, 
  transitions{$t}, nextStateID(N1) :- 
    int(A_ID1), int(A_ID2), int(CN), S_ID1 = S_ID2, N2 = N1 + 1, 
    uniq(A_ID1, A_ID2, S_ID1) | 
    ccs_nd{
      memkill({$p1, $p2}, killed), 
      {{name(CN), $c}, $q1, $q2, $q3}, 
      stateID(N1), copyFlag(0, 0), $r1, @r1
    }, 
    ccs_nd{stateID(S_ID2), copyFlag(0, 0), $r2, @r2}, 
    transitions{transition(S_ID1, 0, N1), $t}, nextStateID(N2).
    
  ccs_nd{@r}, action(A) :- ground(A) | action(end).
  
  ccs{$c, @c}, nextStateID(N1) :- 
    N2 = N1 + 1 | 
    ccs_nd{
      //  選択されなかった動作の削除
      memkill({$p, @p}) :- memkill({$p, @p}, killed).
      memkill({$p[], @p}, KillTag) :- 
        unary(KillTag) | .
      memkill({$p[X|*Z], @p}, KillTag) :- 
        unary(KillTag) | 
        memkill({$p[Y|*Z], killing(Y), @p}, KillTag), X = KillTag.
        
      //  同一チャネル膜の併合
      {name(CN1), $c1}, {name(CN2), $c2} :- 
        CN1 = CN2 | {name(CN1), $c1, $c2}.
      {{name(CN1), $c1}, {name(CN2), $c2}, $q} :- 
        CN1 = CN2 | {{name(CN1), $c1, $c2}, $q}.
        
      //  使用済みチャネル膜の削除
      {name(CN)} :- unary(CN) | .
      {{name(CN)}, $q} :- unary(CN) | {$q}.
      
      //  killedアトムと接続子の削除
      killed({$c}) :- {$c}.
      killed(C), {{+C, $c}, $q} :- {{$c}, $q}.
      
      //  動作終了
      {} :- .
      {{}, $q} :- {$q}.
      {{nil, $p}, $q} :- {{$p}, $q}.
      stateID(N1), copyFlag(0, 0), $c, @c
    }, 
    nextStateID(N2).
}.

input{

ccs{
  //  proc P = '1.('2.3.nil | (2.nil + t.nil))
  {
    { send(C11, 
      {
        { send(C21, 
          {
            { receive(C31, {{ nil }}) }
          })
        }, 
        { receive(C22, {{ nil }}), 
          internal({{ nil }})
        }
      })
    }
  }, 
  {name(1), +C11}, {name(2), +C21, +C22}, {name(3), +C31}.
}.


/*
ccs{
  //  proc P = ('1.nil + 2.nil) | (1.nil + t.nil)\{1}
  {
    { send(C11, {{ nil }}), 
      receive(C21, {{ nil }})
    }, 
    { receive(C12, {{ nil }}), 
      internal({{ nil }})
    }
  }, 
  {name(1), +C11, +C12}, {name(2), +C21}.
}.
*/
}.
