/* Befunge Interpreter
   Ken Mizuno, 2006-06-11

*/

//Befunge-93 Documentation: http://catseye.mine.nu:8080/projects/befunge93/doc/befunge93.html
//入力(&~)と自己変更（pg）は未実装。

io.use. if.use. integer.use.

X=width :- X=80.
X=height :- X=25.

//読み込み
read(height,start(U),U,done).
read(I,U,L,done) :- I>0,I2=I-1 | io.readline(Line,Ret), f(Line, U, D), read(I2,D,L,Ret).
read(0,U,L,done) :- U=L.
read(I,U,L,nil) :- I>0,I2=I-1 | f("",U,D),read(I2,D,L,nil).
read(0,U,L,nil) :- U=L.

f(Str, U, D) :- string(Str)
		 | c(n2sp(string.substring(Str,0,1)),U,R,D,L), f2(Str,1,width,R,L).
f2(Str,I,Len,L,End) :- string(Str), I<Len, I2=I+1
		 | c(n2sp(string.substring(Str,I,I2)),nil,R,nil,L), f2(Str,I2,Len,R,End).
f2(Str,I,Len,L,End) :- I=:=Len,string(Str) | L=End.

Ret=n2sp(V) :- string(V) | Ret=if(equal(V,""),T,F),{T=" "},{F=V}.

//構造補完
c(V1,U1,EU,EL,L1),c(V2,U2,R1,nil,EU),
c(V3,EL,ED,D1,L2),c(V4,nil,R2,D2,ED)
 :- 
c(V1,U1,EU,EL,L1),c(V2,U2,R1,ER,EU),
c(V3,EL,ED,D1,L2),c(V4,ER,R2,D2,ED).

start(S1,S2), c(V,S2,R,D,L) :- c(pc(do,V,right,exe,[]),S1,R,D,L).

//PC移動
c(pc(done,V,right,Mode,St),U,R,D,L), c(V2,U2,R2,D2,R)
 :- c(V,U,R,D,L), c(pc(do,V2,right,Mode,St),U2,R2,D2,R).
c(pc(done,V,down,Mode,St),U,R,D,L), c(V2,D,R2,D2,L2)
 :- c(V,U,R,D,L), c(pc(do,V2,down,Mode,St),D,R2,D2,L2).
c(pc(done,V,left,Mode,St),U,R,D,L), c(V2,U2,L,D2,L2)
 :- c(V,U,R,D,L), c(pc(do,V2,left,Mode,St),U2,L,D2,L2).
c(pc(done,V,up,Mode,St),U,R,D,L), c(V2,U2,R2,U,L2)
 :- c(V,U,R,D,L), c(pc(do,V2,up,Mode,St),U2,R2,U,L2).

//数値読み込み。インラインガードを使えば一本で書ける。
Ret=pc(do,"0",Dir,exe,St) :- Ret=pc(done,"0",Dir,exe,push(0,St)).
Ret=pc(do,"1",Dir,exe,St) :- Ret=pc(done,"1",Dir,exe,push(1,St)).
Ret=pc(do,"2",Dir,exe,St) :- Ret=pc(done,"2",Dir,exe,push(2,St)).
Ret=pc(do,"3",Dir,exe,St) :- Ret=pc(done,"3",Dir,exe,push(3,St)).
Ret=pc(do,"4",Dir,exe,St) :- Ret=pc(done,"4",Dir,exe,push(4,St)).
Ret=pc(do,"5",Dir,exe,St) :- Ret=pc(done,"5",Dir,exe,push(5,St)).
Ret=pc(do,"6",Dir,exe,St) :- Ret=pc(done,"6",Dir,exe,push(6,St)).
Ret=pc(do,"7",Dir,exe,St) :- Ret=pc(done,"7",Dir,exe,push(7,St)).
Ret=pc(do,"8",Dir,exe,St) :- Ret=pc(done,"8",Dir,exe,push(8,St)).
Ret=pc(do,"9",Dir,exe,St) :- Ret=pc(done,"9",Dir,exe,push(9,St)).

//文字列モード
Ret=pc(do,"\"",Dir,exe,St) :- Ret=pc(done,"\"",Dir,str,St).
//ガードelseを使いたい…。
//Ret=pc(do,"\"",Dir,str,St) :- Ret=pc(done,"\"",Dir,exe,St).
//Ret=pc(do,V,Dir,str,St) :- Ret=pc(done,V,Dir,str,push(getcode(V),St)).
Ret=pc(do,V,Dir,str,St) :- string(V)
		 | Ret=pc(done,V,Dir,Md,St2), t(equal(V,"\""),V,St,Md,St2).
t(true,V,St,Mode,St_ret) :- string(V) | Mode=exe,St_ret=St.
t(false,V,St,Mode,St_ret) :- Mode=str,St_ret=push(getcode(V),St).

//命令解釈
Ret=pc(do," ",Dir,exe,St) :- Ret=pc(done," ",Dir,exe,St).

Ret=pc(do,"+",Dir,exe,St) :- Ret=pc(done,"+",Dir,exe,push(V1+V2,pop(V1,pop(V2,St)))).
Ret=pc(do,"-",Dir,exe,St) :- Ret=pc(done,"-",Dir,exe,push(V1-V2,pop(V1,pop(V2,St)))).
Ret=pc(do,"*",Dir,exe,St) :- Ret=pc(done,"*",Dir,exe,push(V1*V2,pop(V1,pop(V2,St)))).
Ret=pc(do,"/",Dir,exe,St) :- Ret=pc(done,"/",Dir,exe,push(V1/V2,pop(V1,pop(V2,St)))).
Ret=pc(do,"%",Dir,exe,St) :- Ret=pc(done,"%",Dir,exe,push(V1 mod V2,pop(V1,pop(V2,St)))).

Ret=pc(do,"!",Dir,exe,St)
		 :- Ret=pc(done,"!",Dir,exe,push(if(V==0,T,F),pop(V,St))),{T=1},{F=0}.
Ret=pc(do,"`",Dir,exe,St)
		 :- Ret=pc(done,"`",Dir,exe,push(if(V1>V2,T,F),pop(V1,pop(V2,St)))),{T=1},{F=0}.

Ret=pc(do,"v",Dir,exe,St) :- unary(Dir) | Ret=pc(done,"v",down,exe,St).
Ret=pc(do,">",Dir,exe,St) :- unary(Dir) | Ret=pc(done,">",right,exe,St).
Ret=pc(do,"^",Dir,exe,St) :- unary(Dir) | Ret=pc(done,"^",up,exe,St).
Ret=pc(do,"<",Dir,exe,St) :- unary(Dir) | Ret=pc(done,"<",left,exe,St).
Ret=pc(do,"?",Dir,exe,St) :- unary(Dir)
		 | Ret=pc(done,"?",dir(integer.rnd(4)),exe,St).
Ret=dir(0) :- Ret=down. Ret=dir(1) :- Ret=right.
Ret=dir(2) :- Ret=up. Ret=dir(3) :- Ret=left.

Ret=pc(do,"_",Dir,exe,St) :- unary(Dir)
		 | Ret=pc(done,"_",if(V==0,R,L),exe,pop(V,St)),{R=right},{L=left}.
Ret=pc(do,"|",Dir,exe,St) :- unary(Dir)
		 | Ret=pc(done,"|",if(V==0,R,L),exe,pop(V,St)),{R=down},{L=up}.

Ret=pc(do,":",Dir,exe,St) :- Ret=pc(done,":",Dir,exe,push(V1,push(V2,pop(V,St)))),cp(V,V1,V2).Ret=pc(do,"\\",Dir,exe,St) :- Ret=pc(done,"\\",Dir,exe,push(V1,push(V2,pop(V1,pop(V2,St))))).
Ret=pc(do,"$",Dir,exe,St) :- Ret=pc(done,"$",Dir,exe,pop(V,St)), rm(V).

Ret=pc(do,".",Dir,exe,St)
	 :- Ret=pc(io.print(string.concat(string.str_of_int(V)," ")),".",Dir,exe,pop(V,St)).
Ret=pc(do,",",Dir,exe,St) :- Ret=pc(io.print(string.int_to_str(V)),",",Dir,exe,pop(V,St)).

Ret=pc(do,"#",Dir,exe,St) :- Ret=pc(done,"#",Dir,skip,St).
Ret=pc(do,Cmd,Dir,skip,St) :- Ret=pc(done,Cmd,Dir,exe,St).

Ret=pc(do,"@",Dir,exe,St) :- Ret=pc(end,"@",Dir,end,St).

//utilities
Ret=pop(V,[H|T]) :- Ret=T,V=H.
Ret=pop(V,[]) :- Ret=[],V=0.
Ret=push(V,St) :- Ret=[V|St].

Ret=equal(V1,V2) :- V1=V2 | Ret=true.
Ret=equal(V1,V2) :- V1\=V2 | Ret=false.

Ret=getcode(V) :- string(V) | Ret=[:/*inline*/
	String s = ((StringFunctor)me.nthAtom(0).getFunctor()).stringValue();
	int v = s.length() == 0 ? -1 : s.charAt(0);
	Atom res = mem.newAtom(new IntegerFunctor(v));
	mem.relinkAtomArgs(res, 0, me, 1);
	mem.removeAtom(me.nthAtom(0));
	mem.removeAtom(me);
:](V).

rm(V) :- unary(V) | .
cp(I,O1,O2) :- unary(I) | O1=I,O2=I.