// そのプロセスへの入力を+, 出力を-とする

#INPUT1 = ['h','e','l','l','(','w','a','r','(','y','e','s',')',',','X',')',' ','=',' ','h','o','(','X',')','.'].
INPUT2 = [ 'Y',' ','=',' ','X','+','2','1','*','Z','+','P','/','Q','.'].
output = parse_eq(lex(INPUT2)).
#output = lex(INPUT2).

O=parse_eq([symbol(S)|T]) :- O=eq(parse_link([symbol(S)|T],I1),parse_link(I2,I3)), parse_eq_token(I1,I2), gg(I3).
O=parse_eq([link(L)|T]) :- O=eq(parse_link([link(L)|T],I1),parse_link(I2,I3)), parse_eq_token(I1,I2), gg(I3).
O=parse_link([symbol(S)|T],I1) :- O=linkofatom(parse_atom([symbol(S)|T],I1)).
O=parse_link([link(L)|T],I1) :- O=link(L), I1=T.
O=parse_eq_token(['='|T]) :- O=T.
//O=parse_atom([symbol(S)|T],I1) :- O=atom(S,parse_arg(T,I1)).
//O=parse_arg(['('|T],I1) :- O=arg([parse_link(T,M)|parse_arg_repeat(M,I1)]).
//O=parse_arg([')'|T],I1) :- O=arg([]), I1=T.
//O=parse_arg_repeat([','|T],I1) :- O=[parse_link(T,M)|parse_arg_repeat(M,I1)].
//O=parse_arg_repeat([')'|T],I1) :- O=[], I1=T.
//O=parse_arg_repeat(['='|T],I1) :- O=[], I1=T.


//       ////////////////////
// lex(+I, -O)
//
O=lex(I) :- O=lex(start,[],B,B,I).
O=lex(start,L,H,H,[]) :- O=[], gg(L).

// start ->
//	symbol
O=lex(start,L,HB,TB,['h'|T]) :- O=lex(symbol,L,HB,TB1,T), TB=['h'|TB1].
O=lex(start,L,HB,TB,['w'|T]) :- O=lex(symbol,L,HB,TB1,T), TB=['w'|TB1].
O=lex(start,L,HB,TB,['y'|T]) :- O=lex(symbol,L,HB,TB1,T), TB=['y'|TB1].
//	link
O=lex(start,L,HB,TB,['X'|T]) :- O=lex(link,L,HB,TB1,T), TB=['X'|TB1].
O=lex(start,L,HB,TB,['Y'|T]) :- O=lex(link,L,HB,TB1,T), TB=['Y'|TB1].
O=lex(start,L,HB,TB,['Z'|T]) :- O=lex(link,L,HB,TB1,T), TB=['Z'|TB1].
O=lex(start,L,HB,TB,['P'|T]) :- O=lex(link,L,HB,TB1,T), TB=['P'|TB1].
O=lex(start,L,HB,TB,['Q'|T]) :- O=lex(link,L,HB,TB1,T), TB=['Q'|TB1].
//	start
O=lex(start,L,HB,TB,[' '|T]) :- O=lex(start,L,HB,TB,T).
O=lex(start,L,HB,TB,['='|T]) :- O=['='|lex(start,L,HB,TB,T)].
O=lex(start,L,HB,TB,['.'|T]) :- O=['.'|lex(start,L,HB,TB,T)].
O=lex(start,L,HB,TB,[','|T]) :- O=[','|lex(start,L,HB,TB,T)].
O=lex(start,L,HB,TB,['+'|T]) :- O=['+'|lex(start,L,HB,TB,T)].
//	number
O=lex(start,L,HB,TB,['2'|T]) :- O=lex(number,L,HB,TB1,T), TB=['2'|TB1].

// symbol ->
//	symbol
O=lex(symbol,L,HB,TB,['e'|T]) :- O=lex(symbol,L,HB,TB1,T), TB=['e'|TB1].
O=lex(symbol,L,HB,TB,['l'|T]) :- O=lex(symbol,L,HB,TB1,T), TB=['l'|TB1].
O=lex(symbol,L,HB,TB,['a'|T]) :- O=lex(symbol,L,HB,TB1,T), TB=['a'|TB1].
O=lex(symbol,L,HB,TB,['r'|T]) :- O=lex(symbol,L,HB,TB1,T), TB=['r'|TB1].
O=lex(symbol,L,HB,TB,['o'|T]) :- O=lex(symbol,L,HB,TB1,T), TB=['o'|TB1].
O=lex(symbol,L,HB,TB,['s'|T]) :- O=lex(symbol,L,HB,TB1,T), TB=['s'|TB1].
//	start
O=lex(symbol,L,HB,TB,['('|T]) :- O=[symbol(get_id(L,HB,L1)),'('|lex(start,L1,H,H,T)], TB=[].
O=lex(symbol,L,HB,TB,[','|T]) :- O=[symbol(get_id(L,HB,L1)),','|lex(start,L1,H,H,T)], TB=[].
O=lex(symbol,L,HB,TB,[')'|T]) :- O=[symbol(get_id(L,HB,L1)),')'|lex(start,L1,H,H,T)], TB=[].

// link ->
//	start
O=lex(link,L,HB,TB,[')'|T]) :- O=[link(get_id(L,HB,L1)),')'|lex(start,L1,H,H,T)], TB=[].
O=lex(link,L,HB,TB,['+'|T]) :- O=[link(get_id(L,HB,L1)),'+'|lex(start,L1,H,H,T)], TB=[].
O=lex(link,L,HB,TB,[' '|T]) :- O=[link(get_id(L,HB,L1))|lex(start,L1,H,H,T)], TB=[].
O=lex(link,L,HB,TB,['/'|T]) :- O=[link(get_id(L,HB,L1)),'/'|lex(start,L1,H,H,T)], TB=[].
O=lex(link,L,HB,TB,['.'|T]) :- O=[link(get_id(L,HB,L1)),'.'|lex(start,L1,H,H,T)], TB=[].

// number ->
//	number
O=lex(number,L,HB,TB,['1'|T]) :- O=lex(number,L,HB,TB1,T), TB=['1'|TB1].
//	start
O=lex(number,L,HB,TB,['*'|T]) :- O=[number(get_id(L,HB,L1)),'*'|lex(start,L1,H,H,T)], TB=[].


//       //////////////////////////////
// delete(+String)
// 
delete([]) :- .
delete([H|T]) :- unary(H) | delete(T).

//       //////////////////////////////
// strcmp(+String1, +String2, -String1, -String2, -R)
// 
strcmp([H1|T1],[H2|T2],O1,O2,R) :- unary(H1),unary(H2),H1==H2 | strcmp(T1,T2,O11,O21,R), O1=[H1|O11], O2=[H2|O21].
strcmp([H1|T1],[H2|T2],O1,O2,R) :- unary(H1),unary(H2),H1\=H2 | R=false, O1=[H1|T1], O2=[H2|T2].
strcmp([],[],O1,O2,R) :- R=true, O1=[], O2=[].
strcmp(X,[],O1,O2,R) :- R=false, O1=X, O2=[].
strcmp([],X,O1,O2,R) :- R=false, O1=[], O2=X.

//       //////////////////////////////
// get_id(+Table, +String, -Table, -R)
//
get_id(L, S, L1, R) :- get_id(0, L, S, L1, R).
get_id(I, [], S, L, R) :- L=[S], R=I.
get_id(I, [H|T], S, L, R) :- get_id_if(X, I, T, S1, L1, R), L=[H1|L1], strcmp(H,S,H1,S1,X).
get_id_if(true, I, L, S, L1, R) :- L1=L, delete(S), R=I.
get_id_if(false, I, L, S, L1, R) :- I1=I+1 | get_id(I1, L, S, L1, R).


//sample
L0 = [['z','e','r','o'],['o','n','e'],['t','w','o'],['t','h','r','e','e'],['f','o','u','r']].
S0 = ['t','w','o'].
S1 = ['f','i','v','e'].
S2 = ['o','n','e'].
get_id(L0, S0, L1, r0).
get_id(L1, S1, L2, r1).
get_id(L2, S2, gg, r2).

