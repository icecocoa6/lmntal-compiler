% ポーカー．（未完成（何が完成かは不明））．
% ルールは諸派様々だが，そのへんは適当．
% K-A-2を含むストレートもあり．
% 交換回数とプレイヤ数は変更可．
% 交換（配布も）が1ルール．
% ファイブカードは未実装．ジョーカー入りの判定ルールが面倒．
% 交換回数を無制限にすると，フルハウスかフォーカードができやすい．フラッシュ･ストレートも少し視野に入れさせるべき．
% 役を出すとこまでしかしてないので，勝ち負けの判定くらいはしたい．

dealer={
% カードを生成する
gen_all.
gen_all :- gen(13,spade),gen(13,club),gen(13,heart),gen(13,diamond).
gen(N,Mark) :- unary(Mark),N>0 | gen(N-1,Mark), card(N,Mark).
gen(N,Mark) :- unary(Mark),N=0 | ().

% カードを配る．
L=want(N),card(N1,M1) :- N>0 | L=[changed(N1,M1)|want(N-1)].
L=want(N)             :- N=0 | L=[].

% ディーラは何度でもカードを送れる（当然）．
changable(1000).

% カードを交換する．(捨てたカードを再利用するのは変だが，カードが足りなくなると困るので)
C=change(N1,M1),card(N2,M2) :-  C=changed(N2,M2),card(N1,M1).

% 交換したカードを送信する．
received(D,CS) :- send(D,CS).
sended(D) :- receive(D).
}.

player_rule={
% 交換可能なら，交換すべきカードを交換リストに繋ぐ．
changable(C),hand={card(notkeep,N,M),$h,@h}/,send(D,             REST ) :- int(N),unary(M),C>0 |
changable(C),hand={                  $h,@h}, send(D,[change(N,M)|REST]).

% 交換されたカードを手に持つ．
received(D,[changed(N,M)|REST]),hand={                  $h,@h}/ :- int(N),unary(M) |
received(D,              REST ),hand={card(notkeep,N,M),$h,@h}.

% 受信準備
sended(D) :- receive(D).

% 送信準備
received(D,[]) :- send(D,[]).

% 交換回数が一定以上なら全てキープさせる
send(D,[]),hand={$h,@h}/,changable(C) :- C=0 | send(D,[]), hand={allkeep,$h,@h}.

% 決まったら，手を開く．
hand={end,$h,@h}/ :- $h.

% 余計なアトムを消すルール．
allkeep :- ().
nostraight :- ().
noflush :- ().
one(N) :- int(N) | ().

}.

hand_rule={
hand_init :- nostraight,noflush,notend.

%changed([changed(N,M)|REST]) :- int(N),unary(M) | card(notkeep,N,M),changed(REST).
%changed([]) :- ().

% ストレート
nostraight,card(K1,N1,Mark1),card(K2,N2,Mark2),card(K3,N3,Mark3),card(K4,N4,Mark4),card(K5,N5,Mark5) :-
(((N1-1) mod 13) = ((N2-1) mod 13) +1),
(((N2-1) mod 13) = ((N3-1) mod 13) +1),
(((N3-1) mod 13) = ((N4-1) mod 13) +1),
(((N4-1) mod 13) = ((N5-1) mod 13) +1),
unary(K1),unary(K2),unary(K3),unary(K4),unary(K5)|
card(keep,N1,Mark1),card(keep,N2,Mark2),card(keep,N3,Mark3),card(keep,N4,Mark4),card(keep,N5,Mark5),
straight(N5).

% フラッシュ
noflush,card(K1,N1,Mark1),card(K2,N2,Mark2),card(K3,N3,Mark3),card(K4,N4,Mark4),card(K5,N5,Mark5) :-
Mark1=Mark2,Mark2=Mark3,Mark3=Mark4,Mark4=Mark5,
int(N1),int(N2),int(N3),int(N4),int(N5),
unary(K1),unary(K2),unary(K3),unary(K4),unary(K5)|
card(keep,N1,Mark1),card(keep,N2,Mark2),card(keep,N3,Mark3),card(keep,N4,Mark4),card(keep,N5,Mark5),
flush(N1+N2+N3+N4+N5,Mark1).

% ペア
card(notkeep,N1,Mark1),card(K2,N2,Mark2) :- N1=:=N2 | card(keep,N1,Mark1),card(K2,N2,Mark2),one(N1).

one(N1),one(N2)        :- N1=:=N2 | pair(N1).
pair(N1),pair(N2)      :- N1=\=N2 | twopair(N1,N2).
one(N1),pair(N2)       :- N1=:=N2 | threecard(N1).
one(N1),threecard(N2)  :- N1=:=N2 | fourcard(N1).
pair(N1),pair(N2)      :- N1=:=N2 | fourcard(N1).
%one(N1),fourcard(N2)   :- N1=:=N2 | fivecard(N1).
%pair(N1),threecard(N2) :- N1=:=N2 | fivecard(N1).
twopair(N1,N2),one(N3) :- N2=:=N3 | fullhouse(N1,N2).
twopair(N1,N2),one(N3) :- N1=:=N3 | fullhouse(N2,N1).
pair(N1),threecard(N2) :- N1=\=N2 | fullhouse(N1,N2).

% とりあえず，ストレートかフラッシュかフルハウスかファイブカードが決まれば何も考えない
straight,notend :- straight,end.
flush,notend :- flush,end.
fullhouse,notend :- fullhouse,end.
%fivecard,notend :- fivecard,end.

% 全部キープする．
allkeep,notkeep(K) :- allkeep,keep(K).

% 全部キープなら，おしまい．(アトム集団を使うと綺麗に書けるかもしれないが，別にいいや)
notend,keep(K1),keep(K2),keep(K3),keep(K4),keep(K5) :- 
   end,keep(K1),keep(K2),keep(K3),keep(K4),keep(K5).
}.

%プレイヤを追加する
player_size(4),add_players.
add_players,player_size(PS) :- int(PS) | player_size(PS),add_players(PS).

add_players(P),  hand_rule={@h},player_rule={@p},dealer={$d,     @d}/ :- P>0 |
add_players(P-1),hand_rule={@h},player_rule={@p},dealer={$d,receive(D),@d},
pl={hand={hand_init,@h},@p,changable(5),send(D,want(5))}.

add_players(P):- P=0 | ().

% 送受信（カードのやり取り）
{receive(D),    $p,@p}/,{send(  D,CS),changable(C ), $d,@d}/ :- ground(CS),C>0 |
{received(D,CS),$p,@p} ,{sended(D)   ,changable(C-1),$d,@d}.
