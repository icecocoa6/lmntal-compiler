 /*fischerのコントロール４つversion
  Lamportの論文版．uppaalのエンコードしたものよりシンプルに？
  Tickを早く書いてみよう版
 */
 //スレッド
 //無限の実数を表すinfinityは1000とおく
 t(0,a).
 t(1,a).
 t(2,a).
 t(3,a).
 t(4,a).
 t(5,a).
 
 //ubTimer[N],lbTimer[N]
 ubTimer(0)=1000. ubTimer(1)=1000. 
 ubTimer(2)=1000. ubTimer(3)=1000. ubTimer(4)=1000. ubTimer(5)=1000.
 lbTimer(0)=0. lbTimer(1)=0. 
 lbTimer(2)=0. lbTimer(3)=0. lbTimer(4)=0. lbTimer(5)=0.
 
 x(-1). //クリティカルセクションにあるスレッド
 
 stmtA@@ //statement A
 t(L1,a), ubTimer(L2)=T1, x(-1):-
 L1=:=L2, int(T1)|
 t(L1,b), ubTimer(L2)=3, x(-1).
 
 stmtB@@
 x(N), t(L1,b), ubTimer(L2)=T1, lbTimer(L3)=T2:-
 L1=:=L2, L1=:=L3, int(T1), int(T2), int(N)|
 x(L1), t(L1,c), ubTimer(L2)=1000, lbTimer(L3)=3.
 
 stmtC_A@@
 x(N), t(L1,c), lbTimer(L2)=0:-
 L1=\=N, L1=:=L2|
 x(N),t(L1,a), lbTimer(L2)=0.
 
 stmtC_CS@@
 x(N), t(L1,c), lbTimer(L2)=0:-
 L1=:=N, L1=:=L2|
 x(N), t(L1,cs), lbTimer(L2)=0.
 
 CS@@
 x(N), t(L1,cs):-
 int(N)|
 x(-1), t(L1,a).
 
//Tick@@
	 //全てのスレッドのついてT1>1であることを検査
	 Tick1@@
	 ubTimer(0)=T1,ubTimer(1)=T2,ubTimer(2)=T3,ubTimer(3)=T4,ubTimer(4)=T5,ubTimer(5)=T6
	 :-
	 T1>1,T2>1,T3>1,T4>1,T5>1,T6>1
	  |
	 ubTimer(0)=T1,ubTimer(1)=T2,ubTimer(2)=T3,ubTimer(3)=T4,ubTimer(4)=T5,ubTimer(5)=T6
	 Tick3@@//タイマーをデクリメント
	 ubTimer(0)=U1, lbTimer(0)=L1,
	 ubTimer(1)=U2, lbTimer(1)=L2,
	 ubTimer(2)=U3, lbTimer(2)=L3,
	 ubTimer(3)=U4, lbTimer(3)=L4,
	 ubTimer(4)=U5, lbTimer(4)=L5,
	 ubTimer(5)=U6, lbTimer(5)=L6
	 :-
	 decreUbT(1,U1), decreLbT(1,L1),
	 decreUbT(1,U2), decreLbT(1,L2),
	 decreUbT(1,U3), decreLbT(1,L3),
	 decreUbT(1,U4), decreLbT(1,L4),
	 decreUbT(1,U5), decreLbT(1,L5),
	 decreUbT(1,U6), decreLbT(1,L6).
//lbTimer loopわけないと動かないようだ
	//loop[[
	//	 	branch[[
			 decreLbT(L1)=T1 :- T1>0, T2=T1-1  | lbTimer(L1)=T2.
	//		]]
	//		branch[[
			 decreLbT(L1)=T1 :- T1=<0 | lbTimer(L1)=T1.
	//		 ]]
	//]]
//ubTimer
	//loop[[
	//	 	branch[[	 
			 decreUbT(L1)=T1 :- T1=\=1000, T2=T1-1| ubTimer(L1)=T2.
	//		 ]]
	//		branch[[
			 decreUbT(L1)=T1 :- T1 =:= 1000 | ubTimer(L1)=T1.
	//		 ]]
	//]]



