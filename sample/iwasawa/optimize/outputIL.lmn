output{

printseq{

printseq1@@
stdout(X, Y), R = io_print(Y, Z) :- string(Z) |  R = stdout(io.print(X, Z)).

printseq2@@
stdout(X, Y), R = io_print_line(Y, Z) :- string(Z) | R = stdout( io.print_line(X, Z) ).
}.

outputInit{
io.use.
outport(stdout(io.stdout)).

connectOutport@@
outport(X), rulesetList(Y) :- outport = print_rulesetList (X, Y).

printRulesetListNil@@
R = print_rulesetList(X, []) :- R = X.

printRulesetListInit@@
R = print_rulesetList(X, 
  [{+IRS, ruleset($n), rule(Rule), @rs,
  ruleList = [ {+Rule, compiledRule($insts) } ] } | T]),
  initRuleset(IRS)
  :- int($n) 
  |  R = print_rulesetList(
       	 print_insts(
	 io_print_line(
       	 io_print_line(
       	 io_print(X, "Compiled Ruleset @"), str.from($n)),
	 	     "Compiled Rule\n\t--atommatch:\n\t--memmatch:\n\t--body:L0:"),	 
	 	     $insts),
	 	     T ).

printRulesetList@@
R = print_rulesetList(X, 
  [{+RS, ruleset($n), ruleList($rl), @rl } | T]),
  ruleset(RS)
  :- int($n) 
  |  R = print_rulesetList(
       	 print_ruleList(
       	 io_print_line(
       	 io_print(X, "Compiled Ruleset @"), str.from($n)),
	   	     $rl),
	   	     T).


printRuleListNil@@
R = print_ruleList(X, []) :- R = X.


printRuleList@@
R = print_ruleList(X, 
  [ {+Rule, hasUniq(false), compiledRule($insts)} | T]),
  rule(Rule)
  :- R = print_ruleList(
         print_insts(
	 io_print(X, "Compiled Rule\n\t--atommatch:\n\t--memmatch:\n"),
	 	     $insts),
		     T).

printRuleListUniq@@
R = print_ruleList(X, 
  [ {+Rule, hasUniq(true), compiledRule($insts)} | T]),
  rule(Rule)
  :- R = print_ruleList(
         print_insts(
	 io_print(X, "Compiled Uniq Rule\n\t--atommatch:\n\t--memmatch:\n"),
	 	     $insts),
		     T).

	 
}.


outputInsts{


print_insts_nil@@
R = print_insts(X, []) :- R = X.

print_insts_branch_end@@
R = print_insts(X, [[[branch, Insts]], [stop, []] | T ])
  :- R = print_insts(
         io_print_line(
	 print_insts(
	 io_print_line(X, "\t\tbranch [["),
	 Insts),
	 "\t\t]]"),
	 [[stop, []] | T ]).

print_insts_branch@@
R = print_insts(X, [[[branch, Insts]], [[branch, NextInsts ]] | T ])
  :- R = print_insts(
         io_print_line(
	 print_insts(
	 io_print_line(X, "\t\tbranch [["),
	 Insts),
	 "\t\t]]"),
	 [ [[branch, NextInsts]] | T] ).

print_insts@@
R = print_insts(X, [[$inst, OpList] | T ])
  :- unary($inst)
  | R = print_insts(
              io_print_line(
    	      io_print(
	      io_print(
              io_print(X, "\t\t"),
	      		  str.from($inst) ),
			  "\t" ), 
			  list_to_string(OpList)),
			  T).



list_to_string1@@
Ret = list_to_string( [] ) :- Ret = "[]".
list_to_string2@@
Ret = list_to_string( [X | T] )
 :- Ret = str.concat("[", inner_list_to_string([ X | T ])).


inner_list_to_string1@@
Ret = inner_list_to_string([]) :- Ret = "]".

inner_list_to_string2@@
Ret = inner_list_to_string([ I, J | T])
 :- Ret = str.concat( str.concat(elm_to_string(I), ", "),
   inner_list_to_string([J | T])).

inner_list_to_string3@@
Ret = inner_list_to_string([ I | [] ])
 :- Ret = str.concat( elm_to_string(I), inner_list_to_string([]) ).


elm_to_string1@@
Ret = elm_to_string(null) :- Ret = "null".

elm_to_string2@@
Ret = elm_to_string($i) :- int($i) | Ret = str.from($i).
Ret = elm_to_string(rulesetNum($i))
 :- int($i)
 | Ret = str.concat("@", str.from($i)).

elm_to_string3@@
Ret = elm_to_string(intFunctor($f, $i))
 :- int($f), int($i)
| Ret = str.concat( str.concat(str.from($f), "_"), str.from($i)).

elm_to_string_proxyFunctor@@
Ret = elm_to_string(proxyFunctor($f, $i))
 :- unary($f), int($i)
 | Ret = str.concat( str.concat( $f, "_"), str.from($i)).


elm_to_string_stringFunctor@@
Ret = elm_to_string(stringFunctor($f, $i))
 :- unary($f), int($i)
 | Ret = str.concat( str.concat( str.concat("\"", str.from($f)),
 "\"_"), str.from($i)).

elm_to_string_moduleFunctor@@
Ret = elm_to_string(moduleFunctor($f1, $f2, $i))
 :- unary($f1), unary($f2), int($i)
 | Ret = str.concat( str.concat( str.concat( str.concat(
     str.concat( "'", str.from($f1)), "'.'"), str.from($f2)),
     "'_"), str.from($i)).

elm_to_string4@@
Ret = elm_to_string(functor($f, $i))
 :- unary($f), int($i)
| Ret = str.concat(str.concat(str.concat("'", str.from($f)), "'_"),
  str.from($i)).

elm_to_string5@@
Ret = elm_to_string($i) :- string($i) 
  | Ret = str.concat( str.concat("\"", $i), "\"").

elm_to_string_intList@@
Ret = elm_to_string([H | T]) 
  :-  Ret = list_to_string([H | T]).


}.

outputSlash{
do.
printslash@@
do, outport(X) :- outport = io_print(X, "\nInline\n//").

printseq_slash@@
stdout(X, Y), R = io_print(Y, Z) :- string(Z) |  R = stdout(io.print(X, Z)).

}.

deleteIO{
freeIO@@
outport(X) :- io.free_port(io.close_port(X)).

delete_stdout@@
stdout(X, Y) :- X = Y.
}.



io.use.
str.use.

outputILMain@@
rulesets(RS), {+RS, $rs, @rs},
outputInit{$oi, @oi},
outputInsts{@insts},
outputSlash{$slash, @slash},
deleteIO{@dio},
printseq{@printseq}
:- ret = myseq.run({$rs, @rs, @printseq, $oi, @oi, @insts},
                   [{$slash, @slash}, {@dio}]).



/*
rulesets{$p[], @p},
outputInit{$q, @q},
outputInsts{@insts},
outputSlash{$slash[], @slash},
deleteIO{@dio},
printseq{@printseq}
:- ret = myseq.run( {$p[], @printseq, @p, $q, @q, @insts }, 
   [{$slash[], @slash}, {@dio}] ).
*/
}.

