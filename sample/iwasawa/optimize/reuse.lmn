reuse1{
// 再利用するアトムを特定する
L0 = [[removeatom, [$i0, $j0 , functor( F0, $k0)]] | M0 ],
L1 = [[newatom, [$i1, $j1 , functor( F1, $k1)]] | M1 ],
L3 = [[freeatom, [$i3]] | M3 ]
:- int($i0), int($j0), unary(F0), int($k0), 
   int($i1), int($j1), unary(F1), int($k1),
   int($i3),
   F0 = F1,
   $i1 = $i2,
   $j1 = $j2
| 
L0 = M0, L1 = M1, L3 = M3,
reuse($i0, $i1).


// 再利用のルールに従って番号を付け替える
L = [[relink, [$i, $j, $k, $l, $m]] | M],
reuse($i1, $j1)
:- int($i), int($j), int($k), int($l), int($m),
   int($i1), int($j1),
   $i = $j1
|
L = [[relink, [$i1, $j, $k, $l, $m]] | M],
reuse($i1, $j1).

L = [[newlink, [$i, $j, $k, $l, $m]] | M],
reuse($i1, $j1)
:- int($i), int($j), int($k), int($l), int($m),
   int($i1), int($j1),
   $i = $j1
|
L = [[newlink, [$i1, $j, $k, $l, $m]] | M],
reuse($i1, $j1).

L = [[newlink, [$i, $j, $k, $l, $m]] | M],
reuse($i1, $j1)
:- int($i), int($j), int($k), int($l), int($m),
   int($i1), int($j1),
   $k = $j1
|
L = [[newlink, [$i, $j, $i1, $l, $m]] | M],
reuse($i1, $j1).



// 不要な relink を削除する
L = [[relink, [$i, $j, $k, $l, $m]] | M]
:- int($i), int($j), int($k), int($l), int($m),
   $i = $k,
   $j = $l
|  L = M.

// newlink は relink より後ろに移動
L = [[newlink, [$i0, $j0, $k0, $l0, $m0]],
     [relink, [$i1, $j1, $k1, $l1, $m1]]  | M]
:- int($i0), int($j0), int($k0), int($l0), int($m0),
   int($i1), int($j1), int($k1), int($l1), int($m1)
|
L = [[relink, [$i1, $j1, $k1, $l1, $m1]],
     [newlink, [$i0, $j0, $k0, $l0, $m0]] | M].
}.

reuse2{
// 依存関係が崩れている場合を特定する

L = [[spec, [1, $n]] | M],
L0 = [[relink, [$i0, $j0, $k0, $l0, $m0]],
      [relink, [$i1, $j1, $k1, $l1, $m1]]  | M0]
:-  int($n), $nn = $n+1,
   int($i0), int($j0), int($k0), int($l0), int($m0),
   int($i1), int($j1), int($k1), int($l1), int($m1),
   $i0 = $k1,
   $j0 = $l1
|
L = [[spec, [1, $nn]] | M],
L0 = [[getlink, [$n, $i0, $j0]],
      [relink, [$i0, $j0, $k0, $l0, $m0]],
      [inheritlink, [$i1, $j1, $n, $m1]]  | M0].
}.

removeDeqEnq{

// dequeueatom を削除する
L = [[dequeueatom, [$n]] | M]
:- int($n)
| L = M.

// enqueueatom を削除する
L = [[enqueueatom, [$n]] | M]
:- int($n)
| L = M.

}.

seq.use.

reuse1{@p1}, reuse2{@p2},  removeDeqEnq{@q}, ruleset{ $p[] }
:-
reuse1{@p1}, reuse2{@p2}, removeDeqEnq{@q},
opt = seq.run({$p[]}, [ {@q},  {@p1}, {@p2} ]).


/*
reuse{@p}, ruleset{ $p[] }
:- reuse{@p}, ruleset{ reuseRule. $p[], @p }.

ruleset{ reuseRule, $p[], @p }/
:- opt_ruleset{ $p[] }.
*/
