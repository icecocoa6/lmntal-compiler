/*
----------------------------------------------------------------------
shortest path
                                              Koji Hara
                                              2005/05/23(Mon) 13:20:22
----------------------------------------------------------------------


----------------------------------------------------------------------
概要
----------------------------------------------------------------------
Edge ::= e(<Vertex1 as int>, <Vertex2 as int>, <Weight as int>)

Potential ::= p(<Vertex as int>, <Potential as int>)

----------------------------------------------------------------------
今後の展望
----------------------------------------------------------------------
ちゃんとモジュール化する
	入力：辺の重み、始点番号、終点番号
	出力：始点〜終点のノード番号リスト、終点でのポテンシャル

計算量を実測してみる
	このコードが O(ElogV) で動くのが理想
	ポテンシャルが変化した節点を優先してルール適用するようになっていれば近づきそうな気もする

*/


{ module(shortest_path).

p(VA, PoA), p(VB, PoB),        e(V1, V2, Weight)     :-VA=V1, VB=V2, PoA+Weight<PoB | 
p(VA, PoA), p(VB, PoA+Weight), e(V1, V2, Weight).

}.


{
	shortest_path.use.
	
	// [0] -- 10 --> [1] -- 20 --> [2]
	//  |                           ^
	//  +------------ 15 -----------+
	
	e(0, 1, 10).
	e(1, 2, 20).
	e(0, 2, 15).
	
	p(0, 0).
	p(1, 10000).
	p(2, 10000).
}.
