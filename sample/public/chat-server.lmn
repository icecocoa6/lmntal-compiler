/**
 *  Distributed LMNtal sample
 *    chat-server.lmn
 *    @see chat-client.lmn
 *
 *  AUTHOR
 *    Ryo Okabe
 *
 *  HISTORY
 *    06/01/14 released
 *    06/01/17 update
 */

%dlmntal.bind(50000,
%  [accept(Send1,Recv1),accept(Send2,Recv2),close]).

%merge(Recv1,Recv2,S).
%cp(S,Send1,Send2).

% メッセージの分配に関するルール（sample/mizuno/chat3.lmn より拝借）．
% TODO: 以下のような構造を用いれば動的な人数の増減に対応できると思う．
% {in(R1),in(R2),in(R3),out(Z)},Z=[S1,S2,S3],
% dlt.socket(S1,R1,O1),dlt.socket(S2,R2,O2),dlt.socket(S3,R3,O3).

%O=merge([D|I1],I2) :- O=[D|merge(I1,I2)].
%O=merge(I1,[D|I2]) :- O=[D|merge(I1,I2)].
%cp([D|I],O1,O2) :- string(D) | O1=[D|OO1],O2=[D|OO2],cp(I,OO1,OO2).

dlmntal.bind(50000,
  [accept(S1,R1),accept(S2,R2),accept(S3,R3),accept(S4,R4)]).
{in(R1),in(R2),in(R3),in(R4),out(Z)}.
Z=cp([S1,S2,S3,S4]).

% rule: merge
merge @@
I=[H|T],{in(I),out(O),$p,@p} :- string(H) |
  {in(T),out(O2),$p,@p},O=[H|O2].

% rule: copy
copy_stream @@
cp(List,[H|T]) :- string(H) | cp(cpstr(H,List),T). 
copy_string @@
Ret=cpstr(S,[H|T]) :- string(S) |
  Ret=[H2|cpstr(S,T)],H=[S|H2].
copy_string @@
Ret=cpstr(S,[]) :- string(S) | Ret=[].