/*
------------------------------------------------------------------
Lambda calculus (nondeterministic)
                                       Koji Hara and Kazunori Ueda
                                       2005-11-07 00:50
------------------------------------------------------------------
*/

{ module(lambda).

beta@@ H=apply(lambda(A, B), C) :- H=B, A=C.

// cp-lambda -> lambda-dp
// cp-? -> ?-cp
l_c@@ lambda(A,B)=cp(C,D) :-
        C=lambda(E,F), D=lambda(G,H), A=dp(E,G), B=dp(F,H).
a_c@@  apply(A,B)=cp(C,D) :-
        C= apply(E,F), D= apply(G,H), A=cp(E,G), B=cp(F,H).
l_d@@ lambda(A,B)=dp(C,D) :-
        C=lambda(E,F), D=lambda(G,H), A=dp(E,G), B=dp(F,H).
a_d@@  apply(A,B)=dp(C,D) :-
        C= apply(E,F), D= apply(G,H), A=dp(E,G), B=dp(F,H).
l_r@@ lambda(A,B)=rm :- A=rm, B=rm.
a_r@@  apply(A,B)=rm :- A=rm, B=rm.
c_r@@     cp(A,B)=rm :- A=rm, B=rm.
d_r@@     dp(A,B)=rm :- A=rm, B=rm.
r_r@@           rm=rm :- .

d_d@@ dp(A,B)=dp(C,D) :- A=C, B=D.
c_d@@ cp(A,B)=dp(C,D) :- C=cp(E,F), D=cp(G,H), A=dp(E,G), B=dp(F,H).

u_c@@ U=cp(A,B) :- unary(U) | A=U, B=U.
u_d@@ U=dp(A,B) :- unary(U) | A=U, B=U.
u_r@@ U=rm      :- unary(U) | .

}.

// examples

{ lambda.use. example1.
  // (lambda y . y y) a => a a
  r=apply(lambda(cp(Y0,Y1), apply(Y0,Y1)), a).
}.

{ lambda.use. example2.
  // (lambda f . (lambda x . f (f x) ) ) succ 0
  r=apply(apply(lambda(cp(F0,F1),
                lambda(X, apply(F0,apply(F1,X)))),
    succ), 0).
  // H=apply(succ, I) :- int(I) | H=I+1.
}.

{ lambda.use. example3.
  // (lambda mul . (lambda sqr . sqr 5) (lambda x . mul x x)) 
  //     (lambda x . (lambda y . * x y) ) 
  r=apply(
     lambda(Mul,
       apply(lambda(Sqr, apply(Sqr,5)),
         lambda(cp(X0,X1), apply(apply(Mul,X0),X1)))),
     lambda(A, lambda(B, '*'(A,B)))).
}.

{ lambda.use. example4.
  // exponentiation of natural numbers in Church encoding
  // n is encoded as f^n x
  // then n^m is encoded as lambda n m -> m n

  // N=n(0) :- N=lambda(rm, lambda(X, X)).
  // N=n(1) :- N=lambda(F, lambda(X, (F,X))).
  // N=n(2) :- N=lambda(cp(F0,F1), lambda(X,
  //            apply(F0,apply(F1,X)))).
  N=n(3) :- N=lambda(cp(F0,cp(F1,F2)), lambda(X,
              apply(F0,apply(F1,apply(F2,X))))).
  N=n(4) :- N=lambda(cp(F0,cp(F1,cp(F2,F3))), lambda(X,
              apply(F0,apply(F1,apply(F2,apply(F3,X)))))).
  r=apply(apply(apply(n(4), n(3)), s), 0).  
  H=apply(s, I) :- int(I) | H=I+1.
}.

 