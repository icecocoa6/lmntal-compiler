/**
 *  Distributed LMNtal sample
 *    sort-server.lmn
 *    @see sort-client.lmn
 *
 *  AUTHOR
 *    Ryo Okabe
 *
 *  HISTORY
 *    06/01/12 released
 *    06/01/30 update クライアントに終了処理を追加
 */

dlmntal.bind(50000,
  [accept(S1,strDec),accept(S2,strDec),accept(S3,strDec),close]).
  
cp([S1,S2,S3],Data).

% ユーザがダウンロードして実行する文字列形式のプログラム
% リストを生成してクイックソートで昇順に整列する
Data=
["{
  gen(100,[]).
  gen(I,L) :- I2=I-1,I>0 | gen(I2,[(integer.rnd(10000))|L]).
  gen(I,L) :- I=:=0 | list=sort(L).
  R=sort(L) :- R=sort(L,[]).
  R=sort([D|L],Done) :- int(D) |
    devide(L,D,L1,L2),R=sort(L1,[D|sort(L2,Done)]).
  R=sort([],Done) :- R=Done.
  devide([D|L],B,L1,L2) :- D=<B | devide(L,B,LL1,L2),L1=[D|LL1].
  devide([D|L],B,L1,L2) :- D>=B | devide(L,B,L1,LL2),L2=[D|LL2].
  devide([],B,L1,L2) :- int(B) | L1=[],L2=[].
}"].

% プログラムの分配を行うルール．
cp(List,[H|T]) :- string(H) | cp(cpstr(H,List),T). 
Ret=cpstr(S,[H|T]) :- string(S) | Ret=[H2|cpstr(S,T)],H=[S|H2].
Ret=cpstr(S,[]) :- string(S) | Ret=[].

% リストのデコードフィルタ．
strDec([_SH|T]) :- 
  codec.strDecoder(_SH),strDec(T).

% クライアントから収集したソート済みリストをマージする．
{list(L1),$p,@p},{list(L2),$q,@q} :- ground(L1),ground(L2) |
  {
    list=merge(L1,L2),$p,$q.
    R=merge([D1|L1],[D2|L2]) :- D1=<D2 | R=[D1|merge(L1,[D2|L2])].
    R=merge([D1|L1],[D2|L2]) :- D1>=D2 | R=[D2|merge([D1|L1],L2)].
    R=merge(L,[]) :- R=L.
    R=merge([],L) :- R=L.
    R=f([D]) :- R=D.
  }.
