/*****************************************************************
                      The Ambient Calculus
                    Kazunori Ueda, 2006-08-05

 For details, see:
 Kazunori Ueda, Encoding Distributed Process Calculi into  LMNtal.
 Electronic Notes in Theoretical Computer Science, Vol.209
 (2008), pp.187-200.

 Examples are taken from:
 Cardelli, L. and Gordon, A. D., Mobile Ambients,
 in Foundations of Software Science and Computational Structures,
 Nivat, M. (ed.), LNCS 1378, Springer-Verlag, 1998, 140-155.
*****************************************************************/

{ module(amb).

/* n[in m.P | Q] | m[R] --> m[n[P|Q] | R] */
in@@
{amb(N0), {id,+N0,$n}, {id,+M0,-M1,$m0}, in(M0,{$p}), $q,@q},
{amb(M2), {id,+M2,-M3,$m1}, $r,@r},
{id,+M1,+M3,$m2} :-
   {amb(M4), {id,+M4,+M5,-M,$m1},
      {amb(N2), {id,+N2,$n}, {id,-M5,$m0}, $p,$q,@q},
   $r,@r},
   {id,+M,$m2}.

/* m[n[out m.P | Q] | R] --> n[P|Q] | m[R] */
out@@
{amb(M0), {id,+M0,+M2,$m1}, {id,+N1,$n2},
  {amb(N0), {id,+M1,-M2,$m0}, {id,+N0,-N1,$n}, out(M1,{$p}), $q,@q},
  $r,@r} :-
    {amb(N2), {id,-M3,$m0}, {id,+N2,-N3,$n}, $p,$q,@q},
    {amb(M4), {id,+M3,+M4,$m1}, {id,+N3,$n2}, $r,@r}.

/* open m.P | m[Q] --> P|Q */
open@@
open(M,{$p}), {amb(M1), {id,+M1,-M2,$mm}, $q,@q}, {id,+M,+M2,$m} :-
   $p, $q, {id,$m,$mm}.

/* !(open m) | m[Q] --> Q | !(open m) */
open_repl@@  /* special case of !open */
open_repl(M,{$p}), {amb(M1), {id,+M1,-M2,$mm}, $q,@q}, {id,+M,+M2,$m} :-
   nlmem.copy({$p},cp,Copies), copies(Copies,P),
   $q, {id,+M3,$m,$mm}, open_repl(M3,P).
open_repl_aux@@
copies(cp(C1,C2),P), {+C1,$p1} :- $p1, P=C2.

proxy_enter@@
{$p[M0,M1|*P],@p}, {id,+M0,+M1,$m} :-
   {$p[M0,M1|*P],@p, {id,+M0,+M1,-M}}, {id,+M,$m}.

proxy_resolve@@
{id,-M,$m0}, {id,+M,$m1} :- {id,$m0,$m1}.

proxy_insert_middle@@
{{{id,-M,$m},$p,@p},$q,@q} :- {{id,+M0,-M}, {{id,-M0,$m},$p,@p},$q,@q}.

proxy_insert_outer@@
{{id,+M0,$m0},$p,@p} :- {{id,-M,$m0},$p,@p}, {id,+M0,+M}.

proxy_merge_outer@@
{id,+M0,$m0}, {id,+M1,$m1}, {{id,-M0,-M1,$m2},$p,@p} :-
     {id,+M,$m0,$m1}, {{id,-M,$m2},$p,@p}.

local_name_in@@
{$p[M|*P],@p}, {id,+M} :- {{id,+M}, $p[M|*P],@p}.

global_name_out@@
{{id,name($n),+M0},{$p[M0|*M],@p},$q,@q} :- unary($n) |
    {{id,+M0,-M},{$p[M0|*M],@p},$q,@q}, {id,name($n),+M}.

root_merge@@
{id,name($n0),$m0}, {id,name($n1), $m1} :-
  unary($n0), unary($n1),
  $n0=$n1 |
  {id,name($n0),$m0,$m1}.

gc1@@ {id} :- .
gc2@@ {id,name($n)} :- unary($n) | .
gc3@@ {id,+X,$m}, {{id,-X}, $p,@p} :- {id,$m}, {$p,@p}.
gc4@@ amb.use :- .

}.

% amb.use.

// Locks /////////////////////////////////////////////////////////////////
//   acquire n.P =def open n.P
//   release n.P =def n[] | P 
//////////////////////////////////////////////////////////////////////////
/*
{ amb.use. locks.
acquire(N,P) :- open(N,P).
release(N,{$p}) :- {amb.use, amb(N0), {id,+N0,-N}}, $p.

acquire(N0,{release(M0,{pp})}),
release(N1,{acquire(M1,{qq})}),
{id,+N0,+N1}, {id,+M0,+M1}.
}.
*/
// Mobile Agent Authentication ///////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
/*
{ amb.use.  authentication.
{id,name(home),+H4}, {id,name(agent),+A4},
{amb.use. amb(H0), {id,+N0,+N3}, {id,+H0,+H3,-H4}, {id,+A3,-A4},
  open(N0,{}),
  {amb.use. amb(A), {id,+H1,+H2,-H3}, {id,+A,+A1,+A2,-A3}, {id,+N2,-N3},
   out(H1,{in(H2,{{amb(N1), {id,+N1,-N2}, 
                   out(A1,{open(A2,{pp})})}})})}}.
}.
*/
// Firewall Access ///////////////////////////////////////////////////////
//   Firewall =def (new w) w[k[out w.in k'.in w] | open k'.open k''.P]
//   Agent    =def k'[open k.k''[Q]]
//////////////////////////////////////////////////////////////////////////

{ amb.use.  firewall.
{id,name(k),+K9,+K3}, {id,name(kk),+L3,+L9},
{id,name(kkk),+M9,+M3}, {id,+W9},
{amb.use. amb(W0),
  {id,+W0,+W8,-W9}, {id,+K8,-K9},
  {id,+L1,+L8,-L9}, {id,+M0,-M9},
  {amb.use. amb(K0),
    {id,+K0,-K8}, {id,+W1,+W2,-W8}, {id,+L0,-L8},
    out(W1,{in(L0,{in(W2,{})})})},
  open(L1,{open(M0,{pp})})
},
{amb.use. amb(L2),
  {id,+L2,-L3}, {id,+K2,-K3}, {id,+M2,-M3},
  open(K2,{{amb(M1), {id,+M1,-M2}, qq}})
}.
}.

// Objective Moves ///////////////////////////////////////////////////////
//   allow n    =def !open n
//   mv in n.P  =def (new k) k[in n.enter[out k.open k.P]]
//   mv out n.P =def (new k) k[out n.exit[out k.open k.P]]
//   n_dn[P]    =def n[P | allow enter]   (n_dn allows mv in)
//   n_up[P]    =def n[P] | allow exit    (n_up allows mv out)
//   n_dnup[P]  =def n[P | allow enter] | allow exit
//                                        (n_dnup allows mv in and mv out)
//////////////////////////////////////////////////////////////////////////
/*
{ amb.use.  objectivemoves.
{ module(b).
  allow(N) :- open_repl(N,{}).
  mv_in(N,{$p}) :- {id,+K}, {id,name(enter),+E},
    {amb.use. amb(K0), {id,+K0,+K9,-K}, {id,+N0,-N}, {id,+E1,-E},
       in(N0,{{amb(E0), {id,+E0,-E1}, {id,+K1,+K2,-K9},
                 out(K1,{open(K2,{$p})})}})}.
  mv_out(N,{$p}) :- {id,+K}, {id,name(exit),+E},
    {amb.use. amb(K0), {id,+K0,+K9,-K}, {id,+N0,-N}, {id,+E1,-E},
       out(N0,{{amb(E0), {id,+E0,-E1}, {id,+K1,+K2,-K9},
                 out(K1,{open(K2,{$p})})}})}.
  // n_dn(N,{$p}) :- {id,name(enter),+E},
  //   {amb.use. b.use. amb(N0), {id,+N0,-N}, {id,+E0,-E}, $p, allow(E0)}.
  // n_up(N,{$p}) :- {id,name(exit),+E},
  //   {amb.use. b.use. amb(N0), {id,+N0,-N}, $p}, allow(E).
  n_dnup(N,{$p}) :- {id,name(enter),+E}, {id,name(exit),+Ex0},
    {amb.use. b.use. amb(N0), {id,+N0,-N}, {id,+E0,-E}, $p,
       allow(E0)},
    allow(Ex0).

  b.use :- .
  {module(b), @b} :- .
}.

b.use.
{id,name(n),+N0,+N1}, mv_in(N0,{pp}), n_dnup(N1,{qq}).
//{id,name(n),+N0,+N1}, n_dnup(N0,{mv_out(N1,{pp}),qq}).
}.
*/
// Choice ////////////////////////////////////////////////////////////////
//   n=>P + m=>Q =def (new p q r) (
//                        p[in n.out n.q[out p.open r.P]] |
//                        p[in m.out m.q[out p.open r.Q]] |
//                        open q | r[])
//////////////////////////////////////////////////////////////////////////
/*
{ amb.use.  choice.
choice@@
choice(N,{$p},M,{$q}) :-
  {id,+P9,+P8}, {id,+Q1,+Q3,+Q9}, {id,+R1,+R3,+R8},
  {amb.use. amb(P0). {id,+P0,+P2,-P9}, {id,+N0,+N1,-N},
     in(N0,{out(N1,{{amb(Q0), {id,+Q0,-Q1}, {id,+P1,-P2}, {id,+R0,-R1},
                       out(P1,{open(R0,{$p})})}})})},
  {amb.use. amb(P3). {id,+P3,+P5,-P8}, {id,+M0,+M1,-M},
     in(M0,{out(M1,{{amb(Q2), {id,+Q2,-Q3}, {id,+P4,-P5}, {id,+R2,-R3},
                       out(P4,{open(R2,{$q})})}})})},
  open(Q9,{}), {amb.use, amb(R9), {id,+R9,-R8}}.

{id,name(n),+N,+N1}, {id,name(m),+M},
choice(N,{pp},M,{qq}), {amb.use, amb(N0), {id,+N0,-N1}, rr}.
}.
*/

// Renaming //////////////////////////////////////////////////////////////
//   n be m.P =def m[out n.open n.P] | in m
//////////////////////////////////////////////////////////////////////////
/*
{ amb.use.  renaming.
{ module(r).
rename(N,M,{$p}) :-
  {id,+M1,+M2,-M},
  {amb.use, amb(M0), {id,+M0,-M1}, {id,+N0,+N1,-N},
     out(N0,{open(N1,{$p})})},
  in(M2,{}).
gc@@ r.use :- .
gc@@ {module(r), @r} :- .
}.

r.use.
{id,name(m),+M1}, {id,name(n),+N2},
{amb.use. r.use. amb(N0), {id,+N0,+N1,-N2}, {id,+M0,-M1},
  rename(N1,M0,{pp}), qq}.
}.
*/
