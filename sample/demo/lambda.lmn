beta@@ H=apply(lambda(A, B), C) :- H=B, A=C.

l_c@@ lambda(A,B)=cp(C,D) :-
         C=lambda(E,F), D=lambda(G,H), A=dp(E,G), B=dp(F,H).
a_c@@  apply(A,B)=cp(C,D) :-
         C= apply(E,F), D= apply(G,H), A=cp(E,G), B=cp(F,H).
l_d@@ lambda(A,B)=dp(C,D) :-
         C=lambda(E,F), D=lambda(G,H), A=dp(E,G), B=dp(F,H).
a_d@@  apply(A,B)=dp(C,D) :-
         C= apply(E,F), D= apply(G,H), A=dp(E,G), B=dp(F,H).
l_r@@ lambda(A,B)=rm :- A=rm, B=rm.
a_r@@  apply(A,B)=rm :- A=rm, B=rm.
c_r@@     cp(A,B)=rm :- A=rm, B=rm.
d_r@@     dp(A,B)=rm :- A=rm, B=rm.
r_r@@           rm=rm :- .

d_d@@ dp(A,B)=dp(C,D) :- A=C, B=D.
c_d@@ cp(A,B)=dp(C,D) :- C=cp(E,F), D=cp(G,H), A=dp(E,G), B=dp(F,H).
c_c@@ cp(A,B)=cp(C,D) :- C=cp(E,F), D=cp(G,H), A=cp(E,G), B=cp(F,H).

u_c@@ U=cp(A,B) :- unary(U) | A=U, B=U.
u_d@@ U=dp(A,B) :- unary(U) | A=U, B=U.
u_r@@ U=rm      :- unary(U) | .

N=n(0) :- N=lambda(rm,lambda(X,X)).
N=n(1) :- N=lambda(F,lambda(X,apply(F,X))).
N=n(2) :- N=lambda(cp(F0,F1),
  lambda(X, apply(F0,apply(F1,X)))).
N=n(3) :- N=lambda(cp(F0,cp(F1,F2)),
  lambda(X, apply(F0,apply(F1,apply(F2,X))))).
N=n(4) :- N=lambda(cp(F0,cp(F1,cp(F2,F3))),
  lambda(X, apply(F0,apply(F1,apply(F2,apply(F3,X)))))).

res=apply(n(0), n(1)).
res=lambda(X, Y) :- res=apply(apply(lambda(X, Y), succ), 0).

% H=apply(succ, I) :- int(I) | H=I+1. 
