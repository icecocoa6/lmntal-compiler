/*****************************************************************
                   The (synchronous) pi-calculus
                      Kazunori Ueda, 2006-05-20

  Examples are taken from 
  [1] Milner, R., The Polyadic pi-Calculus, a Tutorial
      ECS-LFCS-91-180
  [2] Milner, R., Communicating and Mobile Systems: the Pi-Calculus
      Cambridge Univ. Press, 1999.
                _
  p ::= x(y) | xy

  R ::= \Sigma_j p_j.P_j   (e.g., p1.P1 + p2.P2 + ...)
         
  P ::= new a P
     |  P1 | P2
     |  R
     |  !R
*****************************************************************/

{ module(pi).
  comm@@ {$x,+C1,+C2}, {once, get(C1,Y,{$b1[Y|*V1]}), $c1},
                       {snd(C2,Z,{$b2}),  $c2} :-
           {$x}, $b1[Z|*V1], $b2, nlmem.kill({$c1,$c2}).
  repl@@ {$x,+C1,+C2}, {bang, get(C1,Y,{$b1[Y|*V1]}), $c1},
                       {snd(C2,Z,{$b2}),  $c2} :-
           {$x,+C3}, $b2, nlmem.kill({$c2}),
           {bang, get(C3,Y2,Body2),$c1},
           nlmem.copy({$b1[U|*V1]},cp,Copies), 
           copies(Copies,U,Body2,Z,Y2).
  aux1@@ copies(cp(C1,C2),cp(D1,D2),Body2,Z,Y2),
         {$c1[D1|*C1],+C1}, {$c2[D2|*C2],+C2} :-
           $c1[Z|*C1], {$c2[Y2|*C2], enter(Body2)}.
  aux2@@ {$m[X|*L]}, {enter(X),$c} :- {$m[X|*L], {+X,$c}}.
  kill@@ {+C,$c}, killed(C) :- {$c}.
  copy@@ {+C,$c}, cp(C1,C2,C) :- {+C1,+C2,$c}.
  gc1@@  {name($n)} :- unary($n) | .
  gc2@@  {name} :- .
  gc3@@  {} :- .
  gc4@@  pi.use :- .
  gc5@@  { module(pi), @a} :- .

  unif1@@ [] = [] :- .
  unif2@@ [A1|D1] = [A2|D2] :- A1=A2, D1=D2.
}.

// pi.use.
/* _             _        _                                */
/* x<y>.0 | x(u).u<v>.0 | x<z>.0  -->*                     */
/*      _      _         _      _                          */
/*      y<v> | x<z>  or  x<y> | z<v>                       */
/*
{ example1. pi.use.
  {snd(X0,Y,{})},
  {once,get(X1,U,{{snd(U,V,{})}})},
  {snd(X2,Z,{})},
  {name(x),+X0,+X1,+X2}, {name(y),+Y}, {name(z),+Z}, {name(v),+V}
}.
*/

/*         _             _         _             _      _      */
/* (new x)(x<y>.0 | x(u).u<v>.0) | x<z>.0  -->*  y<v> | x<z>   */
/*
{ example2. pi.use.
  {snd(LX0,Y,{})},
  {once,get(LX1,U,{{snd(U,V,{})}})},
  {snd(X2,Z,{})},
  {name,+LX0,+LX1},
  {name(x),+X2}, {name(y),+Y}, {name(z),+Z}, {name(v),+V}
}.
*/

/*         _           _            _      _                    */
/* (new z)(x<y> + z(w).w<y>) | x(u).u<v> | x<z>                 */
/*               _      _          _                            */
/*  -->* (new z)(y(v) | x(z))  or  v(y)                         */
/*
{ example3. pi.use.
  {once,snd(X0,Y0,{}),get(Z0,W,{{snd(W,Y1,{})}})},
  {once,get(X1,U,{{snd(U,V,{})}})},
  {once,snd(X2,Z1,{})},
  {name(x),+X0,+X1,+X2}, {name(y),+Y0,+Y1}, {name,+Z0,+Z1},
  {name(v),+V}
}.
*/

/* 3-place buffer */
/*                  _             _          _                 */
/* (new b c m1 m2) (c<x1,ll,m1> | b<m1,m2> | c<x2,m2,rr>       */
/*                   _                    _    _               */
/*    | !b(i,o).i(x).c<x,i,o> | !c(y,i,o),o<y>,b<i,o>)         */
/*              _            __     _          __     _        */
/*   -->* ll(x).c<x,ll,m1> | m2<x1>.b<m1,m2> | rr<x2>.b<m2,r>  */

{ example4. pi.use.
   {snd(C1,S1,{})}, S1=[x1,ll,M11],
   {snd(B1,S2,{})}, S2=[M12,M21],
   {snd(C2,S3,{})}, S3=[x2,M22,rr],
   {bang,get(B2,G1,
          {G1=[cp(I1,I2),O], 
             {once,get(I1,X,{{snd(C3,S4,{})}, S4=[X,I2,O]})}})},
   {bang,get(C4,G2,
          {G2=[Y,I,cp(O1,O2)], 
             {snd(O1,Y,{{snd(B3,S5,{})}, S5=[I,O2]})}})},
   {name,+B1,+B2,+B3}, {name,+C1,+C2,+C3,+C4},
   {name,+M11,+M12}, {name,+M21,+M22}.
}.
