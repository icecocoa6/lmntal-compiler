/* exhaustive search by continuation-based program transformation
   Interactive version for LMNtal
   - invoke with --remain and --immediate
   - start with 's' and find the next solution with 'f'.
*/
// append(X,Y,Z) :- X=[], Y=Z.
// append(X0,Y,[A|Z]) :- append(X,Y,Z), /*L1*/ X0=[A|X].
// bagof((X,Y), append(X,Y,Z) /*L0*/, S).
//
// Calling form: :- ..., ap(Z,'L0',S,[]), ...

ap(Z0,Cont0,Z,Cont) :- ap1(Z0,Cont0,Z1,Cont1), ap2(Z1,Cont1,Z,Cont).

ap1(Z0,Cont0,Z,Cont) :- cont(Cont0,[],Z0,Z,Cont).

c, ap2(Z0,Cont0,Z,Cont) :- ap21(Z0,Cont0,Z,Cont).
ap21([A|Z0],Cont0,Z,Cont) :- ap(Z0,'L1'(A,Cont0),Z,Cont).
ap21([],    Cont0,Z,Cont) :- c, Z=[], Cont=Cont0.

cont('L1'(A,Cont0),X,Y,Z,Cont) :- cont(Cont0,[A|X],Y,Z,Cont).
cont('L0',         X,Y,Z,Cont) :- ground(X), ground(Y) |
    res(X,Y), Cont='L0', Z=append(X,Y).

1@@ H=append([],Y) :- H=Y.
2@@ H=append([A|X],Y) :- H=[A|append(X,Y)].

f, res(X,Y) :- ground(X), ground(Y) | c.

s :- ap([1,2],'L0',z,cont).



