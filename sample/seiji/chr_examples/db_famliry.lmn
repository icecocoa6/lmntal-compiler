/* db_family */

chr.use.

{

%%QUERY
facts.


%%FACTS

facts :-
	gender(a,f),
	//gender(b,m),
	gender(c,f),
	gender(d,m),
	//parent(a,b),
	parent(a,c),
	parent(c,d).

/*
	gender(lucille,f), 
	gender(michael,m), 
	gender(lindsay,f),
	gender(george_michael,m), 
	gender(maeby,f), 
	gender(buster,m),
	parent(lucille, michael),
	parent(lucille, lindsay),
	parent(lucille, buster),
	parent(michael, george_michael), 
	parent(lindsay, maeby).
*/
/*
	ancestor(lindsay,maeby),
  ancestor(lucille,buster),
  ancestor(lucille,george_michael),
  ancestor(lucille,lindsay),
  ancestor(lucille,maeby),
  ancestor(lucille,michael),
  ancestor(michael,george_michael),
  aunt(lindsay,george_michael),
  cousin(george_michael,maeby),
  cousin(maeby,george_michael),
  father(michael,george_michael),
  gender(buster,m),
  gender(george_michael,m),
  gender(lindsay,f),
  gender(lucille,f),
  gender(maeby,f),
  gender(michael,m),
  grandparent(lucille,george_michael),
  grandparent(lucille,maeby),
  mother(lindsay,maeby),
  mother(lucille,buster),
  mother(lucille,lindsay),
  mother(lucille,michael),
  parent(lindsay,maeby),
  parent(lucille,buster),
  parent(lucille,lindsay),
  parent(lucille,michael),
  parent(michael,george_michael),
  sibling(buster,lindsay),
  sibling(buster,michael),
  sibling(lindsay,buster),
  sibling(lindsay,michael),
  sibling(michael,buster),
  sibling(michael,lindsay),
  uncle(buster,george_michael),
  uncle(buster,maeby),
  uncle(michael,maeby).
*/




%% RULES

eq.use.

% remove duplicates
% sibling(X,Y) \ sibling(X,Y) <=> true.
% cousin(X,Y) \ cousin(X,Y) <=> true.
sibling(X1, Y1) \ sibling(X2, Y2) :- X1=X2, Y1=Y2 | true.
cousin(X1, Y1) \ cousin(X2, Y2) :- X1=X2, Y1=Y2 | true.


% only one mother/father per person
% mother(M1,C) \ mother(M2,C) <=> M1=M2.
% father(F1,C) \ father(F2,C) <=> F1=F2.
%改良版
mother(M1, C1) \ mother(M2, C2) :- C1=C2, ground(M1), ground(M2) | eq(M1, M2).
father(F1, C1) \ father(F2, C2) :- C1=C2, ground(F1), ground(F2) | eq(F1, F2).
//father(a,b), father(c,b).

/*
mother(M1, C1) \ mother(M2, C2) :- C1=C2, M1=M2 | true.
mother(M1, C1) \ mother(M2, C2) :- C1=C2, M1\=M2 | false.
father(F1, C1) \ father(F2, C2) :- C1=C2, F1=F2 | true.
father(F1, C1) \ father(F2, C2) :- C1=C2, F1\=F2 | false.
%CHRでのM1=M2をうまく実現できていない。
*/



% female parent is mother, ...
% parent(X,Y), gender(X,f) ==> mother(X,Y).
% parent(X,Y), gender(X,m) ==> father(X,Y).
parent(X1, Y), gender(X2, f) :- 
	X1=X2, uniq(X1, X2, Y) | parent(X1, Y), gender(X2, f), mother(X1, Y).
parent(X1, Y), gender(X2, m) :- 
	X1=X2, uniq(X1, X2, Y) | parent(X1, Y), gender(X2, m), father(X1, Y).


% parent(G,P), parent(P,C) ==> grandparent(G,C).
parent(G, P1), parent(P2, C) :- 
	P1=P2, uniq(G, P1, P2, C) | parent(G, P1), parent(P2, C), grandparent(G, C).


% ancestor is transitive closure of parent
% parent(X,Y) ==> ancestor(X,Y).
% parent(X,Y), ancestor(Y,Z) ==> ancestor(X,Z). 
parent(X, Y) :- uniq(X, Y) | parent(X, Y), ancestor(X, Y).
parent(X, Y1), ancestor(Y2, Z) :- 
	Y1=Y2, uniq(X, Y1, Y2, Z) | parent(X, Y1), ancestor(Y2, Z), ancestor(X, Z).
	
	
% siblings are people who have same parent
% parent(P,X), parent(P,Y) ==> X\==Y | sibling(X,Y).
parent(P1, X), parent(P2, Y) :- 
	P1=P2, X\=Y, uniq(P1, P2, X, Y) | parent(P1, X), parent(P2, Y), sibling(X, Y).
//parent(a,b), parent(a,c).を与えるとsibling(b,c), sibling(c,b)の２つが生成されるがそれはいいのか？
//WebCHRでは２つ生成されているが
//parent(a,b), parent(a,c).

% cousins are people who have same grandparent
% grandparent(G,X), grandparent(G,Y) ==> X\==Y | cousin(X,Y).
grandparent(G1, X), grandparent(G2, Y) :- 
	X\=Y, uniq(G1, G2, X, Y) | grandparent(G1, X), grandparent(G2, Y), cousin(X, Y).
//これもgrandparent(a,b), grandparent(a,c).を与えるとcousin(b,c)が２つ生成される。


% aunt(A,C): A is female sibling of parent of C
% gender(A,f), sibling(A,P), parent(P,C) ==> aunt(A,C).
% uncle(U,C): U is male sibling of parent of C
% gender(U,m), sibling(U,P), parent(P,C) ==> uncle(U,C).
gender(A1, f), sibling(A2, P1), parent(P2, C) :- 
	A1=A2, P1=P2, uniq(A1, A2, P1, P2, C) | gender(A1, f), sibling(A2, P1), parent(P2, C), aunt(A1, C).
gender(U1, m), sibling(U2, P1), parent(P2, C) :- 
	U1=U2, P1=P2, uniq(U1, U2, P1, P2, C) | gender(U1, m), sibling(U2, P1), parent(P2, C), uncle(U1, C).


}.