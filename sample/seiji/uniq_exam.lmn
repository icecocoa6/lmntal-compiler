/* 
	ルールが複製されても履歴は共有されたまま、の例
	--hiderulesetで実行すると見やすい 

	新uniqで目指すのは、
	「複製される前の履歴は、複製後のルールにも影響を与えるが、
	複製された後の履歴は、他のルールに影響を与えない」
	（文章で表現しにくい）
	つまり下の実行結果が
	t(1), t(1), ok(2), ok(2), i(2), {t(1), ok(1)、@t_ok@.}, 
	@t_ok@}, @rule_copy@, @t_ok@, @t_ok@
	となってほしい。
*/

t(1), t(1), t(2), t(2).
i(0).
{
t(1), t(1).
t_ok @@ t(T) :- int(T), uniq(T) | ok(T).
}.
rule_copy @@ i(I), {$p, @q}/ :- I<2 | i(I+1), {$p, @q}, @q.



/*
 	リンク番号によって別の構造だとみなされる例、等
*/
%% こっちの例は明らかに違う構造
%b(a, c), b(a, c), b(c, a), b(c, a).
%a(X), c(Y), $p[X, Y] :- uniq($p) | ok.

%a(X), c(Y), b(X, Y) :- uniq | ok.
%a(X), c(Y), b(Y, X) :- uniq | ok.

%% これが違う構造だとみなされて、ルールが２回反応する。
%b(a, a), b(a, a), b(a, a).
%a(X), a(Y), $p[X, Y] :- uniq($p) | ok.
%a(X), a(Y), $p[X, Y] :- ground($p) | ok. 
%a(X), a(Y), b(X, Y) :- uniq | ok.
%a(X), a(Y), b(Y, X) :- uniq | ok.

%LMNtalは以下の２つは違うものとして扱っている
%それを考えると、上の例は納得できる
%b(a, c), b(c, a).
%a(A1), a(A2) :-  A1 = A2 | ok.

%これも同様
%{b(a,c)}, {b(c,a)}. 
%{a(X), c(Y), $p[X, Y]}, {a(A), c(B), $q[A, B]}:- $p=$q | ok.


/*
 	propagationとuniqの比較を下記の例と共に考えた
		ルール：a(A) ==> b(A).
		クエリー：a(1).
		結果：a(1), b(1).
*/
//a(1).

%% 1.
%% propagationはヘッドにボディを一度だけ追加するルール
%% だからuniqを使うと、ヘッドをボディに二重に書かなければならない
//	a(A) :- uniq(A) | a(A), b(A).

%% 2.
%% そこで、CHRのsimpagationと同じ働きをするLMNtalのバックスラッシュ記法(以下、\)を用いる
%% こうすることで、1.の式と比べて、
%% 	(1)ヘッドをボディへ二重に書かなくてよい
%%  (2)ヘッドを消して、同じものをボディで生成する、という冗長な内部動作が無くなる
%% という利点がある
%% ((2)に関しては、)
//	a(A) \ :- uniq(A) | b(A).


%%ここの考え方はeclipseでのLMNtal実行時に-Oがつけられていたためと
%%分かったので、解決した
/*
%% 3.
%% ところが、1.と2.の中間命令列を比較すると、中間命令の総数、種類、順番全て同じだった
%% (一部引数の値が違うところがあった)
%% uniq内部にバックスラッシュに相当する機能があるのか？
*/

//a(A) :- uniq(A) | b(A).




//{$p[X| *V]}, {$q[*W]}} :- ok.


/* その他リンク関係色々 */
//X=Y :- uniq | p(X, Y).

%{{a(S1), b(T1)}}, S1 = T1.
%{a(S2), b(T2)}, T2 = S2.
%{a(S3), b(T3)}, T3 = S3.
%{a(U1), b(V1), U1 = V1}.
%{a(U2), b(V2), U2 = V2}.


%{a(A),b(B)},A=B :- ok

%{a(A), b(B).}, $p[A, B] :- uniq($p) | ok.
%{a(A), b(B), $p[A, B]} :- uniq($p) | ok.