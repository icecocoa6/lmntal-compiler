{

/* easy_monkeyとmoveルールが違う */


/* monkey 初期状態 */
//monkey(c, nothing, floor).

/* 環境 */

//position(goal, nothing, no_one). 
//position(a, box, no_one).
//position(b, stick, no_one).
/* 以下、monkeyの数によってpositionを増やす */
//position(c, nothing, monkey).
//position(d, nothing, no_one).

//object(b, wait, box).
//object(c, wait, stick).

//functor_1(nothing).

/* 

%受理状態
monkey(d, box, stick).

%各引数
monkey(POSITION, OBJECT, ON).
position(POSITION, OBJECT, MONKEY).
object(POSITION, OBJECT, STATE).

	POSITION : a, b, c, d
	OBJECT : box, stick
	ON : floor, box
	MONKEY : monkey, no_one
	STATE : wait, hold

*/


%floor上を移動可能
/*
move1@@
monkey(Mpos, Mobj, floor), position(Ppos1, Pobj1, monkey), position(Ppos2, Pobj2, no_one) :-
	Mpos=Ppos1, Mpos\=Ppos2 |
		monkey(Ppos2, Mobj, floor), position(Ppos1, Pobj1, no_one), position(Ppos2, Pobj2, monkey).
*/		 


/*
position{goal, nothing, no_one}.
position{a, object(box), no_one}.
position{b, object(stick), no_one}.
position{c, nothing, monkey(nothing, floor)}.
*/


position{goal}.
position{a, object(box)}.
position{b, object(stick)}.
position{c, monkey(nothing, floor)}.

functor_1(nothing).

move@@
position{monkey(Mobj, floor), $p}, position{$q} :- 
	\+($q=(monkey(X, Y), $pp)), unary(Mobj) |
		position{$p}, position{monkey(Mobj, floor), $q}. 

hold@@
position{monkey(nothing, floor), object(Oobj), $p} :- 
	unary(Oobj) |
		position{monkey(Oobj, floor), $p}. 

put@@
position{monkey(Mobj, floor), $p}, functor_1(Func) :- 
	\+($p=(object(X), $pp)), unary(Mobj), Mobj\=Func |
		position{monkey(nothing, floor), object(Mobj), $p}, functor_1(Func).

get_on@@ 
position{monkey(Mobj, floor), object(box), $p} :- 
	unary(Mobj) |
		position{monkey(Mobj, box), object(box), $p}. 


come_down@@
position{monkey(Mobj, box), $p} :- 
	unary(Mobj) |
		position{monkey(Mobj, floor), $p}. 



/*
monkey(Mpos, nothing, floor), position(Ppos, Pobj), 
object(Opos, wait, Oobj), functor_1(Func) :- 
	Mpos=Opos, Mpos=Ppos, Pobj=Oobj, Pobj\=Func | 
		monkey(Mpos, Oobj, floor), position(Ppos, Func), 
		object(Opos, hold, Oobj), functor_1(Func).
*/




/*
monkey(Mpos, Mobj, floor), position(Ppos1, Pobj1, monkey), position(Ppos2, Pobj2, no_one) :- 
	Mpos=Ppos1, Mpos\=Ppos2 | 
		monkey(Ppos2, Mobj, floor), position(Ppos1, Pobj1, no_one), position(Ppos2, Pobj2, monkey). 
*/		
/*
%objectをholdしている場合、monkeyの移動後にobjectも移動
move2@@
monkey(Mpos, Mobj, floor), object(Opos, hold, Oobj) :- 
	Mpos\=Opos, Mobj=Oobj | 
		monkey(Mpos, Mobj, floor), object(Mpos, hold, Oobj).

%何も持っていないとき、持つことが出来る
hold@@
monkey(Mpos, nothing, floor), position(Ppos, Pobj), 
object(Opos, wait, Oobj), functor_1(Func) :- 
	Mpos=Opos, Mpos=Ppos, Pobj=Oobj, Pobj\=Func | 
		monkey(Mpos, Oobj, floor), position(Ppos, Func), 
		object(Opos, hold, Oobj), functor_1(Func).

%objectをholdしているとき、現在のposiに何も無ければ置ける
put@@
monkey(Mpos, Mobj, floor), position(Ppos, nothing), object(Opos, hold, Oobj) :-
	Mpos=Ppos, Mpos=Opos, Mobj=Oobj |
		monkey(Mpos, nothing, floor), position(Ppos, Oobj), object(Opos, wait, Oobj).

%boxがあると、上に乗れる
geton@@
monkey(Mpos, Mobj, floor), position(Ppos, box), object(Opos, wait, box) :-
	Mpos=Ppos |
		monkey(Mpos, Mobj, box), position(Ppos, box), object(Opos, wait, box).

%boxの上にいると、floorに降りられる
comedown@@
monkey(Mpos, Mobj, box), position(Ppos, box), object(Opos, wait, box) :-
	Mpos=Ppos |
		monkey(Mpos, Mobj, floor), position(Ppos, box), object(Opos, wait, box).
*/
%バグ
/*
object(Opos1, wait, Oobj1), object(Opos2, wait, Oobj2) :-
	Opos1=Opos2 | 
		bug(Opos1, wait, Oobj1), bug(Opos2, wait, Oobj2).
*/
/*
position(A, B), position(C, D), monkey(X, Y, Z) :- B=D, A\=C, 
unary(X),unary(Y), unary(Z) | fail.
*/
/*
position(Ppos, Pobj), object(Opos, hold, Oobj) :- 
	Ppos=Opos, Pobj=Oobj | bug.
*/

%受理状態
//monkey(goal, stick, box) :- success.
position{goal, monkey(stick, box), object(box)} :- success.

}.

//{position{goal, monkey(stick, box), object(box)}, $p[]} :- success.