/**
 * 下記のような表記の四則演算を行う
 *
 * ・ソースは必ず"main{", "}"で囲まれなければならない
 * ・複数行指定可能
 * ・(一桁の数値のみ計算可能)複数桁計算可能　2008/7/17
 * ・数、演算子、";"の間にはスペースを空ける
 *
 * 例
 * -----------------------
 *
 * main{
 *
 *   5 + 4 * 3 / 2 - 1 ;
 *   9 + 8 ;
 *   7 * 6 * 0 ;
 *
 * }
 *
 * -----------------------
 *
 */

vm{

io.use.

i(0), j(1), k(0), program.

/* 指定したファイルから一行ずつ読み込む */
lines = io.list_of_file("C:\e_works\devel\sample\seiji\example.txt").
lines('.'(Value, Rest)), i(Current) :- int(Current) | 
		lines(Rest), line(string.split("\s+|\"", Value), Current+1), i(Current+1).
lines([]) :- .


/* 字句・構文・意味解析(各wordにはIndexを付ける) */

line([""], Index), j(Current) :- Index = Current | j(Current+1).
line([], Index), j(Current) :- Index = Current | j(Current+1).

line('.'(Value, Next), Index), j(Current), program(Source) :- Index = Current, Value = "" |
	line(Next, Index), j(Current), program(Source).

// main{ }
line('.'(Value, Next), Index), j(Current), program :- Index = Current, Value = "main{" |
	line(Next, Index), j(Current), program = "main{"(end, expression(number)), digit, md.	
line('.'("}", []), Index), end(Parent), j(Current) :- Index = Current |
	j(Current), end(Parent, "}").

// +, -, *, /, ;
// 最初の演算子
line('.'(Value, '.'(Next, Rest)), Index), j(Current), digit(Int), md
	:- Index = Current, Value = "*", int(Int) | line(Rest, Index), j(Current), digit(Int * string.int_of_str(Next)), md.
line('.'(Value, '.'(Next, Rest)), Index), j(Current), digit(Int), md
	:- Index = Current, Value = "/", int(Int) | line(Rest, Index), j(Current), digit(Int / string.int_of_str(Next)), md.

line('.'(Value, Next), Index), j(Current), number(Parent), digit(Int), md
	:- Index = Current, Value = "+", int(Int) | line(Next, Index), j(Current), number(Parent, L), digit, add(Int, rest, L).
line('.'(Value, Next), Index), j(Current), number(Parent), digit(Int), md
	:- Index = Current, Value = "-", int(Int) | line(Next, Index), j(Current), number(Parent, L), digit, sub(Int, rest, L).

// 二つ目以降の演算子
line('.'(Value, Next), Index), j(Current), digit(Int), add(I, rest, L)
	:- Index = Current, Value = "+", int(Int) | line(Next, Index), j(Current), digit, add(I + Int, rest, L). 
line('.'(Value, Next), Index), j(Current), digit(Int), sub(I, rest, L)
	:- Index = Current, Value = "+", int(Int) | line(Next, Index), j(Current), digit, add(I - Int, rest, L).

line('.'(Value, Next), Index), j(Current), digit(Int), add(I, rest, L)
	:- Index = Current, Value = "-", int(Int) | line(Next, Index), j(Current), digit, sub(I + Int, rest, L). 
line('.'(Value, Next), Index), j(Current), digit(Int), sub(I, rest, L)
	:- Index = Current, Value = "-", int(Int) | line(Next, Index), j(Current), digit, sub(I - Int, rest, L).

line('.'(Value, '.'(Next, Rest)), Index), j(Current), digit(Int), add(I, rest, L)
	:- Index = Current, Value = "*", int(Int) | line(Rest, Index), j(Current), digit(Int * string.int_of_str(Next)), add(I, rest, L). 
line('.'(Value, '.'(Next, Rest)), Index), j(Current), digit(Int), sub(I, rest, L)
	:- Index = Current, Value = "*", int(Int) | line(Rest, Index), j(Current), digit(Int * string.int_of_str(Next)), sub(I, rest, L).

line('.'(Value, '.'(Next, Rest)), Index), j(Current), digit(Int), add(I, rest, L)
	:- Index = Current, Value = "/", int(Int) | line(Rest, Index), j(Current), digit(Int / string.int_of_str(Next)), add(I, rest, L). 
line('.'(Value, '.'(Next, Rest)), Index), j(Current), digit(Int), sub(I, rest, L)
	:- Index = Current, Value = "/", int(Int) | line(Rest, Index), j(Current), digit(Int / string.int_of_str(Next)), sub(I, rest, L).

// 0, ..., 9
line('.'(Value, Next), Index), j(Current), digit :- Index = Current | line(Next, Index), j(Current) , digit(string.int_of_str(Value)).

/*
line('.'(Value, Next), Index), j(Current), digit :- Index = Current, Value = "0" | line(Next, Index), j(Current) , digit(0).
line('.'(Value, Next), Index), j(Current), digit :- Index = Current, Value = "1" | line(Next, Index), j(Current) , digit(1).
line('.'(Value, Next), Index), j(Current), digit :- Index = Current, Value = "2" | line(Next, Index), j(Current) , digit(2).
line('.'(Value, Next), Index), j(Current), digit :- Index = Current, Value = "3" | line(Next, Index), j(Current) , digit(3).
line('.'(Value, Next), Index), j(Current), digit :- Index = Current, Value = "4" | line(Next, Index), j(Current) , digit(4).
line('.'(Value, Next), Index), j(Current), digit :- Index = Current, Value = "5" | line(Next, Index), j(Current) , digit(5).
line('.'(Value, Next), Index), j(Current), digit :- Index = Current, Value = "6" | line(Next, Index), j(Current) , digit(6).
line('.'(Value, Next), Index), j(Current), digit :- Index = Current, Value = "7" | line(Next, Index), j(Current) , digit(7).
line('.'(Value, Next), Index), j(Current), digit :- Index = Current, Value = "8" | line(Next, Index), j(Current) , digit(8).
line('.'(Value, Next), Index), j(Current), digit :- Index = Current, Value = "9" | line(Next, Index), j(Current) , digit(9).
*/

//Exception (挫折)
/*
line('.'(Value, Next), Index), j(Current)
	:- Index = Current, Value\="main{",Value\="}",Value\="+",Value\="-",Value\="*",Value\="/",Value\="",
	   Value\="0",Value\="1",Value\="2",Value\="3",Value\="4",Value\="5",Value\="6",Value\="7",Value\="8",Value\="9" |
			line(Next, Index), j(Current), io.print("Error!, res").
*/

/* 計算 */
// ; (計算実行)
line('.'(Value, Next), Index), j(Current), digit(Int), number(Parent, L), add(I, rest, L) 
	:- Index = Current, Value = ";", int(Int) | line(Next, Index), j(Current), digit, effort(I + Int, Current), number(Parent), md.
line('.'(Value, Next), Index), j(Current), digit(Int), number(Parent, L), sub(I, rest, L)
	:- Index = Current, Value = ";", int(Int) | line(Next, Index), j(Current), digit, effort(I - Int, Current), number(Parent), md.
line('.'(Value, Next), Index), j(Current), digit(Int), number(Parent) 
	:- Index = Current, Value = ";", int(Int) | line(Next, Index), j(Current), digit, effort(Int, Current), number(Parent), md.
line('.'(Value, Next), Index), j(Current), digit(Int), number(Parent)
	:- Index = Current, Value = ";", int(Int) | line(Next, Index), j(Current), digit, effort(Int, Current), number(Parent), md.

// 出力
end(Parent, "}"), effort(Effort, Index), k(Current) :- Index = Current, int(Effort) |
	end(Parent, "}"), io.print(Effort, res), io.print("\n", res), k(Current+1).
end(Parent, "}"), effort(Effort, Index), j(Max), k(Current),  :- Index \= Current, Max >= Current, int(Effort) |
	end(Parent, "}"), effort(Effort, Index), j(Max), k(Current+1).

// atomの整理
end(Parent, "}"), done(res) :- end(Parent, "}").
end(Parent, "}"), md :- end(Parent, "}").

}