ret=sort([6,5,4,3,2,1]).
//ret=sort([5,4,3,2,1]).
//ret=sort([4,3,2,1]).
//ret=sort([3,2,1]).
//ret=sort([5,3,6,1,2,4]).
//ret=sort([4,2,1,5,3]).
//ret=sort([3,1,4,2]).
//ret=sort([2,3,1]).
//ret=sort([1,2,3,4,5,6]).
//ret=sort([1,2,3,4,5]).
//ret=sort([1,2,3,4]).
//ret=sort([1,2,3]).


ret=sort(L),quicksort{ @p }  :- ground(L) | quicksort{ ret=sort(L),@p }.
ret=sort(L),mergesort{ @p }  :- ground(L) | mergesort{ ret=sort(L),@p }.
ret=sort(L),bubblesort{ @p } :- ground(L) | bubblesort{ ret=sort(L),@p }.


quicksort{

 R=sort(L) :- R=quicksort(L,[]).
 R=quicksort([D|L],Done) :- int(D) | devide(L,D,L1,L2), R=quicksort(L1,[D|quicksort(L2,Done)]).
 R=quicksort([],Done)    :- R=Done.
 
 devide([D|L],B,L1,L2) :- D <  B | devide(L,B,LL1,L2), L1=[D|LL1].
 devide([D|L],B,L1,L2) :- D >= B | devide(L,B,L1,LL2), L2=[D|LL2].
 devide([],   B,L1,L2) :- int(B) | L1=[], L2=[].
}.
quicksort{ ret($p),@p }/ :- ret($p), quicksort{ @p }.

mergesort{

 R=sort(L) :- R=f(mergesort(gen(L))).
 
 R=gen([D|L]) :- int(D) | R=[[D]|gen(L)].
 R=gen([]) :- R=[].
 
 R=mergesort([L1,L2|Rest]) :- R=mergesort([merge(L1,L2)|mergesort(Rest)]).
 R=mergesort([L]) :- R=[L].
 R=mergesort([])  :- R=[].
 
 R=merge([D1|L1],[D2|L2]) :- D1 <  D2 | R=[D1|merge(L1,[D2|L2])].
 R=merge([D1|L1],[D2|L2]) :- D1 >= D2 | R=[D2|merge([D1|L1],L2)].
 R=merge(L,[]) :- R=L.
 R=merge([],L) :- R=L.
 
 R=f([D]) :- R=D.
}.
mergesort{ ret($p),@p }/ :- ret($p), mergesort{ @p }.

%bubblesort
bubblesort{
 ret=sort(L) :- ret=L.
 A=[X,Y|B] :- X>Y | A=[Y,X|B].
}.
bubblesort{ ret($p),@p }/ :- ret($p), bubblesort{ @p }.
