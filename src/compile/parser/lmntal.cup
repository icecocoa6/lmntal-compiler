/* ----------------------Preliminary Declarations Section--------------------*/
/* Import the class java_cup.runtime.*  */
package compile.parser;

import java.util.LinkedList;

/* ------------Declaration of Terminals and Non Terminals Section----------- */
terminal		COMMA, LPAREN, RPAREN, LBRACE, RBRACE,
				RULE, COLON, PERIOD, GUARD, PROCVAR, RULEVAR, 
				LBRACKET, RBRACKET, NEGATIVE,
				ASTERISK, SLASH, PLUS, MINUS;
terminal		QUOTED_STRING;
terminal String RELOP, STRING;
terminal String LINK_NAME, NUMBER_NAME, SYMBOL_NAME, ATOM_NAME, PATHED_ATOM_NAME;

non terminal SrcLink			Link;
non terminal SrcName			FuncName;
non terminal String				AtomName;
non terminal Object				UnitAtom;
non terminal Object				Atom400;
non terminal Object				Atom500;
non terminal Object				Atom;
non terminal SrcMembrane		Membrane;
non terminal SrcRule			Rule;
non terminal SrcProcessContext	ProcessContext;
non terminal SrcRuleContext		RuleContext;
non terminal SrcContext			Context;
non terminal Object				Process;
non terminal LinkedList			ProcessList;
non terminal Object				List;
non terminal Object				ListCdr;

start with ProcessList;

/* -------------Precedence and Associatively of Terminals Section----------- */

Link		::=   LINK_NAME:name
					{: RESULT = new SrcLink(name); :};

FuncName	::=   ATOM_NAME:name
					{: RESULT = new SrcName(name); :}
				| QUOTED_STRING:name
					{: RESULT = new SrcName(name.toString(), SrcName.QUOTED); :}
				| SYMBOL_NAME:name
					{: RESULT = new SrcName(name.replaceAll("^'|'$","").replaceAll("''","'"),
											SrcName.SYMBOL); :}
				| STRING:name
					{: RESULT = new SrcName(name.replaceAll("^\"|\"$","").replaceAll("\\n","\n")
											.replaceAll("\\\\","\\"),
											SrcName.STRING); :}
				| PATHED_ATOM_NAME:name
					{: RESULT = new SrcName(name, SrcName.PATHED); :};

AtomName    ::= ATOM_NAME:name
					{: RESULT = name.toString(); :};

UnitAtom	::=	  NUMBER_NAME:name
					{: RESULT = new SrcAtom(new SrcName(name), nameleft, nameright); :}
				| FuncName:name
					{: RESULT = new SrcAtom(name, nameleft, nameright); :}
				| FuncName:name LPAREN RPAREN
					{: RESULT = new SrcAtom(name, nameleft, nameright); :}
				| FuncName:name LPAREN ProcessList:list RPAREN
					{: RESULT = new SrcAtom(name, list, nameleft, nameright); :}
				| List:list
					{: RESULT = list; :}
				| LPAREN Atom:atom RPAREN
					{: RESULT = atom; :}
				| Link:link
					{: RESULT = link; :}
				;

Atom400		::=   UnitAtom:atom
					{: RESULT = atom; :}
				| Atom400:atom1 ASTERISK UnitAtom:atom2
					{: LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("*", list); :}
				| Atom400:atom1 SLASH UnitAtom:atom2
					{: LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("/", list); :};

Atom500		::=   Atom400:atom
					{: RESULT = atom; :}
				| Atom500:atom1 MINUS Atom400:atom2
					{: LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("-", list); :}
				| Atom500:atom1 PLUS Atom400:atom2
					{: LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("+", list); :};

Atom		::=   Atom500:atom
					{: RESULT = atom; :}
				| Atom500:atom1 RELOP:op Atom500:atom2
					{: LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom(op, list); :};

List        ::=   LBRACKET RBRACKET
					{: RESULT = new SrcAtom("[]"); :}
                | LBRACKET Atom:atom ListCdr:cdr RBRACKET
                    {: LinkedList list = new LinkedList();
                       list.add(atom); list.add(cdr);
                       RESULT = new SrcAtom(".", list); :};

ListCdr     ::=   GUARD Atom:atom
                    {: RESULT = atom;  :}
               | COMMA Atom:atom ListCdr:cdr
                    {: LinkedList list = new LinkedList();
                       list.add(atom); list.add(cdr);
                       RESULT = new SrcAtom(".", list); :}
                |  
                    {: RESULT = new SrcAtom("[]"); :};


Membrane	::=	  AtomName:name COLON LBRACE RBRACE
					{: RESULT = new SrcMembrane(name); :}
				| LBRACE RBRACE
					{: RESULT = new SrcMembrane(); :}
				| AtomName:name COLON LBRACE ProcessList:list RBRACE
					{: RESULT = new SrcMembrane(name, list); :}
				| LBRACE ProcessList:list RBRACE
					{: RESULT = new SrcMembrane(list); :};

Rule		::=	  LPAREN ProcessList:head RULE ProcessList:body RPAREN
					{: RESULT = new SrcRule(head, body); :}
			    | LPAREN ProcessList:head RULE ProcessList:guard GUARD ProcessList:body RPAREN
					{: RESULT = new SrcRule(head, guard, body); :};

ProcessContext	::= PROCVAR AtomName:name
						{: RESULT = new SrcProcessContext(name); :};

RuleContext	::=   RULEVAR AtomName:name
					{: RESULT = new SrcRuleContext(name); :};

Context		::=   ProcessContext:p
					{: RESULT = p; :}
				| RuleContext:r
					{: RESULT = r; :};

Process		::=   Atom:p
					{:  RESULT = p; :}
				| Membrane:p
					{:  RESULT = p; :}
				| Rule:p
					{:  RESULT = p; :}
				| Context:p
					{:  RESULT = p; :};

ProcessList ::= Process:p
					{: LinkedList list = new LinkedList(); list.add(p); RESULT = list; :}
				| ProcessList:list COMMA Process:p
					{: list.add(p); RESULT = list; :} ;

/*
TypedProcessContext ::= PROCVAR AtomName:name LBRACKET LINK_NAME:link RBRACKET
							{: RESULT = new SrcTypedProcessContext(name, link); :};
LinkUnify	::=   Link:left UNIFY Link:right
					{: RESULT = new SrcLinkUnify(left, right); :};

CompareAtom ::=   Process:left LT Process:right
                    {: RESULT = new SrcCompareAtom(SrcCompareAtom.LT, left, right); :}
                | Process:left LE Process:right
                    {: RESULT = new SrcCompareAtom(SrcCompareAtom.LE, left, right); :}
                | Process:left GT Process:right
                    {: RESULT = new SrcCompareAtom(SrcCompareAtom.GT, left, right); :}
                | Process:left GE Process:right
                    {: RESULT = new SrcCompareAtom(SrcCompareAtom.GE, left, right); :}
                | Process:left EQ Process:right
                    {: RESULT = new SrcCompareAtom(SrcCompareAtom.EQ, left, right); :}
                | Process:left NE Process:right
                    {: RESULT = new SrcCompareAtom(SrcCompareAtom.NE, left, right); :};

GuardProcess ::=  Process:p
					{:  RESULT = p; :}
			    | CompareAtom:p
			        {:  RESULT = p; :};

GuardProcessList ::=   GuardProcess:p
					{: LinkedList list = new LinkedList(); list.add(p); RESULT = list; :}
				| GuardProcessList:list COMMA GuardProcess:p
					{: list.add(p); RESULT = list; :};


non terminal Object				GuardProcess;
non terminal LinkedList         GuardProcessList;
non terminal SrcLinkUnify		LinkUnify;
non terminal SrcCompareAtom     CompareAtom;
*/