/* ----------------------Preliminary Declarations Section--------------------*/
/* Import the class java_cup.runtime.*  */
package compile.parser;

import java.util.LinkedList;

/* ------------Declaration of Terminals and Non Terminals Section----------- */
terminal		COMMA, LPAREN, RPAREN, LBRACE, RBRACE,
				RULE, COLON, PERIOD, GUARD, PROCVAR, RULEVAR, 
				LBRACKET, RBRACKET, NEGATIVE, MOD, HAT, TILDE, ASTERISK_ASTERISK,
				ASTERISK_DOT, SLASH_DOT, PLUS_DOT, MINUS_DOT,
				ASTERISK, SLASH, PLUS, MINUS;
terminal		QUOTED_STRING;
terminal String RELOP, STRING;
terminal String LINK_NAME, NUMBER_NAME, SYMBOL_NAME, ATOM_NAME, PATHED_ATOM_NAME;
terminal String CHAR_CODE_LITERAL;

non terminal SrcLink			Link;
non terminal SrcName			FuncName;
non terminal String				AtomName;
non terminal Object				QuotedOperatorAtom;
non terminal Object				UnitAtom;
non terminal Object				UnaryOpAtom;
non terminal Object				Atom90;
non terminal Object				Atom200;
non terminal Object				Atom300;
non terminal Object				Atom400;
non terminal Object				Atom500;
non terminal Object				Atom700;
non terminal Object				Atom800;
non terminal Object				Atom;
non terminal SrcMembrane		Membrane;
non terminal SrcRule			Rule;
non terminal SrcProcessContext	ProcessContext;
non terminal SrcRuleContext		RuleContext;
non terminal SrcContext			Context;
non terminal Object				Process;
non terminal LinkedList			ProcessList;
non terminal LinkedList			NonemptyProcessList;
non terminal LinkedList			WorldProcessList;
non terminal LinkedList			NonemptyWorldProcessList;
non terminal Object				List;
non terminal Object				ListCdr;
non terminal LinkedList			BundleList;
non terminal LinkedList			LinkList;
non terminal LinkedList			NonemptyLinkList;
non terminal SrcLinkBundle		Bundle;
non terminal SrcAtom			Aggregate;

start with WorldProcessList;

/* -------------Precedence and Associatively of Terminals Section----------- */

Link		::=   LINK_NAME:name
					{: RESULT = new SrcLink(name); :};

// 引数なしまたは引数ありのアトムの名前として使用できるリテラル
FuncName	::=   ATOM_NAME:name
					{: RESULT = new SrcName(name); :}
				| QUOTED_STRING:name
					{: RESULT = new SrcName(name.toString(), SrcName.QUOTED); :}
				| SYMBOL_NAME:name
					{: RESULT = new SrcName(name.replaceAll("^'|'$","").replaceAll("''","'"),
											SrcName.SYMBOL); :}
				| STRING:name
					{: RESULT = new SrcName(name.replaceAll("^\"|\"$","")
												.replaceAll("\\\\\r?\n","")
												.replaceAll("\\\\n","\n")
												.replaceAll("\\\\r","\r")
												.replaceAll("\\\\t","\t")
												.replaceAll("\\\\f","\f")
												.replaceAll("\\\\\"","\"")
												.replaceAll("\\\\\\\\","\\\\"),
											SrcName.STRING); :}
				| PATHED_ATOM_NAME:name
					{: RESULT = new SrcName(name.replace(':','.'), SrcName.PATHED); :};

// [a-z0-9][A-Za-z0-9_]*
AtomName    ::= ATOM_NAME:name
					{: RESULT = name.toString(); :};

// 演算子が付いていない項
UnitAtom	::=	  NUMBER_NAME:name
					{: RESULT = new SrcAtom(new SrcName(name), nameleft, nameright); :}
				| CHAR_CODE_LITERAL:name
					{: RESULT = new SrcAtom(new SrcName(""+(int)name.charAt(2)), nameleft, nameright); :}
				| FuncName:name
					{: RESULT = new SrcAtom(name, nameleft, nameright); :}
				| FuncName:name LPAREN ProcessList:list RPAREN
					{: RESULT = new SrcAtom(name, list, nameleft, nameright); :}
				| List:list
					{: RESULT = list; :}
				| LPAREN Rule:rule RPAREN
					{: RESULT = rule; :}
				| LPAREN QuotedOperatorAtom:atom RPAREN
					{: RESULT = atom; :}
				| Context:p
					{: RESULT = p; :}
				| LPAREN Atom:atom RPAREN
					{: RESULT = atom; :}
				| Link:link
					{: RESULT = link; :}
				;

UnaryOpAtom	::=	  UnitAtom:atom
					{: RESULT = atom; :}
				| PLUS UnitAtom:atom
					{: LinkedList list = new LinkedList();
					   list.add(atom);
					   RESULT = new SrcAtom("+", list); :}
				| MINUS UnitAtom:atom
					{: LinkedList list = new LinkedList();
					   list.add(atom);
					   RESULT = new SrcAtom("-", list); :}
				;

Atom200		::=   UnaryOpAtom:atom
					{: RESULT = atom; :}
				| Atom200:atom1 HAT UnaryOpAtom:atom2
					{: LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("^", list); :};

Atom300		::=   Atom200:atom
					{: RESULT = atom; :}
				| Atom200:atom1 MOD Atom200:atom2
					{: LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("mod", list); :}
				| Atom300:atom1 ASTERISK_ASTERISK Atom200:atom2
					{: LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("**", list); :};

Atom400		::=   Atom300:atom
					{: RESULT = atom; :}
				| Atom400:atom1 ASTERISK_DOT Atom300:atom2
					{: LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("*.", list); :}
				| Atom400:atom1 SLASH_DOT Atom300:atom2
					{: LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("/.", list); :}
				| Atom400:atom1 ASTERISK Atom300:atom2
					{: LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("*", list); :}
				| Atom400:atom1 SLASH Atom300:atom2
					{: LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("/", list); :};

Atom500		::=   Atom400:atom
					{: RESULT = atom; :}
				| Atom500:atom1 MINUS_DOT Atom400:atom2
					{: LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("-.", list); :}
				| Atom500:atom1 PLUS_DOT Atom400:atom2
					{: LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("+.", list); :}
				| Atom500:atom1 MINUS Atom400:atom2
					{: LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("-", list); :}
				| Atom500:atom1 PLUS Atom400:atom2
					{: LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("+", list); :};

Atom700		::=   Atom500:atom
					{: RESULT = atom; :}
				| Atom500:atom1 RELOP:op Atom500:atom2
					{: LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom(op, list); :};

Atom800		::=   Atom700:atom
					{: RESULT = atom; :}
				| AtomName:name COLON Atom800:atom
					{: LinkedList list = new LinkedList();
					   list.add(new SrcAtom(new SrcName(name))); list.add(atom);
					   RESULT = new SrcAtom(":", list); :};

Atom		::=   Atom800:atom
					{: RESULT = atom; :};

// ( ) で囲って演算子がついていない単独の項にできる演算子
QuotedOperatorAtom ::=
				  PLUS			{: RESULT = new SrcAtom("+");	:}
				| MINUS			{: RESULT = new SrcAtom("-");	:}
				| ASTERISK		{: RESULT = new SrcAtom("*");	:}
				| SLASH			{: RESULT = new SrcAtom("/");	:}
				| PLUS_DOT		{: RESULT = new SrcAtom("+.");	:}
				| MINUS_DOT		{: RESULT = new SrcAtom("-.");	:}
				| ASTERISK_DOT	{: RESULT = new SrcAtom("*.");	:}
				| SLASH_DOT		{: RESULT = new SrcAtom("/.");	:}
				| MOD			{: RESULT = new SrcAtom("mod");	:}
				| RELOP:op		{: RESULT = new SrcAtom(op);	:}
				| HAT			{: RESULT = new SrcAtom("^");	:}
				| TILDE			{: RESULT = new SrcAtom("~");	:}
				| COLON			{: RESULT = new SrcAtom(":");	:}
				| ASTERISK_ASTERISK	{: RESULT = new SrcAtom("**");	:}
				;

List        ::=   LBRACKET RBRACKET
					{: RESULT = new SrcAtom("[]"); :}
                | LBRACKET Atom:atom ListCdr:cdr RBRACKET
                    {: LinkedList list = new LinkedList();
                       list.add(atom); list.add(cdr);
                       RESULT = new SrcAtom(".", list); :};

ListCdr     ::=   GUARD Atom:atom
                    {: RESULT = atom;  :}
               | COMMA Atom:atom ListCdr:cdr
                    {: LinkedList list = new LinkedList();
                       list.add(atom); list.add(cdr);
                       RESULT = new SrcAtom(".", list); :}
                |  
                    {: RESULT = new SrcAtom("[]"); :};


Membrane	::=	  AtomName:name COLON LBRACE WorldProcessList:list RBRACE SLASH
					{: SrcMembrane sMem = new SrcMembrane(name, list);
					   sMem.stable = true;
					   RESULT = sMem; :}
				| AtomName:name COLON LBRACE WorldProcessList:list RBRACE
					{: RESULT = new SrcMembrane(name, list); :}
				| LBRACE WorldProcessList:list RBRACE SLASH
					{: SrcMembrane sMem = new SrcMembrane(list);
					   sMem.stable = true;
					   RESULT = sMem; :}
				| LBRACE WorldProcessList:list RBRACE
					{: RESULT = new SrcMembrane(list); :};
					

Rule		::=	  ProcessList:head RULE ProcessList:body 
					{: RESULT = new SrcRule(head, body); :}
			    | ProcessList:head RULE ProcessList:guard GUARD ProcessList:body 
					{: RESULT = new SrcRule(head, guard, body); :};

ProcessContext	::= PROCVAR AtomName:name
					 {: RESULT = new SrcProcessContext(name); :}
				  | PROCVAR AtomName:name LBRACKET LinkList:list RBRACKET
					 {: SrcProcessContext pc = new SrcProcessContext(name);
						pc.args = list;
						RESULT = pc; :}
				  | PROCVAR AtomName:name LBRACKET LinkList:list GUARD Bundle:bundle  RBRACKET
					 {: SrcProcessContext pc = new SrcProcessContext(name);
						pc.args = list;
						pc.bundle = bundle;
						RESULT = pc; :};

RuleContext	::=   RULEVAR AtomName:name
					{: RESULT = new SrcRuleContext(name); :};

Context		::=   ProcessContext:p
					{: RESULT = p; :}
				| RuleContext:r
					{: RESULT = r; :};

Bundle		::= ASTERISK LINK_NAME:name
					{: RESULT = new SrcLinkBundle(name); :};

BundleList	::=   Bundle:bundle
					{: LinkedList list = new LinkedList(); list.add(bundle); RESULT = list; :}
				| BundleList:list COMMA Bundle:bundle
					{: list.add(bundle); RESULT = list; :};
				
Aggregate	::= FuncName:name LPAREN BundleList:list RPAREN
					{: RESULT = new SrcAtom(name, list, nameleft, nameright); :};

LinkList	::=   /* epsilon */
					{: RESULT = new LinkedList(); :}
				| NonemptyLinkList:list
					{: RESULT = list; :};
NonemptyLinkList ::=  Link:link
					{: LinkedList list = new LinkedList(); list.add(link); RESULT = list; :}
				| NonemptyLinkList:list COMMA Link:link
					{: list.add(link); RESULT = list; :};
				
Process		::=   Atom:p
					{:  RESULT = p; :}
				| Aggregate:p
					{:  RESULT = p; :}
				| Membrane:p
					{:  RESULT = p; :};
//				| Rule:p
//					{:  RESULT = p; :}
//				| Context:p
//					{:  RESULT = p; :};

ProcessList ::= /* epsilon */
					{: RESULT = new LinkedList(); :}
				| NonemptyProcessList:list
					{: RESULT = list; :}
				| NonemptyProcessList:list COMMA
					{: RESULT = list; :};
NonemptyProcessList ::=
				  Process:p
					{: LinkedList list = new LinkedList(); list.add(p); RESULT = list; :}
				| NonemptyProcessList:list Membrane:p
					{: list.add(p); RESULT = list; :}
				| NonemptyProcessList:list COMMA Process:p
					{: list.add(p); RESULT = list; :};

WorldProcessList ::= /* epsilon */
					{: RESULT = new LinkedList(); :}
				| NonemptyWorldProcessList:list
					{: RESULT = list; :}
				| NonemptyWorldProcessList:list PERIOD
					{: RESULT = list; :};
NonemptyWorldProcessList ::=
				  NonemptyProcessList:p
					{: RESULT = p; :}
//				| NonemptyProcessList:p COMMA
//					{: RESULT = p; :}
				| Rule:p
					{: LinkedList list = new LinkedList(); list.add(p); RESULT = list; :}
				| NonemptyWorldProcessList:list PERIOD Rule:p
					{: list.add(p); RESULT = list; :}
				| NonemptyWorldProcessList:list PERIOD NonemptyProcessList:p
					{: list.addAll(p); RESULT = list; :}
//				| NonemptyWorldProcessList:list PERIOD NonemptyProcessList:p COMMA
//					{: list.addAll(p); RESULT = list; :}
				;
