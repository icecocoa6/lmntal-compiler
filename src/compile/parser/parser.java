
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Dec 22 05:09:04 JST 2003
//----------------------------------------------------

package compile.parser;

import java.util.LinkedList;

/** CUP v0.10k generated parser.
  * @version Mon Dec 22 05:09:04 JST 2003
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\003\003\000\002\004" +
    "\003\000\002\004\003\000\002\005\003\000\002\005\005" +
    "\000\002\005\006\000\002\005\003\000\002\005\005\000" +
    "\002\006\003\000\002\006\005\000\002\006\005\000\002" +
    "\007\003\000\002\007\005\000\002\007\005\000\002\010" +
    "\003\000\002\010\005\000\002\024\004\000\002\024\006" +
    "\000\002\025\004\000\002\025\005\000\002\025\002\000" +
    "\002\011\004\000\002\011\005\000\002\012\007\000\002" +
    "\012\011\000\002\013\004\000\002\015\004\000\002\016" +
    "\003\000\002\016\003\000\002\022\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\021\003\000\002\021\003" +
    "\000\002\020\003\000\002\020\005\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\022\006\017\010\020\016\031\017\007\020" +
    "\016\035\032\036\034\037\021\001\002\000\034\002\uffd7" +
    "\005\uffd7\007\uffd7\011\uffd7\012\uffd7\014\uffd7\015\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\001\002" +
    "\000\052\002\ufffd\005\ufffd\006\123\007\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\021\ufffd\023\ufffd\024\ufffd" +
    "\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033" +
    "\ufffd\034\ufffd\001\002\000\050\002\ufffa\005\ufffa\007\ufffa" +
    "\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\021\ufffa\023" +
    "\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\033\ufffa\034\ufffa\001\002\000\006\035\032\037" +
    "\021\001\002\000\034\002\uffd6\005\uffd6\007\uffd6\011\uffd6" +
    "\012\uffd6\014\uffd6\015\uffd6\023\106\024\111\025\110\026" +
    "\112\027\107\030\113\001\002\000\034\002\uffdb\005\uffdb" +
    "\007\uffdb\011\uffdb\012\uffdb\014\uffdb\015\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\001\002\000\010" +
    "\002\105\005\060\014\061\001\002\000\034\002\uffe5\005" +
    "\uffe5\007\uffe5\011\uffe5\012\uffe5\014\uffe5\015\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\001\002\000" +
    "\034\002\uffdc\005\uffdc\007\uffdc\011\uffdc\012\uffdc\014\uffdc" +
    "\015\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\001\002\000\050\002\ufff5\005\ufff5\007\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\014\ufff5\015\ufff5\021\ufff5\023\ufff5\024" +
    "\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\046\032\045" +
    "\033\ufff5\034\ufff5\001\002\000\014\006\042\020\016\021" +
    "\074\035\032\037\021\001\002\000\022\006\017\010\020" +
    "\016\031\017\007\020\016\035\032\036\034\037\021\001" +
    "\002\000\024\006\017\010\020\011\055\016\031\017\007" +
    "\020\016\035\032\036\034\037\021\001\002\000\052\002" +
    "\ufffe\005\ufffe\006\ufffe\007\ufffe\011\ufffe\012\ufffe\013\ufffe" +
    "\014\ufffe\015\ufffe\021\ufffe\023\ufffe\024\ufffe\025\ufffe\026" +
    "\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe" +
    "\001\002\000\034\002\uffda\005\uffda\007\uffda\011\uffda\012" +
    "\uffda\014\uffda\015\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\001\002\000\036\002\uffd8\005\uffd8\007" +
    "\uffd8\011\uffd8\012\uffd8\013\053\014\uffd8\015\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\001\002\000" +
    "\050\002\ufff8\005\ufff8\007\ufff8\011\ufff8\012\ufff8\013\ufff8" +
    "\014\ufff8\015\ufff8\021\ufff8\023\ufff8\024\ufff8\025\ufff8\026" +
    "\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8" +
    "\001\002\000\034\002\uffd9\005\uffd9\007\uffd9\011\uffd9\012" +
    "\uffd9\014\uffd9\015\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\001\002\000\020\002\uffd4\005\uffd4\007" +
    "\uffd4\011\uffd4\012\uffd4\014\uffd4\015\uffd4\001\002\000\020" +
    "\002\uffd5\005\uffd5\007\uffd5\011\uffd5\012\uffd5\014\uffd5\015" +
    "\uffd5\001\002\000\044\002\ufff2\005\ufff2\007\ufff2\011\ufff2" +
    "\012\ufff2\013\036\014\ufff2\015\ufff2\021\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\033\037\034\040" +
    "\001\002\000\006\035\032\037\021\001\002\000\052\002" +
    "\uffff\005\uffff\006\uffff\007\uffff\011\uffff\012\uffff\013\uffff" +
    "\014\uffff\015\uffff\021\uffff\023\uffff\024\uffff\025\uffff\026" +
    "\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\034\uffff" +
    "\001\002\000\034\002\uffe4\005\uffe4\007\uffe4\011\uffe4\012" +
    "\uffe4\014\uffe4\015\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\001\002\000\036\002\000\005\000\007" +
    "\000\011\000\012\000\013\000\014\000\015\000\023\000" +
    "\024\000\025\000\026\000\027\000\030\000\001\002\000" +
    "\034\002\uffe7\005\uffe7\007\uffe7\011\uffe7\012\uffe7\014\uffe7" +
    "\015\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\001\002\000\012\006\042\020\016\035\032\037\021" +
    "\001\002\000\012\006\042\020\016\035\032\037\021\001" +
    "\002\000\012\006\042\020\016\035\032\037\021\001\002" +
    "\000\050\002\ufff4\005\ufff4\007\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\014\ufff4\015\ufff4\021\ufff4\023\ufff4\024\ufff4\025\ufff4" +
    "\026\ufff4\027\ufff4\030\ufff4\031\046\032\045\033\ufff4\034" +
    "\ufff4\001\002\000\012\006\042\020\016\035\032\037\021" +
    "\001\002\000\004\007\044\001\002\000\050\002\ufff9\005" +
    "\ufff9\007\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\021\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030" +
    "\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\001\002\000\012" +
    "\006\042\020\016\035\032\037\021\001\002\000\012\006" +
    "\042\020\016\035\032\037\021\001\002\000\050\002\ufff7" +
    "\005\ufff7\007\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015" +
    "\ufff7\021\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7" +
    "\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\001\002\000" +
    "\050\002\ufff6\005\ufff6\007\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\014\ufff6\015\ufff6\021\ufff6\023\ufff6\024\ufff6\025\ufff6\026" +
    "\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6" +
    "\001\002\000\050\002\ufff3\005\ufff3\007\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\021\ufff3\023\ufff3\024\ufff3" +
    "\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\046\032\045\033" +
    "\ufff3\034\ufff3\001\002\000\042\002\ufff1\005\ufff1\007\ufff1" +
    "\011\ufff1\012\ufff1\014\ufff1\015\ufff1\021\ufff1\023\ufff1\024" +
    "\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\033\037\034\040" +
    "\001\002\000\004\036\034\001\002\000\034\002\uffe3\005" +
    "\uffe3\007\uffe3\011\uffe3\012\uffe3\014\uffe3\015\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\001\002\000" +
    "\034\002\uffeb\005\uffeb\007\uffeb\011\uffeb\012\uffeb\014\uffeb" +
    "\015\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\001\002\000\010\005\060\011\057\014\061\001\002" +
    "\000\034\002\uffea\005\uffea\007\uffea\011\uffea\012\uffea\014" +
    "\uffea\015\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea" +
    "\030\uffea\001\002\000\022\006\017\010\020\016\031\017" +
    "\007\020\016\035\032\036\034\037\021\001\002\000\022" +
    "\006\017\010\020\016\031\017\007\020\016\035\032\036" +
    "\034\037\021\001\002\000\020\002\uffd2\005\uffd2\007\uffd2" +
    "\011\uffd2\012\uffd2\014\uffd2\015\uffd2\001\002\000\020\002" +
    "\uffd3\005\uffd3\007\uffd3\011\uffd3\012\uffd3\014\uffd3\015\uffd3" +
    "\001\002\000\010\005\060\012\066\014\061\001\002\000" +
    "\026\005\uffdc\007\044\012\uffdc\014\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\001\002\000\022\006" +
    "\017\010\020\016\031\017\007\020\016\035\032\036\034" +
    "\037\021\001\002\000\012\005\060\007\070\014\061\015" +
    "\071\001\002\000\034\002\uffe9\005\uffe9\007\uffe9\011\uffe9" +
    "\012\uffe9\014\uffe9\015\uffe9\023\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\001\002\000\022\006\017\010\020" +
    "\016\031\017\007\020\016\035\032\036\034\037\021\001" +
    "\002\000\010\005\060\007\073\014\061\001\002\000\034" +
    "\002\uffe8\005\uffe8\007\uffe8\011\uffe8\012\uffe8\014\uffe8\015" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\001\002\000\050\002\ufff0\005\ufff0\007\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\021\ufff0\023\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\034\ufff0\001\002\000\010\005\076\015\100\021\uffec" +
    "\001\002\000\012\006\042\020\016\035\032\037\021\001" +
    "\002\000\004\021\102\001\002\000\012\006\042\020\016" +
    "\035\032\037\021\001\002\000\004\021\uffee\001\002\000" +
    "\050\002\uffef\005\uffef\007\uffef\011\uffef\012\uffef\013\uffef" +
    "\014\uffef\015\uffef\021\uffef\023\uffef\024\uffef\025\uffef\026" +
    "\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef" +
    "\001\002\000\010\005\076\015\100\021\uffec\001\002\000" +
    "\004\021\uffed\001\002\000\004\002\001\001\002\000\022" +
    "\006\017\010\020\016\031\017\007\020\016\035\032\036" +
    "\034\037\021\001\002\000\022\006\017\010\020\016\031" +
    "\017\007\020\016\035\032\036\034\037\021\001\002\000" +
    "\022\006\017\010\020\016\031\017\007\020\016\035\032" +
    "\036\034\037\021\001\002\000\022\006\017\010\020\016" +
    "\031\017\007\020\016\035\032\036\034\037\021\001\002" +
    "\000\022\006\017\010\020\016\031\017\007\020\016\035" +
    "\032\036\034\037\021\001\002\000\022\006\017\010\020" +
    "\016\031\017\007\020\016\035\032\036\034\037\021\001" +
    "\002\000\020\002\uffdd\005\uffdd\007\uffdd\011\uffdd\012\uffdd" +
    "\014\uffdd\015\uffdd\001\002\000\020\002\uffdf\005\uffdf\007" +
    "\uffdf\011\uffdf\012\uffdf\014\uffdf\015\uffdf\001\002\000\020" +
    "\002\uffe1\005\uffe1\007\uffe1\011\uffe1\012\uffe1\014\uffe1\015" +
    "\uffe1\001\002\000\020\002\uffe0\005\uffe0\007\uffe0\011\uffe0" +
    "\012\uffe0\014\uffe0\015\uffe0\001\002\000\020\002\uffde\005" +
    "\uffde\007\uffde\011\uffde\012\uffde\014\uffde\015\uffde\001\002" +
    "\000\020\002\uffe2\005\uffe2\007\uffe2\011\uffe2\012\uffe2\014" +
    "\uffe2\015\uffe2\001\002\000\034\002\uffe6\005\uffe6\007\uffe6" +
    "\011\uffe6\012\uffe6\014\uffe6\015\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\001\002\000\024\006\017" +
    "\007\124\010\020\016\031\017\007\020\016\035\032\036" +
    "\034\037\021\001\002\000\050\002\ufffc\005\ufffc\007\ufffc" +
    "\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\021\ufffc\023" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc" +
    "\032\ufffc\033\ufffc\034\ufffc\001\002\000\010\005\060\007" +
    "\126\014\061\001\002\000\050\002\ufffb\005\ufffb\007\ufffb" +
    "\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\021\ufffb\023" +
    "\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb" +
    "\032\ufffb\033\ufffb\034\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\044\003\022\004\004\005\023\006\014\007" +
    "\027\010\013\011\010\012\021\013\012\015\032\016\024" +
    "\017\007\020\011\021\025\022\003\023\026\024\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\004\005\023\006\014\007" +
    "\027\010\074\024\005\001\001\000\044\003\022\004\004" +
    "\005\023\006\014\007\027\010\064\011\010\012\021\013" +
    "\012\015\032\016\024\017\007\020\063\021\025\022\003" +
    "\023\026\024\005\001\001\000\044\003\022\004\004\005" +
    "\023\006\014\007\027\010\013\011\010\012\021\013\012" +
    "\015\032\016\024\017\007\020\055\021\025\022\003\023" +
    "\026\024\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\004\005\023" +
    "\006\014\007\051\024\005\001\001\000\012\004\004\005" +
    "\023\006\050\024\005\001\001\000\012\004\004\005\023" +
    "\006\040\024\005\001\001\000\002\001\001\000\016\004" +
    "\004\005\023\006\014\007\027\010\042\024\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\004\005" +
    "\047\024\005\001\001\000\010\004\004\005\046\024\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\003\022\004\004\005\023\006\014\007\027" +
    "\010\013\011\010\012\021\013\012\015\032\016\024\017" +
    "\007\021\062\022\003\023\026\024\005\001\001\000\042" +
    "\003\022\004\004\005\023\006\014\007\027\010\013\011" +
    "\010\012\021\013\012\015\032\016\024\017\007\021\061" +
    "\022\003\023\026\024\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\003\022\004\004\005\023\006\014\007\027\010\013\011" +
    "\010\012\021\013\012\015\032\016\024\017\007\020\066" +
    "\021\025\022\003\023\026\024\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\003\022\004\004\005\023" +
    "\006\014\007\027\010\013\011\010\012\021\013\012\015" +
    "\032\016\024\017\007\020\071\021\025\022\003\023\026" +
    "\024\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\076\001\001\000\016\004\004" +
    "\005\023\006\014\007\027\010\102\024\005\001\001\000" +
    "\002\001\001\000\016\004\004\005\023\006\014\007\027" +
    "\010\100\024\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\022\004\004\005\023\006\014\007" +
    "\027\010\013\011\010\012\021\013\012\015\032\016\024" +
    "\017\120\022\003\024\005\001\001\000\036\003\022\004" +
    "\004\005\023\006\014\007\027\010\013\011\010\012\021" +
    "\013\012\015\032\016\024\017\117\022\003\024\005\001" +
    "\001\000\036\003\022\004\004\005\023\006\014\007\027" +
    "\010\013\011\010\012\021\013\012\015\032\016\024\017" +
    "\116\022\003\024\005\001\001\000\036\003\022\004\004" +
    "\005\023\006\014\007\027\010\013\011\010\012\021\013" +
    "\012\015\032\016\024\017\115\022\003\024\005\001\001" +
    "\000\036\003\022\004\004\005\023\006\014\007\027\010" +
    "\013\011\010\012\021\013\012\015\032\016\024\017\114" +
    "\022\003\024\005\001\001\000\036\003\022\004\004\005" +
    "\023\006\014\007\027\010\013\011\010\012\021\013\012" +
    "\015\032\016\024\017\113\022\003\024\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\003\022\004\004\005\023\006\014\007\027" +
    "\010\013\011\010\012\021\013\012\015\032\016\024\017" +
    "\007\020\124\021\025\022\003\023\026\024\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ProcessList ::= ProcessList PERIOD GuardProcess 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(p); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*ProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ProcessList ::= ProcessList COMMA GuardProcess 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(p); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*ProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ProcessList ::= GuardProcess 
            {
              LinkedList RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList(); list.add(p); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*ProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // GuardProcess ::= CompareAtom 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcCompareAtom p = (SrcCompareAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*GuardProcess*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // GuardProcess ::= Process 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*GuardProcess*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Process ::= LinkUnify 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcLinkUnify p = (SrcLinkUnify)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Process*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Process ::= Link 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcLink p = (SrcLink)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Process*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Process ::= Context 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcContext p = (SrcContext)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Process*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Process ::= Rule 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcRule p = (SrcRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Process*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Process ::= Membrane 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcMembrane p = (SrcMembrane)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Process*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Process ::= Atom 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcAtom p = (SrcAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Process*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CompareAtom ::= Process NE Process 
            {
              SrcCompareAtom RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcCompareAtom(SrcCompareAtom.NE, left, right); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*CompareAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CompareAtom ::= Process EQ Process 
            {
              SrcCompareAtom RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcCompareAtom(SrcCompareAtom.EQ, left, right); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*CompareAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CompareAtom ::= Process GE Process 
            {
              SrcCompareAtom RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcCompareAtom(SrcCompareAtom.GE, left, right); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*CompareAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CompareAtom ::= Process GT Process 
            {
              SrcCompareAtom RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcCompareAtom(SrcCompareAtom.GT, left, right); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*CompareAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CompareAtom ::= Process LE Process 
            {
              SrcCompareAtom RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcCompareAtom(SrcCompareAtom.LE, left, right); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*CompareAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CompareAtom ::= Process LT Process 
            {
              SrcCompareAtom RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcCompareAtom(SrcCompareAtom.LT, left, right); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*CompareAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LinkUnify ::= Link UNIFY Link 
            {
              SrcLinkUnify RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SrcLink left = (SrcLink)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcLink right = (SrcLink)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcLinkUnify(left, right); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*LinkUnify*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Context ::= RuleContext 
            {
              SrcContext RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcRuleContext r = (SrcRuleContext)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = r; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Context*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Context ::= ProcessContext 
            {
              SrcContext RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcProcessContext p = (SrcProcessContext)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Context*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RuleContext ::= RULEVAR AtomName 
            {
              SrcRuleContext RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcRuleContext(name); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*RuleContext*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ProcessContext ::= PROCVAR AtomName 
            {
              SrcProcessContext RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcProcessContext(name); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*ProcessContext*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Rule ::= LPAREN ProcessList RULE ProcessList GUARD ProcessList RPAREN 
            {
              SrcRule RESULT = null;
		int headleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList head = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int guardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int guardright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList guard = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList body = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SrcRule(head, guard, body); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Rule ::= LPAREN ProcessList RULE ProcessList RPAREN 
            {
              SrcRule RESULT = null;
		int headleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList head = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList body = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SrcRule(head, body); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Membrane ::= LBREATH ProcessList RBREATH 
            {
              SrcMembrane RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SrcMembrane(list); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Membrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Membrane ::= LBREATH RBREATH 
            {
              SrcMembrane RESULT = null;
		 RESULT = new SrcMembrane(); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Membrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ListCdr ::= 
            {
              SrcAtom RESULT = null;
		 RESULT = new SrcAtom("[]"); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*ListCdr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ListCdr ::= COMMA Atom ListCdr 
            {
              SrcAtom RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SrcAtom atom = (SrcAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cdrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cdrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcAtom cdr = (SrcAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
                       list.add(atom); list.add(cdr);
                       RESULT = new SrcAtom(".", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*ListCdr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ListCdr ::= GUARD Atom 
            {
              SrcAtom RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcAtom atom = (SrcAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom;  
              CUP$parser$result = new java_cup.runtime.Symbol(19/*ListCdr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // List ::= LBRACKET Atom ListCdr RBRACKET 
            {
              SrcAtom RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SrcAtom atom = (SrcAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cdrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cdrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SrcAtom cdr = (SrcAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 LinkedList list = new LinkedList();
                       list.add(atom); list.add(cdr);
                       RESULT = new SrcAtom(".", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*List*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // List ::= LBRACKET RBRACKET 
            {
              SrcAtom RESULT = null;
		 RESULT = new SrcAtom("[]"); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*List*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Atom ::= Atom500 UNIFY Atom500 
            {
              SrcAtom RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SrcAtom atom1 = (SrcAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcAtom atom2 = (SrcAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("=", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Atom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Atom ::= Atom500 
            {
              SrcAtom RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcAtom atom = (SrcAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Atom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Atom500 ::= Atom500 PLUS Atom400 
            {
              SrcAtom RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SrcAtom atom1 = (SrcAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcAtom atom2 = (SrcAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("+", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Atom500*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Atom500 ::= Atom500 MINAS Atom400 
            {
              SrcAtom RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SrcAtom atom1 = (SrcAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcAtom atom2 = (SrcAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("-", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Atom500*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Atom500 ::= Atom400 
            {
              SrcAtom RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcAtom atom = (SrcAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Atom500*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Atom400 ::= Atom400 SLASH UnitAtom 
            {
              SrcAtom RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SrcAtom atom1 = (SrcAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcAtom atom2 = (SrcAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("/", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Atom400*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Atom400 ::= Atom400 ASTERISK UnitAtom 
            {
              SrcAtom RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SrcAtom atom1 = (SrcAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcAtom atom2 = (SrcAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("*", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Atom400*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Atom400 ::= UnitAtom 
            {
              SrcAtom RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcAtom atom = (SrcAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Atom400*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // UnitAtom ::= LPAREN Atom RPAREN 
            {
              SrcAtom RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SrcAtom atom = (SrcAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // UnitAtom ::= List 
            {
              SrcAtom RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcAtom list = (SrcAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // UnitAtom ::= AtomName LPAREN ProcessList RPAREN 
            {
              SrcAtom RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SrcAtom(name, list, nameleft, nameright); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // UnitAtom ::= AtomName LPAREN RPAREN 
            {
              SrcAtom RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new SrcAtom(name, nameleft, nameright); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // UnitAtom ::= AtomName 
            {
              SrcAtom RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcAtom(name, nameleft, nameright); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // AtomName ::= ATOM_NAME_NORMAL 
            {
              String RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = name.toString(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*AtomName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // AtomName ::= QUOTED_STRING 
            {
              String RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = name.toString(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*AtomName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Link ::= LINK_NAME 
            {
              SrcLink RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcLink(name); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Link*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ProcessList EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList start_val = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

