
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Jun 26 15:04:52 JST 2006
//----------------------------------------------------

package compile.parser;

import java.util.LinkedList;
import compile.parser.MySymbol;

/** CUP v0.10k generated parser.
  * @version Mon Jun 26 15:04:52 JST 2006
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\003\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\003\000\002\006\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\006\000\002\010\003\000\002\010\007" +
    "\000\002\010\005\000\002\010\005\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\011\003\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\012\003\000\002\012\005\000\002\013\003" +
    "\000\002\013\005\000\002\013\005\000\002\014\003\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\015\003\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\016\003" +
    "\000\002\016\005\000\002\017\003\000\002\017\005\000" +
    "\002\020\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\036\004\000\002\036\006\000\002" +
    "\037\004\000\002\037\005\000\002\037\002\000\002\021" +
    "\004\000\002\022\003\000\002\022\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\006\000\002\023\006\000" +
    "\002\023\005\000\002\023\005\000\002\023\006\000\002" +
    "\023\006\000\002\023\005\000\002\024\005\000\002\024" +
    "\007\000\002\024\007\000\002\024\011\000\002\031\003" +
    "\000\002\031\005\000\002\031\007\000\002\025\004\000" +
    "\002\025\007\000\002\025\011\000\002\026\004\000\002" +
    "\027\003\000\002\027\003\000\002\043\004\000\002\040" +
    "\003\000\002\040\005\000\002\044\006\000\002\041\002" +
    "\000\002\041\003\000\002\042\003\000\002\042\005\000" +
    "\002\030\003\000\002\030\004\000\002\030\003\000\002" +
    "\032\002\000\002\032\003\000\002\032\004\000\002\033" +
    "\003\000\002\033\004\000\002\033\005\000\002\034\002" +
    "\000\002\034\003\000\002\034\004\000\002\035\003\000" +
    "\002\035\003\000\002\035\005\000\002\035\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\056\002\uff94\005\012\007\042\024\030\025" +
    "\036\026\007\030\026\031\037\037\005\040\021\043\033" +
    "\044\015\046\uff9a\047\020\051\051\052\041\053\047\054" +
    "\027\055\044\056\050\057\045\060\032\001\002\000\074" +
    "\002\uffeb\004\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\022\uffeb\023\uffeb\027\uffeb\031\uffeb\032\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb" +
    "\044\uffeb\046\uffeb\050\uffeb\001\002\000\040\005\012\007" +
    "\042\024\030\025\036\026\007\031\115\047\020\051\051" +
    "\052\065\053\047\054\027\055\044\056\117\057\045\060" +
    "\032\001\002\000\004\046\257\001\002\000\054\005\012" +
    "\007\042\024\030\025\036\026\007\027\246\030\026\031" +
    "\037\037\005\040\021\043\033\044\015\047\020\051\051" +
    "\052\065\053\047\054\027\055\044\056\064\057\045\060" +
    "\032\001\002\000\056\002\uffd5\004\uffd5\006\uffd5\007\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\022\uffd5\023\uffd5\027\uffd5\037\237" +
    "\040\235\043\236\044\240\046\uffd5\050\234\001\002\000" +
    "\074\002\uffa7\004\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7" +
    "\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020" +
    "\uffa7\022\uffa7\023\uffa7\027\uffa7\031\uffa7\032\uffa7\034\uffa7" +
    "\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043" +
    "\uffa7\044\uffa7\046\uffa7\050\uffa7\001\002\000\100\005\012" +
    "\006\uff9a\007\042\021\213\024\030\025\036\026\007\030" +
    "\026\031\037\032\212\033\205\034\214\035\211\036\177" +
    "\037\200\040\206\041\202\042\203\043\207\044\204\046" +
    "\uff9a\047\020\050\210\051\051\052\041\053\047\054\027" +
    "\055\044\056\050\057\045\060\032\001\002\000\066\002" +
    "\uffda\004\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\022" +
    "\uffda\023\uffda\027\uffda\035\172\036\171\037\uffda\040\uffda" +
    "\041\170\042\167\043\uffda\044\uffda\046\uffda\050\uffda\001" +
    "\002\000\074\002\uffe9\004\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\022\uffe9\023\uffe9\027\uffe9\031\uffe9\032\uffe9" +
    "\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042" +
    "\uffe9\043\uffe9\044\uffe9\046\uffe9\050\uffe9\001\002\000\040" +
    "\005\012\007\042\024\030\025\036\026\007\031\115\047" +
    "\020\051\051\052\065\053\047\054\027\055\044\056\117" +
    "\057\045\060\032\001\002\000\004\002\165\001\002\000" +
    "\074\002\ufff0\004\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\022\ufff0\023\ufff0\027\ufff0\031\ufff0\032\ufff0\034\ufff0" +
    "\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043" +
    "\ufff0\044\ufff0\046\ufff0\050\ufff0\001\002\000\076\002\ufffd" +
    "\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd" +
    "\022\ufffd\023\ufffd\027\ufffd\031\ufffd\032\ufffd\034\ufffd\035" +
    "\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd" +
    "\044\ufffd\046\ufffd\050\ufffd\001\002\000\040\005\012\007" +
    "\042\024\030\025\036\026\007\031\115\047\020\051\051" +
    "\052\065\053\047\054\027\055\044\056\117\057\045\060" +
    "\032\001\002\000\074\002\uffea\004\uffea\006\uffea\007\uffea" +
    "\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\022\uffea\023\uffea\027\uffea\031\uffea" +
    "\032\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041" +
    "\uffea\042\uffea\043\uffea\044\uffea\046\uffea\050\uffea\001\002" +
    "\000\070\002\uffdf\004\uffdf\006\uffdf\007\uffdf\010\uffdf\011" +
    "\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\022\uffdf\023\uffdf\027\uffdf\034\162\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf" +
    "\046\uffdf\050\uffdf\001\002\000\036\002\uff91\004\071\007" +
    "\042\010\uff91\011\uff91\012\uff91\013\uff91\014\uff91\015\uff91" +
    "\016\uff91\017\uff91\020\uff91\022\uff91\046\uff99\001\002\000" +
    "\044\002\uff9b\004\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b" +
    "\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020" +
    "\uff9b\022\uff9b\023\uff9b\027\uff9b\046\uff9b\001\002\000\050" +
    "\005\012\007\042\024\030\025\036\026\007\031\037\037" +
    "\005\040\021\043\033\044\015\047\020\051\051\052\065" +
    "\053\047\054\027\055\044\056\064\057\045\060\032\001" +
    "\002\000\074\002\ufff4\004\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\020\ufff4\022\ufff4\023\ufff4\027\ufff4\031\ufff4\032\ufff4" +
    "\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042" +
    "\ufff4\043\ufff4\044\ufff4\046\ufff4\050\ufff4\001\002\000\006" +
    "\031\133\056\134\001\002\000\030\002\uff93\010\uff93\011" +
    "\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93" +
    "\020\uff93\022\143\001\002\000\074\002\ufff3\004\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\017\ufff3\020\ufff3\022\ufff3\023\ufff3\027" +
    "\ufff3\031\ufff3\032\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3" +
    "\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\046\ufff3\050" +
    "\ufff3\001\002\000\040\005\012\007\042\024\030\025\036" +
    "\026\007\031\115\047\020\051\051\052\065\053\047\054" +
    "\027\055\044\056\117\057\045\060\032\001\002\000\074" +
    "\002\uffe2\004\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\022\uffe2\023\uffe2\027\uffe2\031\136\032\137\034\uffe2\035" +
    "\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2" +
    "\044\uffe2\046\uffe2\050\uffe2\001\002\000\074\002\uffe4\004" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\022\uffe4\023" +
    "\uffe4\027\uffe4\031\uffe4\032\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\046" +
    "\uffe4\050\uffe4\001\002\000\006\031\133\056\134\001\002" +
    "\000\100\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010" +
    "\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe" +
    "\017\ufffe\020\ufffe\021\ufff8\022\ufffe\023\ufffe\027\ufffe\031" +
    "\ufffe\032\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe" +
    "\041\ufffe\042\ufffe\043\ufffe\044\ufffe\046\ufffe\050\ufffe\001" +
    "\002\000\076\002\ufff2\004\ufff2\005\123\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\022\ufff2\023\ufff2\027\ufff2\031\ufff2" +
    "\032\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041" +
    "\ufff2\042\ufff2\043\ufff2\044\ufff2\046\ufff2\050\ufff2\001\002" +
    "\000\072\002\000\004\000\006\000\007\000\010\000\011" +
    "\000\012\000\013\000\014\000\015\000\016\000\017\000" +
    "\020\000\022\000\031\000\032\000\034\000\035\000\036" +
    "\000\037\000\040\000\041\000\042\000\043\000\044\000" +
    "\045\ufff6\046\000\050\000\001\002\000\076\005\012\007" +
    "\042\010\uff94\011\uff94\012\uff94\013\uff94\014\uff94\015\uff94" +
    "\016\uff94\017\uff94\020\uff94\024\030\025\036\026\007\030" +
    "\026\031\037\037\005\040\021\043\033\044\015\046\uff9a" +
    "\047\020\051\051\052\041\053\047\054\027\055\044\056" +
    "\050\057\045\060\032\001\002\000\044\002\uffd1\004\uffd1" +
    "\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\022\uffd1\023\uffd1" +
    "\027\uffd1\046\uffd1\001\002\000\076\002\ufffc\004\ufffc\005" +
    "\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc" +
    "\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\022\ufffc\023" +
    "\ufffc\027\ufffc\031\ufffc\032\ufffc\034\ufffc\035\ufffc\036\ufffc" +
    "\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\046" +
    "\ufffc\050\ufffc\001\002\000\076\002\ufffa\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014" +
    "\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\022\ufffa\023\ufffa" +
    "\027\ufffa\031\ufffa\032\ufffa\034\ufffa\035\ufffa\036\ufffa\037" +
    "\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\046\ufffa" +
    "\050\ufffa\001\002\000\030\002\uff90\010\uff90\011\uff90\012" +
    "\uff90\013\uff90\014\uff90\015\uff90\016\uff90\017\uff90\020\uff90" +
    "\022\uff90\001\002\000\074\002\ufff5\004\ufff5\006\ufff5\007" +
    "\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\016\ufff5\017\ufff5\020\ufff5\022\ufff5\023\ufff5\027\ufff5\031" +
    "\ufff5\032\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5" +
    "\041\ufff5\042\ufff5\043\ufff5\044\ufff5\046\ufff5\050\ufff5\001" +
    "\002\000\076\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff" +
    "\010\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015\uffff\016" +
    "\uffff\017\uffff\020\uffff\021\ufff9\022\uffff\031\uffff\032\uffff" +
    "\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff\041\uffff\042" +
    "\uffff\043\uffff\044\uffff\045\ufff7\046\uffff\050\uffff\001\002" +
    "\000\076\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\020\ufffb\022\ufffb\023\ufffb\027\ufffb\031\ufffb\032" +
    "\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb" +
    "\042\ufffb\043\ufffb\044\ufffb\046\ufffb\050\ufffb\001\002\000" +
    "\042\002\uff97\004\uff97\006\uff97\007\uff97\010\uff97\011\uff97" +
    "\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020" +
    "\uff97\022\uff97\023\uff97\046\uff97\001\002\000\044\002\uffd3" +
    "\004\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\022\uffd3" +
    "\023\uffd3\027\uffd3\046\uffd3\001\002\000\044\002\uff9d\004" +
    "\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d" +
    "\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\022\uff9d\023" +
    "\uff9d\027\uff9d\046\uff9d\001\002\000\074\002\uffa6\004\uffa6" +
    "\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014" +
    "\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\022\uffa6\023\uffa6" +
    "\027\uffa6\031\uffa6\032\uffa6\034\uffa6\035\uffa6\036\uffa6\037" +
    "\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\046\uffa6" +
    "\050\uffa6\001\002\000\074\002\uffec\004\uffec\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec" +
    "\016\uffec\017\uffec\020\uffec\022\uffec\023\uffec\027\uffec\031" +
    "\uffec\032\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\041\uffec\042\uffec\043\uffec\044\uffec\046\uffec\050\uffec\001" +
    "\002\000\004\045\075\001\002\000\004\021\061\001\002" +
    "\000\050\005\012\007\042\024\030\025\036\026\007\031" +
    "\037\037\005\040\021\043\033\044\015\047\020\051\051" +
    "\052\065\053\047\054\027\055\044\056\064\057\045\060" +
    "\032\001\002\000\044\002\uffd2\004\uffd2\006\uffd2\007\uffd2" +
    "\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\022\uffd2\023\uffd2\027\uffd2\046\uffd2" +
    "\001\002\000\076\002\ufff2\004\ufff2\005\066\006\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2" +
    "\016\ufff2\017\ufff2\020\ufff2\022\ufff2\023\ufff2\027\ufff2\031" +
    "\ufff2\032\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2" +
    "\041\ufff2\042\ufff2\043\ufff2\044\ufff2\046\ufff2\050\ufff2\001" +
    "\002\000\100\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff" +
    "\010\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015\uffff\016" +
    "\uffff\017\uffff\020\uffff\021\ufff9\022\uffff\023\uffff\027\uffff" +
    "\031\uffff\032\uffff\034\uffff\035\uffff\036\uffff\037\uffff\040" +
    "\uffff\041\uffff\042\uffff\043\uffff\044\uffff\046\uffff\050\uffff" +
    "\001\002\000\074\002\000\004\000\006\000\007\000\010" +
    "\000\011\000\012\000\013\000\014\000\015\000\016\000" +
    "\017\000\020\000\022\000\023\000\027\000\031\000\032" +
    "\000\034\000\035\000\036\000\037\000\040\000\041\000" +
    "\042\000\043\000\044\000\046\000\050\000\001\002\000" +
    "\054\005\012\006\uff9a\007\042\024\030\025\036\026\007" +
    "\030\026\031\037\037\005\040\021\043\033\044\015\047" +
    "\020\051\051\052\065\053\047\054\027\055\044\056\064" +
    "\057\045\060\032\001\002\000\004\006\074\001\002\000" +
    "\042\002\uff99\004\071\006\uff99\007\042\010\uff99\011\uff99" +
    "\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020" +
    "\uff99\022\uff99\023\uff99\046\uff99\001\002\000\106\002\uff98" +
    "\005\012\006\uff98\007\042\010\uff98\011\uff98\012\uff98\013" +
    "\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\022\uff98" +
    "\023\uff98\024\030\025\036\026\007\030\026\031\037\037" +
    "\005\040\021\043\033\044\015\046\uff98\047\020\051\051" +
    "\052\065\053\047\054\027\055\044\056\064\057\045\060" +
    "\032\001\002\000\042\002\uff96\004\uff96\006\uff96\007\uff96" +
    "\010\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016" +
    "\uff96\017\uff96\020\uff96\022\uff96\023\uff96\046\uff96\001\002" +
    "\000\042\002\uff95\004\uff95\006\uff95\007\uff95\010\uff95\011" +
    "\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95" +
    "\020\uff95\022\uff95\023\uff95\046\uff95\001\002\000\074\002" +
    "\ufff1\004\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\022" +
    "\ufff1\023\ufff1\027\ufff1\031\ufff1\032\ufff1\034\ufff1\035\ufff1" +
    "\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044" +
    "\ufff1\046\ufff1\050\ufff1\001\002\000\054\005\012\007\042" +
    "\024\030\025\036\026\007\030\026\031\037\037\005\040" +
    "\021\043\033\044\015\046\uff9a\047\020\051\051\052\065" +
    "\053\047\054\027\055\044\056\064\057\045\060\032\001" +
    "\002\000\004\046\077\001\002\000\102\002\uff9a\005\012" +
    "\007\042\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015" +
    "\uff9a\016\uff9a\017\uff9a\020\uff9a\022\uff9a\023\uff9a\024\030" +
    "\025\036\026\007\030\026\031\037\037\005\040\021\043" +
    "\033\044\015\047\020\051\051\052\065\053\047\054\027" +
    "\055\044\056\064\057\045\060\032\001\002\000\032\002" +
    "\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\022\uffb1\023\101\001\002\000" +
    "\100\002\uff9a\005\012\007\042\010\uff9a\011\uff9a\012\uff9a" +
    "\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\022" +
    "\uff9a\024\030\025\036\026\007\030\026\031\037\037\005" +
    "\040\021\043\033\044\015\047\020\051\051\052\065\053" +
    "\047\054\027\055\044\056\064\057\045\060\032\001\002" +
    "\000\030\002\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\022\uffaf\001\002" +
    "\000\024\010\113\011\112\012\110\013\106\014\105\015" +
    "\107\016\114\017\111\020\104\001\002\000\074\002\uffb3" +
    "\004\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013" +
    "\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\022\uffb3" +
    "\023\uffb3\027\uffb3\031\uffb3\032\uffb3\034\uffb3\035\uffb3\036" +
    "\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\046\uffb3\050\uffb3\001\002\000\074\002\uffb6\004\uffb6\006" +
    "\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\020\uffb6\022\uffb6\023\uffb6\027" +
    "\uffb6\031\uffb6\032\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\046\uffb6\050" +
    "\uffb6\001\002\000\040\005\012\007\042\024\030\025\036" +
    "\026\007\031\115\047\020\051\051\052\065\053\047\054" +
    "\027\055\044\056\117\057\045\060\032\001\002\000\074" +
    "\002\uffb7\004\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012" +
    "\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7" +
    "\022\uffb7\023\uffb7\027\uffb7\031\uffb7\032\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7" +
    "\044\uffb7\046\uffb7\050\uffb7\001\002\000\040\005\012\007" +
    "\042\024\030\025\036\026\007\031\115\047\020\051\051" +
    "\052\065\053\047\054\027\055\044\056\117\057\045\060" +
    "\032\001\002\000\040\005\012\007\042\024\030\025\036" +
    "\026\007\031\115\047\020\051\051\052\065\053\047\054" +
    "\027\055\044\056\117\057\045\060\032\001\002\000\074" +
    "\002\uffbb\004\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012" +
    "\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb" +
    "\022\uffbb\023\uffbb\027\uffbb\031\uffbb\032\uffbb\034\uffbb\035" +
    "\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb" +
    "\044\uffbb\046\uffbb\050\uffbb\001\002\000\074\002\uffba\004" +
    "\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba" +
    "\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\022\uffba\023" +
    "\uffba\027\uffba\031\uffba\032\uffba\034\uffba\035\uffba\036\uffba" +
    "\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\046" +
    "\uffba\050\uffba\001\002\000\040\005\012\007\042\024\030" +
    "\025\036\026\007\031\115\047\020\051\051\052\065\053" +
    "\047\054\027\055\044\056\117\057\045\060\032\001\002" +
    "\000\076\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010" +
    "\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe" +
    "\017\ufffe\020\ufffe\022\ufffe\023\ufffe\027\ufffe\031\ufffe\032" +
    "\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe" +
    "\042\ufffe\043\ufffe\044\ufffe\046\ufffe\050\ufffe\001\002\000" +
    "\074\002\uffb4\004\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4" +
    "\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\022\uffb4\023\uffb4\027\uffb4\031\uffb4\032\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\046\uffb4\050\uffb4\001\002\000\076\002\uffff" +
    "\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012" +
    "\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff\020\uffff" +
    "\022\uffff\023\uffff\027\uffff\031\uffff\032\uffff\034\uffff\035" +
    "\uffff\036\uffff\037\uffff\040\uffff\041\uffff\042\uffff\043\uffff" +
    "\044\uffff\046\uffff\050\uffff\001\002\000\074\002\uffb5\004" +
    "\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5" +
    "\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\022\uffb5\023" +
    "\uffb5\027\uffb5\031\uffb5\032\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\046" +
    "\uffb5\050\uffb5\001\002\000\074\002\uffb8\004\uffb8\006\uffb8" +
    "\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015" +
    "\uffb8\016\uffb8\017\uffb8\020\uffb8\022\uffb8\023\uffb8\027\uffb8" +
    "\031\uffb8\032\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040" +
    "\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\046\uffb8\050\uffb8" +
    "\001\002\000\074\002\uffb9\004\uffb9\006\uffb9\007\uffb9\010" +
    "\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\022\uffb9\023\uffb9\027\uffb9\031\uffb9\032" +
    "\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\046\uffb9\050\uffb9\001\002\000" +
    "\056\005\012\006\uff9a\007\042\024\030\025\036\026\007" +
    "\030\026\031\037\037\005\040\021\041\124\043\033\044" +
    "\015\047\020\051\051\052\065\053\047\054\027\055\044" +
    "\056\064\057\045\060\032\001\002\000\004\052\132\001" +
    "\002\000\006\004\uffa4\006\uffa4\001\002\000\006\004\127" +
    "\006\130\001\002\000\004\041\124\001\002\000\044\002" +
    "\uffa2\004\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2" +
    "\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\022" +
    "\uffa2\023\uffa2\027\uffa2\046\uffa2\001\002\000\006\004\uffa3" +
    "\006\uffa3\001\002\000\010\004\uffa5\006\uffa5\027\uffa5\001" +
    "\002\000\076\002\ufff8\004\ufff8\006\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\020\ufff8\022\ufff8\023\ufff8\026\ufff8\027\ufff8\031\ufff8" +
    "\032\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041" +
    "\ufff8\042\ufff8\043\ufff8\044\ufff8\046\ufff8\050\ufff8\001\002" +
    "\000\076\002\ufff9\004\ufff9\006\ufff9\007\ufff9\010\ufff9\011" +
    "\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9" +
    "\020\ufff9\022\ufff9\023\ufff9\026\ufff9\027\ufff9\031\ufff9\032" +
    "\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\046\ufff9\050\ufff9\001\002\000" +
    "\074\002\uffa8\004\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8" +
    "\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020" +
    "\uffa8\022\uffa8\023\uffa8\027\uffa8\031\uffa8\032\uffa8\034\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043" +
    "\uffa8\044\uffa8\046\uffa8\050\uffa8\001\002\000\050\005\012" +
    "\007\042\024\030\025\036\026\007\031\115\037\005\040" +
    "\021\043\033\044\015\047\020\051\051\052\065\053\047" +
    "\054\027\055\044\056\117\057\045\060\032\001\002\000" +
    "\050\005\012\007\042\024\030\025\036\026\007\031\115" +
    "\037\005\040\021\043\033\044\015\047\020\051\051\052" +
    "\065\053\047\054\027\055\044\056\117\057\045\060\032" +
    "\001\002\000\074\002\uffe3\004\uffe3\006\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\022\uffe3\023\uffe3\027\uffe3\031\uffe3\032" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\042\uffe3\043\uffe3\044\uffe3\046\uffe3\050\uffe3\001\002\000" +
    "\072\002\uffe1\004\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1" +
    "\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\022\uffe1\023\uffe1\027\uffe1\032\137\034\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044" +
    "\uffe1\046\uffe1\050\uffe1\001\002\000\074\002\uffe8\004\uffe8" +
    "\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\022\uffe8\023\uffe8" +
    "\027\uffe8\031\uffe8\032\uffe8\034\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\046\uffe8" +
    "\050\uffe8\001\002\000\100\002\uff92\005\012\007\042\010" +
    "\uff92\011\uff92\012\uff92\013\uff92\014\uff92\015\uff92\016\uff92" +
    "\017\uff92\020\uff92\024\030\025\036\026\007\030\026\031" +
    "\037\037\005\040\021\043\033\044\015\046\uff9a\047\020" +
    "\051\051\052\041\053\047\054\027\055\044\056\050\057" +
    "\045\060\032\001\002\000\036\002\uff8e\004\071\007\042" +
    "\010\uff8e\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016" +
    "\uff8e\017\uff8e\020\uff8e\022\uff8e\046\uff99\001\002\000\030" +
    "\002\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f\015" +
    "\uff8f\016\uff8f\017\uff8f\020\uff8f\022\uff8f\001\002\000\076" +
    "\002\uffab\004\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012" +
    "\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab" +
    "\022\uffab\023\uffab\026\147\027\uffab\031\uffab\032\uffab\034" +
    "\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\uffab\046\uffab\050\uffab\001\002\000\010\023" +
    "\uffa1\027\uffa1\052\065\001\002\000\010\004\uff9f\023\uff9f" +
    "\027\uff9f\001\002\000\006\023\156\027\155\001\002\000" +
    "\010\004\153\023\uffa0\027\uffa0\001\002\000\004\052\065" +
    "\001\002\000\010\004\uff9e\023\uff9e\027\uff9e\001\002\000" +
    "\074\002\uffaa\004\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa" +
    "\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020" +
    "\uffaa\022\uffaa\023\uffaa\027\uffaa\031\uffaa\032\uffaa\034\uffaa" +
    "\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043" +
    "\uffaa\044\uffaa\046\uffaa\050\uffaa\001\002\000\004\041\124" +
    "\001\002\000\004\027\160\001\002\000\074\002\uffa9\004" +
    "\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\022\uffa9\023" +
    "\uffa9\027\uffa9\031\uffa9\032\uffa9\034\uffa9\035\uffa9\036\uffa9" +
    "\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\046" +
    "\uffa9\050\uffa9\001\002\000\044\002\uff9c\004\uff9c\006\uff9c" +
    "\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c\015" +
    "\uff9c\016\uff9c\017\uff9c\020\uff9c\022\uff9c\023\uff9c\027\uff9c" +
    "\046\uff9c\001\002\000\050\005\012\007\042\024\030\025" +
    "\036\026\007\031\115\037\005\040\021\043\033\044\015" +
    "\047\020\051\051\052\065\053\047\054\027\055\044\056" +
    "\117\057\045\060\032\001\002\000\072\002\uffe0\004\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\022\uffe0\023\uffe0" +
    "\027\uffe0\032\137\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\046\uffe0\050\uffe0" +
    "\001\002\000\074\002\uffe5\004\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\022\uffe5\023\uffe5\027\uffe5\031\uffe5\032" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\046\uffe5\050\uffe5\001\002\000" +
    "\004\002\001\001\002\000\074\002\uffe7\004\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\022\uffe7\023\uffe7\027\uffe7" +
    "\031\uffe7\032\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\046\uffe7\050\uffe7" +
    "\001\002\000\050\005\012\007\042\024\030\025\036\026" +
    "\007\031\115\037\005\040\021\043\033\044\015\047\020" +
    "\051\051\052\065\053\047\054\027\055\044\056\117\057" +
    "\045\060\032\001\002\000\050\005\012\007\042\024\030" +
    "\025\036\026\007\031\115\037\005\040\021\043\033\044" +
    "\015\047\020\051\051\052\065\053\047\054\027\055\044" +
    "\056\117\057\045\060\032\001\002\000\050\005\012\007" +
    "\042\024\030\025\036\026\007\031\115\037\005\040\021" +
    "\043\033\044\015\047\020\051\051\052\065\053\047\054" +
    "\027\055\044\056\117\057\045\060\032\001\002\000\050" +
    "\005\012\007\042\024\030\025\036\026\007\031\115\037" +
    "\005\040\021\043\033\044\015\047\020\051\051\052\065" +
    "\053\047\054\027\055\044\056\117\057\045\060\032\001" +
    "\002\000\070\002\uffde\004\uffde\006\uffde\007\uffde\010\uffde" +
    "\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017" +
    "\uffde\020\uffde\022\uffde\023\uffde\027\uffde\034\162\035\uffde" +
    "\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044" +
    "\uffde\046\uffde\050\uffde\001\002\000\070\002\uffdd\004\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\022\uffdd\023\uffdd" +
    "\027\uffdd\034\162\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\042\uffdd\043\uffdd\044\uffdd\046\uffdd\050\uffdd\001\002" +
    "\000\070\002\uffdc\004\uffdc\006\uffdc\007\uffdc\010\uffdc\011" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\020\uffdc\022\uffdc\023\uffdc\027\uffdc\034\162\035\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc" +
    "\046\uffdc\050\uffdc\001\002\000\070\002\uffdb\004\uffdb\006" +
    "\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\017\uffdb\020\uffdb\022\uffdb\023\uffdb\027" +
    "\uffdb\034\162\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\046\uffdb\050\uffdb\001\002\000" +
    "\004\006\uffc9\001\002\000\042\005\012\006\uffcc\007\042" +
    "\024\030\025\036\026\007\031\115\047\020\051\051\052" +
    "\065\053\047\054\027\055\044\056\117\057\045\060\032" +
    "\001\002\000\006\006\221\046\222\001\002\000\004\006" +
    "\uffce\001\002\000\004\006\uffcd\001\002\000\042\005\012" +
    "\006\uffcf\007\042\024\030\025\036\026\007\031\115\047" +
    "\020\051\051\052\065\053\047\054\027\055\044\056\117" +
    "\057\045\060\032\001\002\000\004\006\uffc6\001\002\000" +
    "\042\005\012\006\uffcb\007\042\024\030\025\036\026\007" +
    "\031\115\047\020\051\051\052\065\053\047\054\027\055" +
    "\044\056\117\057\045\060\032\001\002\000\042\005\012" +
    "\006\uffd0\007\042\024\030\025\036\026\007\031\115\047" +
    "\020\051\051\052\065\053\047\054\027\055\044\056\117" +
    "\057\045\060\032\001\002\000\004\006\uffc8\001\002\000" +
    "\004\006\uffca\001\002\000\004\006\uffc7\001\002\000\004" +
    "\006\uffc5\001\002\000\004\006\uffc4\001\002\000\004\006" +
    "\231\001\002\000\004\045\217\001\002\000\056\005\012" +
    "\006\uff9a\007\042\024\030\025\036\026\007\030\026\031" +
    "\037\037\005\040\021\043\033\044\015\046\uff9a\047\020" +
    "\051\051\052\065\053\047\054\027\055\044\056\064\057" +
    "\045\060\032\001\002\000\006\006\221\046\222\001\002" +
    "\000\074\002\uffae\004\uffae\006\uffae\007\uffae\010\uffae\011" +
    "\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae" +
    "\020\uffae\022\uffae\023\uffae\027\uffae\031\uffae\032\uffae\034" +
    "\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae" +
    "\043\uffae\044\uffae\046\uffae\050\uffae\001\002\000\056\005" +
    "\012\006\uff9a\007\042\023\uff9a\024\030\025\036\026\007" +
    "\030\026\031\037\037\005\040\021\043\033\044\015\047" +
    "\020\051\051\052\065\053\047\054\027\055\044\056\064" +
    "\057\045\060\032\001\002\000\074\002\uffef\004\uffef\006" +
    "\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef" +
    "\015\uffef\016\uffef\017\uffef\020\uffef\022\uffef\023\uffef\027" +
    "\uffef\031\uffef\032\uffef\034\uffef\035\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\046\uffef\050" +
    "\uffef\001\002\000\006\006\225\023\226\001\002\000\074" +
    "\002\uffad\004\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012" +
    "\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad" +
    "\022\uffad\023\uffad\027\uffad\031\uffad\032\uffad\034\uffad\035" +
    "\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad" +
    "\044\uffad\046\uffad\050\uffad\001\002\000\054\005\012\006" +
    "\uff9a\007\042\024\030\025\036\026\007\030\026\031\037" +
    "\037\005\040\021\043\033\044\015\047\020\051\051\052" +
    "\065\053\047\054\027\055\044\056\064\057\045\060\032" +
    "\001\002\000\004\006\230\001\002\000\074\002\uffac\004" +
    "\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac" +
    "\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac\022\uffac\023" +
    "\uffac\027\uffac\031\uffac\032\uffac\034\uffac\035\uffac\036\uffac" +
    "\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\046" +
    "\uffac\050\uffac\001\002\000\074\002\uffed\004\uffed\006\uffed" +
    "\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\016\uffed\017\uffed\020\uffed\022\uffed\023\uffed\027\uffed" +
    "\031\uffed\032\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040" +
    "\uffed\041\uffed\042\uffed\043\uffed\044\uffed\046\uffed\050\uffed" +
    "\001\002\000\074\002\uffee\004\uffee\006\uffee\007\uffee\010" +
    "\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\022\uffee\023\uffee\027\uffee\031\uffee\032" +
    "\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee" +
    "\042\uffee\043\uffee\044\uffee\046\uffee\050\uffee\001\002\000" +
    "\074\002\uffe6\004\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\022\uffe6\023\uffe6\027\uffe6\031\uffe6\032\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043" +
    "\uffe6\044\uffe6\046\uffe6\050\uffe6\001\002\000\050\005\012" +
    "\007\042\024\030\025\036\026\007\031\115\037\005\040" +
    "\021\043\033\044\015\047\020\051\051\052\065\053\047" +
    "\054\027\055\044\056\117\057\045\060\032\001\002\000" +
    "\050\005\012\007\042\024\030\025\036\026\007\031\115" +
    "\037\005\040\021\043\033\044\015\047\020\051\051\052" +
    "\065\053\047\054\027\055\044\056\117\057\045\060\032" +
    "\001\002\000\050\005\012\007\042\024\030\025\036\026" +
    "\007\031\115\037\005\040\021\043\033\044\015\047\020" +
    "\051\051\052\065\053\047\054\027\055\044\056\117\057" +
    "\045\060\032\001\002\000\050\005\012\007\042\024\030" +
    "\025\036\026\007\031\115\037\005\040\021\043\033\044" +
    "\015\047\020\051\051\052\065\053\047\054\027\055\044" +
    "\056\117\057\045\060\032\001\002\000\050\005\012\007" +
    "\042\024\030\025\036\026\007\031\115\037\005\040\021" +
    "\043\033\044\015\047\020\051\051\052\065\053\047\054" +
    "\027\055\044\056\117\057\045\060\032\001\002\000\066" +
    "\002\uffd7\004\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\022\uffd7\023\uffd7\027\uffd7\035\172\036\171\037\uffd7\040" +
    "\uffd7\041\170\042\167\043\uffd7\044\uffd7\046\uffd7\050\uffd7" +
    "\001\002\000\066\002\uffd8\004\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\020\uffd8\022\uffd8\023\uffd8\027\uffd8\035\172\036" +
    "\171\037\uffd8\040\uffd8\041\170\042\167\043\uffd8\044\uffd8" +
    "\046\uffd8\050\uffd8\001\002\000\066\002\uffd6\004\uffd6\006" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\017\uffd6\020\uffd6\022\uffd6\023\uffd6\027" +
    "\uffd6\035\172\036\171\037\uffd6\040\uffd6\041\170\042\167" +
    "\043\uffd6\044\uffd6\046\uffd6\050\uffd6\001\002\000\066\002" +
    "\uffd9\004\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\022" +
    "\uffd9\023\uffd9\027\uffd9\035\172\036\171\037\uffd9\040\uffd9" +
    "\041\170\042\167\043\uffd9\044\uffd9\046\uffd9\050\uffd9\001" +
    "\002\000\054\002\uffd4\004\uffd4\006\uffd4\007\uffd4\010\uffd4" +
    "\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\022\uffd4\023\uffd4\027\uffd4\037\237\040\235" +
    "\043\236\044\240\046\uffd4\001\002\000\074\002\uffc3\004" +
    "\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\022\uffc3\023" +
    "\uffc3\027\uffc3\031\uffc3\032\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\046" +
    "\uffc3\050\uffc3\001\002\000\010\004\250\023\252\027\uffbf" +
    "\001\002\000\052\005\012\007\042\024\030\025\036\026" +
    "\007\030\026\031\037\037\005\040\021\043\033\044\015" +
    "\047\020\051\051\052\065\053\047\054\027\055\044\056" +
    "\064\057\045\060\032\001\002\000\004\027\254\001\002" +
    "\000\052\005\012\007\042\024\030\025\036\026\007\030" +
    "\026\031\037\037\005\040\021\043\033\044\015\047\020" +
    "\051\051\052\065\053\047\054\027\055\044\056\064\057" +
    "\045\060\032\001\002\000\004\027\uffc1\001\002\000\074" +
    "\002\uffc2\004\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2" +
    "\022\uffc2\023\uffc2\027\uffc2\031\uffc2\032\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2" +
    "\044\uffc2\046\uffc2\050\uffc2\001\002\000\010\004\250\023" +
    "\252\027\uffbf\001\002\000\004\027\uffc0\001\002\000\102" +
    "\002\uff9a\005\012\007\042\010\uff9a\011\uff9a\012\uff9a\013" +
    "\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\022\uff9a" +
    "\023\uff9a\024\030\025\036\026\007\030\026\031\037\037" +
    "\005\040\021\043\033\044\015\047\020\051\051\052\065" +
    "\053\047\054\027\055\044\056\064\057\045\060\032\001" +
    "\002\000\032\002\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2" +
    "\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\022\uffb2\023" +
    "\261\001\002\000\100\002\uff9a\005\012\007\042\010\uff9a" +
    "\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017" +
    "\uff9a\020\uff9a\022\uff9a\024\030\025\036\026\007\030\026" +
    "\031\037\037\005\040\021\043\033\044\015\047\020\051" +
    "\051\052\065\053\047\054\027\055\044\056\064\057\045" +
    "\060\032\001\002\000\030\002\uffb0\010\uffb0\011\uffb0\012" +
    "\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\022\uffb0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\064\003\003\004\037\005\057\006\056\010" +
    "\013\011\034\012\033\013\022\014\012\015\007\016\052" +
    "\017\042\020\053\023\021\024\045\025\010\026\054\027" +
    "\055\030\051\032\005\033\023\034\015\035\030\036\016" +
    "\044\024\001\001\000\002\001\001\000\022\003\003\004" +
    "\062\010\232\023\021\025\010\026\054\027\055\036\016" +
    "\001\001\000\002\001\001\000\050\003\003\004\037\005" +
    "\057\010\013\011\034\012\033\013\022\014\012\015\007" +
    "\016\052\017\042\020\053\023\021\025\010\026\054\027" +
    "\055\030\246\036\016\044\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\003\003\004\037\005\057\006" +
    "\215\007\214\010\013\011\034\012\033\013\022\014\012" +
    "\015\007\016\052\017\042\020\053\023\021\025\010\026" +
    "\054\027\055\030\051\032\200\033\067\036\016\044\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\003\004\062\010\165\023\021\025\010\026\054\027\055" +
    "\036\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\003\004\062\010\163\023\021" +
    "\025\010\026\054\027\055\036\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\071\001\001\000\002" +
    "\001\001\000\044\003\003\004\062\005\057\010\013\011" +
    "\034\012\033\013\022\014\012\015\007\016\052\017\042" +
    "\020\160\023\021\025\010\026\054\027\055\036\016\001" +
    "\001\000\002\001\001\000\004\005\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\003\004\062\010" +
    "\141\023\021\025\010\026\054\027\055\036\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\003\003\004\037\005\057\006\056\010\013\011" +
    "\034\012\033\013\022\014\012\015\007\016\052\017\042" +
    "\020\053\023\021\024\045\025\010\026\054\027\055\030" +
    "\051\032\005\033\023\034\102\035\030\036\016\044\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\003\004\062\005" +
    "\057\010\013\011\034\012\033\013\022\014\012\015\007" +
    "\016\052\017\061\023\021\025\010\026\054\027\055\036" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\003\003\004\037\005" +
    "\057\010\013\011\034\012\033\013\022\014\012\015\007" +
    "\016\052\017\042\020\053\023\021\025\010\026\054\027" +
    "\055\030\051\032\066\033\067\036\016\044\024\001\001" +
    "\000\002\001\001\000\004\023\071\001\001\000\050\003" +
    "\003\004\037\005\057\010\013\011\034\012\033\013\022" +
    "\014\012\015\007\016\052\017\042\020\053\023\021\025" +
    "\010\026\054\027\055\030\072\036\016\044\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\003\003\004\037\005\057\010\013\011\034\012\033" +
    "\013\022\014\012\015\007\016\052\017\042\020\053\023" +
    "\021\025\010\026\054\027\055\030\051\032\075\033\067" +
    "\036\016\044\024\001\001\000\002\001\001\000\054\003" +
    "\003\004\037\005\057\010\013\011\034\012\033\013\022" +
    "\014\012\015\007\016\052\017\042\020\053\023\021\025" +
    "\010\026\054\027\055\030\051\032\077\033\067\036\016" +
    "\044\024\001\001\000\002\001\001\000\054\003\003\004" +
    "\037\005\057\010\013\011\034\012\033\013\022\014\012" +
    "\015\007\016\052\017\042\020\053\023\021\025\010\026" +
    "\054\027\055\030\051\032\101\033\067\036\016\044\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\003\004\062\010\121" +
    "\023\021\025\010\026\054\027\055\036\016\001\001\000" +
    "\002\001\001\000\022\003\003\004\062\010\120\023\021" +
    "\025\010\026\054\027\055\036\016\001\001\000\022\003" +
    "\003\004\062\010\117\023\021\025\010\026\054\027\055" +
    "\036\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\003\004\062\010\115\023\021\025\010\026\054" +
    "\027\055\036\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\003\003\004\037\005\057\010" +
    "\013\011\034\012\033\013\022\014\012\015\007\016\052" +
    "\017\042\020\053\023\021\025\010\026\054\027\055\030" +
    "\051\032\066\033\067\036\016\040\125\043\124\044\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\003\004\062\010\013" +
    "\011\034\012\140\023\021\025\010\026\054\027\055\036" +
    "\016\001\001\000\024\003\003\004\062\010\013\011\137" +
    "\023\021\025\010\026\054\027\055\036\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\003\003\004\037\005\057\006\056\010\013\011\034\012" +
    "\033\013\022\014\012\015\007\016\052\017\042\020\053" +
    "\023\021\024\144\025\010\026\054\027\055\030\051\032" +
    "\005\033\143\036\016\044\024\001\001\000\004\023\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\147\041\150\042\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\003\004\062\010\013\011\034\012\162\023\021" +
    "\025\010\026\054\027\055\036\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\003\004\062\010\013\011\034\012\033\013" +
    "\175\023\021\025\010\026\054\027\055\036\016\001\001" +
    "\000\030\003\003\004\062\010\013\011\034\012\033\013" +
    "\174\023\021\025\010\026\054\027\055\036\016\001\001" +
    "\000\030\003\003\004\062\010\013\011\034\012\033\013" +
    "\173\023\021\025\010\026\054\027\055\036\016\001\001" +
    "\000\030\003\003\004\062\010\013\011\034\012\033\013" +
    "\172\023\021\025\010\026\054\027\055\036\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\003\004\062" +
    "\010\232\023\021\025\010\026\054\027\055\036\016\001" +
    "\001\000\004\031\231\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\003\004\062\010\165\023\021\025" +
    "\010\026\054\027\055\036\016\001\001\000\002\001\001" +
    "\000\022\003\003\004\062\010\163\023\021\025\010\026" +
    "\054\027\055\036\016\001\001\000\022\003\003\004\062" +
    "\010\141\023\021\025\010\026\054\027\055\036\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\003\003\004\037\005\057\010\013" +
    "\011\034\012\033\013\022\014\012\015\007\016\052\017" +
    "\042\020\053\023\021\025\010\026\054\027\055\030\051" +
    "\032\217\033\067\036\016\044\024\001\001\000\004\031" +
    "\222\001\001\000\002\001\001\000\054\003\003\004\037" +
    "\005\057\010\013\011\034\012\033\013\022\014\012\015" +
    "\007\016\052\017\042\020\053\023\021\025\010\026\054" +
    "\027\055\030\051\032\223\033\067\036\016\044\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\003\003\004\037\005\057\010\013\011\034\012" +
    "\033\013\022\014\012\015\007\016\052\017\042\020\053" +
    "\023\021\025\010\026\054\027\055\030\051\032\226\033" +
    "\067\036\016\044\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\003\004\062\010\013\011\034\012\033" +
    "\013\022\014\012\015\244\023\021\025\010\026\054\027" +
    "\055\036\016\001\001\000\032\003\003\004\062\010\013" +
    "\011\034\012\033\013\022\014\243\023\021\025\010\026" +
    "\054\027\055\036\016\001\001\000\032\003\003\004\062" +
    "\010\013\011\034\012\033\013\022\014\242\023\021\025" +
    "\010\026\054\027\055\036\016\001\001\000\032\003\003" +
    "\004\062\010\013\011\034\012\033\013\022\014\241\023" +
    "\021\025\010\026\054\027\055\036\016\001\001\000\032" +
    "\003\003\004\062\010\013\011\034\012\033\013\022\014" +
    "\240\023\021\025\010\026\054\027\055\036\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\250\001\001\000\050\003\003\004\037\005\057\010" +
    "\013\011\034\012\033\013\022\014\012\015\007\016\052" +
    "\017\042\020\053\023\021\025\010\026\054\027\055\030" +
    "\254\036\016\044\024\001\001\000\002\001\001\000\050" +
    "\003\003\004\037\005\057\010\013\011\034\012\033\013" +
    "\022\014\012\015\007\016\052\017\042\020\053\023\021" +
    "\025\010\026\054\027\055\030\252\036\016\044\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\255" +
    "\001\001\000\002\001\001\000\054\003\003\004\037\005" +
    "\057\010\013\011\034\012\033\013\022\014\012\015\007" +
    "\016\052\017\042\020\053\023\021\025\010\026\054\027" +
    "\055\030\051\032\257\033\067\036\016\044\024\001\001" +
    "\000\002\001\001\000\054\003\003\004\037\005\057\010" +
    "\013\011\034\012\033\013\022\014\012\015\007\016\052" +
    "\017\042\020\053\023\021\025\010\026\054\027\055\030" +
    "\051\032\261\033\067\036\016\044\024\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
	public void report_error(String message, Object info) {
		System.err.print(message);
		if (info instanceof MySymbol) {
			MySymbol symbol = (MySymbol)info;
			System.err.print(" : Unexpected Token <" + symbol.token + "> at line " + symbol.left);
		}
		System.err.println();
    }

    public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws Exception {
    	report_fatal_error("Couldn't repair and continue parse", null);
	}
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NonemptyWorldProcessList ::= NonemptyWorldProcessList PERIOD NonemptyProcessList 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList p = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(p); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*NonemptyWorldProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NonemptyWorldProcessList ::= NonemptyWorldProcessList PERIOD Rule 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcRule p = (SrcRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(p); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*NonemptyWorldProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NonemptyWorldProcessList ::= Rule 
            {
              LinkedList RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcRule p = (SrcRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList(); list.add(p); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*NonemptyWorldProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NonemptyWorldProcessList ::= NonemptyProcessList 
            {
              LinkedList RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList p = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*NonemptyWorldProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // WorldProcessList ::= NonemptyWorldProcessList PERIOD 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*WorldProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // WorldProcessList ::= NonemptyWorldProcessList 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*WorldProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // WorldProcessList ::= 
            {
              LinkedList RESULT = null;
		 RESULT = new LinkedList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*WorldProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NonemptyProcessList ::= NonemptyProcessList COMMA Process 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(p); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*NonemptyProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NonemptyProcessList ::= NonemptyProcessList Membrane 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcMembrane p = (SrcMembrane)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(p); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*NonemptyProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NonemptyProcessList ::= Process 
            {
              LinkedList RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList(); list.add(p); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*NonemptyProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ProcessList ::= NonemptyProcessList COMMA 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*ProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ProcessList ::= NonemptyProcessList 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*ProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ProcessList ::= 
            {
              LinkedList RESULT = null;
		 RESULT = new LinkedList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*ProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Process ::= Aggregate 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcAtom p = (SrcAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*Process*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Process ::= NEGATIVE Atom 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom);
					   RESULT = new SrcAtom(new SrcName("\\+"), list, atomleft, atomright); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*Process*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Process ::= Atom 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*Process*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NonemptyLinkList ::= NonemptyLinkList COMMA Link 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int linkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int linkright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcLink link = (SrcLink)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(link); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*NonemptyLinkList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NonemptyLinkList ::= Link 
            {
              LinkedList RESULT = null;
		int linkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int linkright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcLink link = (SrcLink)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList(); list.add(link); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*NonemptyLinkList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LinkList ::= NonemptyLinkList 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*LinkList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LinkList ::= 
            {
              LinkedList RESULT = null;
		 RESULT = new LinkedList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*LinkList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Aggregate ::= FuncName LPAREN BundleList RPAREN 
            {
              SrcAtom RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SrcName name = (SrcName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SrcAtom(name, list, nameleft, nameright); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*Aggregate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // BundleList ::= BundleList COMMA Bundle 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bundleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bundleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcLinkBundle bundle = (SrcLinkBundle)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(bundle); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*BundleList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BundleList ::= Bundle 
            {
              LinkedList RESULT = null;
		int bundleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bundleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcLinkBundle bundle = (SrcLinkBundle)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList(); list.add(bundle); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*BundleList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Bundle ::= ASTERISK LINK_NAME 
            {
              SrcLinkBundle RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcLinkBundle(name); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*Bundle*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Context ::= RuleContext 
            {
              SrcContext RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcRuleContext r = (SrcRuleContext)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = r; 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Context*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Context ::= ProcessContext 
            {
              SrcContext RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcProcessContext p = (SrcProcessContext)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Context*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // RuleContext ::= RULEVAR AtomName 
            {
              SrcRuleContext RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcRuleContext(name); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*RuleContext*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ProcessContext ::= PROCVAR AtomName LBRACKET LinkList GUARD Bundle RBRACKET 
            {
              SrcProcessContext RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bundleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bundleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SrcLinkBundle bundle = (SrcLinkBundle)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SrcProcessContext pc = new SrcProcessContext(name);
						pc.args = list;
						pc.bundle = bundle;
						RESULT = pc; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*ProcessContext*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ProcessContext ::= PROCVAR AtomName LBRACKET LinkList RBRACKET 
            {
              SrcProcessContext RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SrcProcessContext pc = new SrcProcessContext(name);
						pc.args = list;
						RESULT = pc; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*ProcessContext*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ProcessContext ::= PROCVAR AtomName 
            {
              SrcProcessContext RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcProcessContext(name); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*ProcessContext*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ProcessListContinuation ::= RULE ProcessList GUARD ProcessList RPAREN 
            {
              SrcRule RESULT = null;
		int linenoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int linenoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer lineno = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int guardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int guardright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList guard = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList body = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SrcRule(null, null, guard, body, lineno.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*ProcessListContinuation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ProcessListContinuation ::= RULE ProcessList RPAREN 
            {
              SrcRule RESULT = null;
		int linenoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int linenoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer lineno = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList body = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SrcRule(null, null, body, lineno.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*ProcessListContinuation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ProcessListContinuation ::= RPAREN 
            {
              SrcRule RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*ProcessListContinuation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Rule ::= RuleName RULENAMESEP ProcessList RULE ProcessList GUARD ProcessList 
            {
              SrcRule RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int headleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList head = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int linenoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int linenoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer lineno = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int guardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int guardright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList guard = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList body = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcRule(name, head, guard, body, lineno.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Rule ::= ProcessList RULE ProcessList GUARD ProcessList 
            {
              SrcRule RESULT = null;
		int headleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList head = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int linenoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int linenoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer lineno = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int guardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int guardright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList guard = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList body = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcRule(null, head, guard, body, lineno.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Rule ::= RuleName RULENAMESEP ProcessList RULE ProcessList 
            {
              SrcRule RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int headleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList head = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int linenoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int linenoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer lineno = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList body = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcRule(name, head, body, lineno.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Rule ::= ProcessList RULE ProcessList 
            {
              SrcRule RESULT = null;
		int headleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList head = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int linenoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int linenoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer lineno = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList body = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcRule(null, head, body, lineno.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Membrane ::= LBRACE WorldProcessList RBRACE_ASTERISK 
            {
              SrcMembrane RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SrcMembrane sMem = new SrcMembrane(list);
						sMem.kind = runtime.Membrane.KIND_ND;
						RESULT = sMem; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Membrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Membrane ::= LBRACE WorldProcessList RBRACE_UNDERBAR_AT UnitAtom 
            {
              SrcMembrane RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 SrcMembrane sMem = new SrcMembrane(list);
					   sMem.kind = 1;
					   sMem.pragma = atom;
					   RESULT = sMem; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Membrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Membrane ::= LBRACE WorldProcessList RBRACE_UNDERBAR_SLASH_AT UnitAtom 
            {
              SrcMembrane RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 SrcMembrane sMem = new SrcMembrane(list);
					   sMem.stable = true;
					   sMem.kind = 1;
					   sMem.pragma = atom;
					   RESULT = sMem; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Membrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Membrane ::= LBRACE WorldProcessList RBRACE_UNDERBAR 
            {
              SrcMembrane RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SrcMembrane sMem = new SrcMembrane(list);
					   sMem.kind = 1;
					   RESULT = sMem; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Membrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Membrane ::= LBRACE WorldProcessList RBRACE_UNDERBAR_SLASH 
            {
              SrcMembrane RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SrcMembrane sMem = new SrcMembrane(list);
					   sMem.stable = true;
					   sMem.kind = 1;
					   RESULT = sMem; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Membrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Membrane ::= LBRACE WorldProcessList RBRACE_AT UnitAtom 
            {
              SrcMembrane RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 SrcMembrane sMem = new SrcMembrane(list);
					   sMem.pragma = atom;
					   RESULT = sMem; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Membrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Membrane ::= LBRACE WorldProcessList RBRACE_SLASH_AT UnitAtom 
            {
              SrcMembrane RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 SrcMembrane sMem = new SrcMembrane(list);
					   sMem.stable = true;
					   sMem.pragma = atom;
					   RESULT = sMem; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Membrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Membrane ::= LBRACE WorldProcessList RBRACE 
            {
              SrcMembrane RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SrcMembrane(list); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Membrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Membrane ::= LBRACE WorldProcessList RBRACE_SLASH 
            {
              SrcMembrane RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SrcMembrane sMem = new SrcMembrane(list);
					   sMem.stable = true;
					   RESULT = sMem; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Membrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // AtomListRest ::= COMMA Atom AtomListRest 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int atomlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atomlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
                       list.add(atom); list.add(atomlist);
                       RESULT = new SrcAtom(",", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*AtomListRest*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // AtomListRest ::= RPAREN 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*AtomListRest*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // AtomList ::= Atom AtomList 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int atomlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atomlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 if (atomlist == null) { RESULT = atom; }
					   else {
					     LinkedList list = new LinkedList();
                         list.add(atom); list.add(atomlist);
                         RESULT = new SrcAtom(",", list);
                       } 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*AtomList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ListCdr ::= 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("[]"); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*ListCdr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ListCdr ::= COMMA Process ListCdr 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cdrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cdrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object cdr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
                       list.add(atom); list.add(cdr);
                       RESULT = new SrcAtom(".", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*ListCdr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ListCdr ::= GUARD Process 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom;  
              CUP$parser$result = new java_cup.runtime.Symbol(29/*ListCdr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // List ::= LBRACKET Process ListCdr RBRACKET 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cdrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cdrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cdr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 LinkedList list = new LinkedList();
                       list.add(atom); list.add(cdr);
                       RESULT = new SrcAtom(".", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*List*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // List ::= LBRACKET RBRACKET 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("[]"); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*List*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // QuotedOperatorAtom ::= ASTERISK_ASTERISK 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("**");	
              CUP$parser$result = new java_cup.runtime.Symbol(5/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // QuotedOperatorAtom ::= COLON 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom(":");	
              CUP$parser$result = new java_cup.runtime.Symbol(5/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // QuotedOperatorAtom ::= TILDE 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("~");	
              CUP$parser$result = new java_cup.runtime.Symbol(5/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // QuotedOperatorAtom ::= HAT 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("^");	
              CUP$parser$result = new java_cup.runtime.Symbol(5/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // QuotedOperatorAtom ::= RELOP 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcAtom(op);	
              CUP$parser$result = new java_cup.runtime.Symbol(5/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // QuotedOperatorAtom ::= SLASH_DOT 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("/.");	
              CUP$parser$result = new java_cup.runtime.Symbol(5/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // QuotedOperatorAtom ::= ASTERISK_DOT 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("*.");	
              CUP$parser$result = new java_cup.runtime.Symbol(5/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // QuotedOperatorAtom ::= MINUS_DOT 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("-.");	
              CUP$parser$result = new java_cup.runtime.Symbol(5/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // QuotedOperatorAtom ::= PLUS_DOT 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("+.");	
              CUP$parser$result = new java_cup.runtime.Symbol(5/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // QuotedOperatorAtom ::= SLASH 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("/");	
              CUP$parser$result = new java_cup.runtime.Symbol(5/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // QuotedOperatorAtom ::= ASTERISK 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("*");	
              CUP$parser$result = new java_cup.runtime.Symbol(5/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // QuotedOperatorAtom ::= MINUS 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("-");	
              CUP$parser$result = new java_cup.runtime.Symbol(5/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // QuotedOperatorAtom ::= PLUS 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("+");	
              CUP$parser$result = new java_cup.runtime.Symbol(5/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Atom ::= Atom800 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Atom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Atom800 ::= AtomName COLON Atom800 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(new SrcAtom(new SrcName(name))); list.add(atom);
					   RESULT = new SrcAtom(":", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Atom800*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Atom800 ::= Atom700 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Atom800*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Atom700 ::= Atom500 RELOP Atom500 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom(op, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Atom700*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Atom700 ::= Atom500 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Atom700*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Atom500 ::= Atom500 PLUS Atom400 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("+", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Atom500*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Atom500 ::= Atom500 MINUS Atom400 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("-", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Atom500*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Atom500 ::= Atom500 PLUS_DOT Atom400 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("+.", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Atom500*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Atom500 ::= Atom500 MINUS_DOT Atom400 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("-.", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Atom500*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Atom500 ::= Atom400 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Atom500*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Atom400 ::= Atom400 SLASH Atom300 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("/", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Atom400*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Atom400 ::= Atom400 ASTERISK Atom300 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("*", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Atom400*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Atom400 ::= Atom400 SLASH_DOT Atom300 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("/.", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Atom400*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Atom400 ::= Atom400 ASTERISK_DOT Atom300 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("*.", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Atom400*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Atom400 ::= Atom300 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Atom400*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Atom300 ::= Atom300 ASTERISK_ASTERISK Atom200 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("**", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Atom300*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Atom300 ::= Atom200 MOD Atom200 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("mod", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Atom300*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Atom300 ::= Atom200 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Atom300*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Atom200 ::= Atom200 HAT UnaryOpAtom 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("^", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Atom200*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Atom200 ::= UnaryOpAtom 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Atom200*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // UnaryOpAtom ::= MINUS_DOT UnitAtom 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom);
					   RESULT = new SrcAtom("-.", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*UnaryOpAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // UnaryOpAtom ::= PLUS_DOT UnitAtom 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom);
					   RESULT = new SrcAtom("+.", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*UnaryOpAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // UnaryOpAtom ::= MINUS UnitAtom 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom);
					   RESULT = new SrcAtom("-", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*UnaryOpAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // UnaryOpAtom ::= PLUS UnitAtom 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom);
					   RESULT = new SrcAtom("+", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*UnaryOpAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // UnaryOpAtom ::= UnitAtom 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*UnaryOpAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // UnitAtom ::= Membrane 
            {
              Object RESULT = null;
		int memleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int memright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcMembrane mem = (SrcMembrane)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = mem; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // UnitAtom ::= Link 
            {
              Object RESULT = null;
		int linkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int linkright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcLink link = (SrcLink)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = link; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // UnitAtom ::= Context 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcContext p = (SrcContext)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // UnitAtom ::= LPAREN QuotedOperatorAtom RPAREN 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // UnitAtom ::= LPAREN ProcessList ProcessListContinuation 
            {
              Object RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ruleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ruleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcRule rule = (SrcRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 if (rule == null) {
					     if (list.size() == 1) {
					     	RESULT = list.getFirst();
					     }
					     else {
					     	RESULT = list;
					     }
					   }
					   else {
						 rule.setHead(list);
						 RESULT = rule;
					   } 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // UnitAtom ::= LPAREN RuleName RULENAMESEP ProcessList ProcessListContinuation 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ruleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ruleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcRule rule = (SrcRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 rule.name = name;
					   if (rule == null) {
					     if (list.size() == 1) {
					     	RESULT = list.getFirst();
					     }
					     else {
					     	RESULT = list;
					     }
					   }
					   else {
						 rule.setHead(list);
						 RESULT = rule;
					   } 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // UnitAtom ::= List 
            {
              Object RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // UnitAtom ::= FuncName LPAREN ProcessList RPAREN 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SrcName name = (SrcName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SrcAtom(name, list, nameleft, nameright); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // UnitAtom ::= FuncName 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcName name = (SrcName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcAtom(name, nameleft, nameright); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // UnitAtom ::= CHAR_CODE_LITERAL 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcAtom(new SrcName(""+(int)name.charAt(2)), nameleft, nameright); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // UnitAtom ::= NUMBER_NAME16 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcAtom(new SrcName(name), nameleft, nameright); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // UnitAtom ::= NUMBER_NAME 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcAtom(new SrcName(name), nameleft, nameright); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RuleName ::= LINK_NAME 
            {
              String RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = name.toString(); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*RuleName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // RuleName ::= ATOM_NAME 
            {
              String RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = name.toString(); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*RuleName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // AtomName ::= MOD 
            {
              String RESULT = null;
		 RESULT = "mod"; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*AtomName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // AtomName ::= ATOM_NAME 
            {
              String RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = name.toString(); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*AtomName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FuncName ::= PATHED_ATOM_NAME 
            {
              SrcName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcName(name.replace(':','.'), SrcName.PATHED); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FuncName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FuncName ::= STRING 
            {
              SrcName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcName(name, SrcName.STRING); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FuncName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FuncName ::= SYMBOL_NAME 
            {
              SrcName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcName(name.replaceAll("^'|'$","").replaceAll("''","'"),
											SrcName.SYMBOL); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FuncName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FuncName ::= QUOTED_STRING 
            {
              SrcName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcName(name.toString(), SrcName.QUOTED); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FuncName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FuncName ::= MOD 
            {
              SrcName RESULT = null;
		 RESULT = new SrcName("mod"); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FuncName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FuncName ::= ATOM_NAME 
            {
              SrcName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcName(name); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FuncName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Link ::= LINK_NAME 
            {
              SrcLink RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcLink(name.toString(), nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Link*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= WorldProcessList EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList start_val = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

