
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jan 20 20:30:55 JST 2004
//----------------------------------------------------

package compile.parser;

import java.util.LinkedList;

/** CUP v0.10k generated parser.
  * @version Tue Jan 20 20:30:55 JST 2004
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\003\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\006\000\002\006\003\000\002" +
    "\006\005\000\002\006\003\000\002\006\005\000\002\006" +
    "\003\000\002\007\003\000\002\007\004\000\002\007\004" +
    "\000\002\010\003\000\002\010\005\000\002\010\005\000" +
    "\002\011\003\000\002\011\005\000\002\011\005\000\002" +
    "\012\003\000\002\012\005\000\002\025\004\000\002\025" +
    "\006\000\002\026\004\000\002\026\005\000\002\026\002" +
    "\000\002\013\010\000\002\013\007\000\002\013\006\000" +
    "\002\013\005\000\002\014\005\000\002\014\007\000\002" +
    "\015\004\000\002\016\004\000\002\017\003\000\002\017" +
    "\003\000\002\020\003\000\002\020\003\000\002\021\002" +
    "\000\002\021\003\000\002\021\004\000\002\022\003\000" +
    "\002\022\005\000\002\023\002\000\002\023\003\000\002" +
    "\023\004\000\002\024\003\000\002\024\003\000\002\024" +
    "\005\000\002\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\042\002\uffd0\005\022\007\021\011\uffd5\015" +
    "\042\016\010\017\023\024\007\025\032\026\041\030\024" +
    "\031\044\032\040\033\006\034\035\035\013\001\002\000" +
    "\004\012\123\001\002\000\034\002\ufff6\004\ufff6\006\ufff6" +
    "\010\ufff6\011\ufff6\013\ufff6\014\ufff6\020\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\027\ufff6\001\002\000\036\002\ufffd" +
    "\004\ufffd\005\ufffd\006\ufffd\010\ufffd\011\ufffd\013\ufffd\014" +
    "\ufffd\020\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\027\ufffd" +
    "\001\002\000\030\005\022\015\042\016\010\017\023\026" +
    "\041\030\024\031\044\032\040\033\006\034\053\035\013" +
    "\001\002\000\004\034\045\001\002\000\020\002\uffd2\004" +
    "\uffd2\006\uffd2\010\uffd2\011\uffd2\013\uffd2\014\uffd2\001\002" +
    "\000\020\002\uffd6\004\uffd6\006\uffd6\010\uffd6\011\uffd6\013" +
    "\uffd6\014\uffd6\001\002\000\036\002\ufffb\004\ufffb\005\ufffb" +
    "\006\ufffb\010\ufffb\011\ufffb\013\ufffb\014\ufffb\020\ufffb\022" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\027\ufffb\001\002\000\004" +
    "\011\115\001\002\000\034\002\uffd9\004\uffd9\006\uffd9\010" +
    "\uffd9\011\uffd9\013\uffd9\014\uffd9\020\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\027\uffd9\001\002\000\004\002\114\001" +
    "\002\000\020\002\uffd7\004\uffd7\006\uffd7\010\uffd7\011\uffd7" +
    "\013\uffd7\014\uffd7\001\002\000\034\002\uffeb\004\uffeb\006" +
    "\uffeb\010\uffeb\011\uffeb\013\uffeb\014\uffeb\020\uffeb\022\055" +
    "\023\054\024\uffeb\025\uffeb\027\uffeb\001\002\000\042\005" +
    "\022\007\021\010\uffd0\011\uffd5\015\042\016\010\017\023" +
    "\024\007\025\032\026\041\030\024\031\044\032\040\033" +
    "\006\034\035\035\013\001\002\000\040\005\022\007\021" +
    "\011\uffd5\015\042\016\010\017\023\024\007\025\032\026" +
    "\041\030\024\031\044\032\040\033\006\034\035\035\013" +
    "\001\002\000\036\005\022\015\042\016\010\017\023\020" +
    "\075\024\007\025\032\026\041\030\024\031\044\032\040" +
    "\033\006\034\053\035\013\001\002\000\036\002\ufffc\004" +
    "\ufffc\005\ufffc\006\ufffc\010\ufffc\011\ufffc\013\ufffc\014\ufffc" +
    "\020\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\027\ufffc\001" +
    "\002\000\010\002\uffcc\010\uffcc\013\uffcc\001\002\000\034" +
    "\002\ufff2\004\ufff2\006\ufff2\010\ufff2\011\ufff2\013\ufff2\014" +
    "\ufff2\020\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\027\ufff2" +
    "\001\002\000\010\002\uffcf\010\uffcf\013\071\001\002\000" +
    "\034\002\ufff1\004\ufff1\006\ufff1\010\ufff1\011\ufff1\013\ufff1" +
    "\014\ufff1\020\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\027" +
    "\ufff1\001\002\000\034\002\ufff4\004\ufff4\006\ufff4\010\ufff4" +
    "\011\ufff4\013\ufff4\014\ufff4\020\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\027\ufff4\001\002\000\030\005\022\015\042" +
    "\016\010\017\023\026\041\030\024\031\044\032\040\033" +
    "\006\034\053\035\013\001\002\000\036\002\ufff8\004\ufff8" +
    "\005\064\006\ufff8\010\ufff8\011\ufff8\013\ufff8\014\ufff8\020" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\027\ufff8\001\002" +
    "\000\034\002\uffee\004\uffee\006\uffee\010\uffee\011\uffee\013" +
    "\uffee\014\uffee\020\uffee\022\uffee\023\uffee\024\uffee\025\uffee" +
    "\027\uffee\001\002\000\036\002\uffff\004\uffff\005\uffff\006" +
    "\uffff\010\uffff\011\uffff\012\ufffa\013\uffff\014\uffff\022\uffff" +
    "\023\uffff\024\uffff\025\uffff\027\uffff\001\002\000\014\002" +
    "\uffcd\004\062\010\uffcd\011\uffd4\013\uffcd\001\002\000\030" +
    "\002\uffe8\004\uffe8\006\uffe8\010\uffe8\011\uffe8\013\uffe8\014" +
    "\uffe8\020\uffe8\024\050\025\051\027\047\001\002\000\034" +
    "\002\ufff9\004\ufff9\006\ufff9\010\ufff9\011\ufff9\013\ufff9\014" +
    "\ufff9\020\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\027\ufff9" +
    "\001\002\000\036\002\ufffe\004\ufffe\005\ufffe\006\ufffe\010" +
    "\ufffe\011\ufffe\013\ufffe\014\ufffe\020\ufffe\022\ufffe\023\ufffe" +
    "\024\ufffe\025\ufffe\027\ufffe\001\002\000\004\034\045\001" +
    "\002\000\034\002\uffd8\004\uffd8\006\uffd8\010\uffd8\011\uffd8" +
    "\013\uffd8\014\uffd8\020\uffd8\022\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\027\uffd8\001\002\000\034\002\000\004\000\006\000" +
    "\010\000\011\000\013\000\014\000\020\000\022\000\023" +
    "\000\024\000\025\000\027\000\001\002\000\034\002\ufffa" +
    "\004\ufffa\006\ufffa\010\ufffa\011\ufffa\013\ufffa\014\ufffa\020" +
    "\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\027\ufffa\001\002" +
    "\000\034\002\uffdb\004\uffdb\006\uffdb\010\uffdb\011\uffdb\013" +
    "\uffdb\014\uffdb\020\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\027\uffdb\001\002\000\034\005\022\015\042\016\010\017" +
    "\023\024\007\025\032\026\041\030\024\031\044\032\040" +
    "\033\006\034\053\035\013\001\002\000\034\005\022\015" +
    "\042\016\010\017\023\024\007\025\032\026\041\030\024" +
    "\031\044\032\040\033\006\034\053\035\013\001\002\000" +
    "\034\005\022\015\042\016\010\017\023\024\007\025\032" +
    "\026\041\030\024\031\044\032\040\033\006\034\053\035" +
    "\013\001\002\000\034\002\uffea\004\uffea\006\uffea\010\uffea" +
    "\011\uffea\013\uffea\014\uffea\020\uffea\022\055\023\054\024" +
    "\uffea\025\uffea\027\uffea\001\002\000\036\002\uffff\004\uffff" +
    "\005\uffff\006\uffff\010\uffff\011\uffff\013\uffff\014\uffff\020" +
    "\uffff\022\uffff\023\uffff\024\uffff\025\uffff\027\uffff\001\002" +
    "\000\034\005\022\015\042\016\010\017\023\024\007\025" +
    "\032\026\041\030\024\031\044\032\040\033\006\034\053" +
    "\035\013\001\002\000\034\005\022\015\042\016\010\017" +
    "\023\024\007\025\032\026\041\030\024\031\044\032\040" +
    "\033\006\034\053\035\013\001\002\000\034\002\uffed\004" +
    "\uffed\006\uffed\010\uffed\011\uffed\013\uffed\014\uffed\020\uffed" +
    "\022\uffed\023\uffed\024\uffed\025\uffed\027\uffed\001\002\000" +
    "\034\002\uffec\004\uffec\006\uffec\010\uffec\011\uffec\013\uffec" +
    "\014\uffec\020\uffec\022\uffec\023\uffec\024\uffec\025\uffec\027" +
    "\uffec\001\002\000\034\002\uffe9\004\uffe9\006\uffe9\010\uffe9" +
    "\011\uffe9\013\uffe9\014\uffe9\020\uffe9\022\055\023\054\024" +
    "\uffe9\025\uffe9\027\uffe9\001\002\000\026\002\uffe7\004\uffe7" +
    "\006\uffe7\010\uffe7\011\uffe7\013\uffe7\014\uffe7\020\uffe7\024" +
    "\050\025\051\001\002\000\052\002\uffd3\005\022\006\uffd3" +
    "\007\021\010\uffd3\011\uffd3\013\uffd3\014\uffd3\015\042\016" +
    "\010\017\023\024\007\025\032\026\041\030\024\031\044" +
    "\032\040\033\006\034\035\035\013\001\002\000\020\002" +
    "\uffd1\004\uffd1\006\uffd1\010\uffd1\011\uffd1\013\uffd1\014\uffd1" +
    "\001\002\000\040\005\022\006\uffd5\007\021\015\042\016" +
    "\010\017\023\024\007\025\032\026\041\030\024\031\044" +
    "\032\040\033\006\034\035\035\013\001\002\000\004\006" +
    "\067\001\002\000\020\002\uffd4\004\062\006\uffd4\010\uffd4" +
    "\011\uffd4\013\uffd4\014\uffd4\001\002\000\034\002\ufff7\004" +
    "\ufff7\006\ufff7\010\ufff7\011\ufff7\013\ufff7\014\ufff7\020\ufff7" +
    "\022\ufff7\023\ufff7\024\ufff7\025\ufff7\027\ufff7\001\002\000" +
    "\034\002\uffef\004\uffef\006\uffef\010\uffef\011\uffef\013\uffef" +
    "\014\uffef\020\uffef\022\uffef\023\uffef\024\uffef\025\uffef\027" +
    "\uffef\001\002\000\044\002\uffce\005\022\007\021\010\uffce" +
    "\011\uffd5\015\042\016\010\017\023\024\007\025\032\026" +
    "\041\030\024\031\044\032\040\033\006\034\035\035\013" +
    "\001\002\000\010\002\uffcb\010\uffcb\013\uffcb\001\002\000" +
    "\014\002\uffca\004\062\010\uffca\011\uffd4\013\uffca\001\002" +
    "\000\010\004\076\014\100\020\uffe2\001\002\000\034\002" +
    "\uffe6\004\uffe6\006\uffe6\010\uffe6\011\uffe6\013\uffe6\014\uffe6" +
    "\020\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\027\uffe6\001" +
    "\002\000\034\005\022\015\042\016\010\017\023\024\007" +
    "\025\032\026\041\030\024\031\044\032\040\033\006\034" +
    "\053\035\013\001\002\000\004\020\102\001\002\000\034" +
    "\005\022\015\042\016\010\017\023\024\007\025\032\026" +
    "\041\030\024\031\044\032\040\033\006\034\053\035\013" +
    "\001\002\000\004\020\uffe4\001\002\000\034\002\uffe5\004" +
    "\uffe5\006\uffe5\010\uffe5\011\uffe5\013\uffe5\014\uffe5\020\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\025\uffe5\027\uffe5\001\002\000" +
    "\010\004\076\014\100\020\uffe2\001\002\000\004\020\uffe3" +
    "\001\002\000\010\004\uffd7\006\110\011\uffd7\001\002\000" +
    "\004\006\107\001\002\000\034\002\ufff5\004\ufff5\006\ufff5" +
    "\010\ufff5\011\ufff5\013\ufff5\014\ufff5\020\ufff5\022\ufff5\023" +
    "\ufff5\024\ufff5\025\ufff5\027\ufff5\001\002\000\034\002\ufff3" +
    "\004\ufff3\006\ufff3\010\ufff3\011\ufff3\013\ufff3\014\ufff3\020" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\027\ufff3\001\002" +
    "\000\004\010\112\001\002\000\022\002\uffde\004\uffde\006" +
    "\uffde\010\uffde\011\uffde\013\uffde\014\uffde\023\113\001\002" +
    "\000\020\002\uffdf\004\uffdf\006\uffdf\010\uffdf\011\uffdf\013" +
    "\uffdf\014\uffdf\001\002\000\004\002\001\001\002\000\050" +
    "\002\uffd5\005\022\006\uffd5\007\021\010\uffd5\013\uffd5\014" +
    "\uffd5\015\042\016\010\017\023\024\007\025\032\026\041" +
    "\030\024\031\044\032\040\033\006\034\035\035\013\001" +
    "\002\000\014\002\uffdd\006\uffdd\010\uffdd\013\uffdd\014\117" +
    "\001\002\000\046\002\uffd5\005\022\006\uffd5\007\021\010" +
    "\uffd5\013\uffd5\015\042\016\010\017\023\024\007\025\032" +
    "\026\041\030\024\031\044\032\040\033\006\034\035\035" +
    "\013\001\002\000\012\002\uffdc\006\uffdc\010\uffdc\013\uffdc" +
    "\001\002\000\034\002\uffda\004\uffda\006\uffda\010\uffda\011" +
    "\uffda\013\uffda\014\uffda\020\uffda\022\uffda\023\uffda\024\uffda" +
    "\025\uffda\027\uffda\001\002\000\034\002\ufff0\004\ufff0\006" +
    "\ufff0\010\ufff0\011\ufff0\013\ufff0\014\ufff0\020\ufff0\022\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\027\ufff0\001\002\000\004\007" +
    "\124\001\002\000\042\005\022\007\021\010\uffd0\011\uffd5" +
    "\015\042\016\010\017\023\024\007\025\032\026\041\030" +
    "\024\031\044\032\040\033\006\034\035\035\013\001\002" +
    "\000\004\010\126\001\002\000\022\002\uffe0\004\uffe0\006" +
    "\uffe0\010\uffe0\011\uffe0\013\uffe0\014\uffe0\023\127\001\002" +
    "\000\020\002\uffe1\004\uffe1\006\uffe1\010\uffe1\011\uffe1\013" +
    "\uffe1\014\uffe1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\050\003\025\004\032\005\003\006\027\007" +
    "\033\010\017\011\036\012\016\013\011\014\024\015\014" +
    "\016\042\017\030\020\010\021\013\022\035\023\015\024" +
    "\026\025\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\025\004\032\006\121\015" +
    "\014\016\042\017\030\025\004\001\001\000\004\005\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\003\025\004" +
    "\032\005\003\006\027\007\033\010\017\011\036\012\016" +
    "\013\011\014\024\015\014\016\042\017\030\020\010\021" +
    "\013\022\035\023\110\024\026\025\004\001\001\000\044" +
    "\003\025\004\032\005\003\006\027\007\033\010\017\011" +
    "\036\012\104\013\011\014\105\015\014\016\042\017\030" +
    "\020\010\021\013\022\065\025\004\001\001\000\030\003" +
    "\025\004\032\006\027\007\033\010\017\011\036\012\073" +
    "\015\014\016\042\017\030\025\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\025\004" +
    "\032\006\067\015\014\016\042\017\030\025\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\025\004\032\006\027\007\033\010\017\011\060\015" +
    "\014\016\042\017\030\025\004\001\001\000\024\003\025" +
    "\004\032\006\027\007\033\010\057\015\014\016\042\017" +
    "\030\025\004\001\001\000\024\003\025\004\032\006\027" +
    "\007\033\010\051\015\014\016\042\017\030\025\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\025" +
    "\004\032\006\027\007\056\015\014\016\042\017\030\025" +
    "\004\001\001\000\022\003\025\004\032\006\027\007\055" +
    "\015\014\016\042\017\030\025\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\025\004\032\005\003\006\027\007\033\010" +
    "\017\011\036\012\016\013\011\015\014\016\042\017\030" +
    "\020\062\025\004\001\001\000\002\001\001\000\042\003" +
    "\025\004\032\005\003\006\027\007\033\010\017\011\036" +
    "\012\016\013\011\015\014\016\042\017\030\020\010\021" +
    "\064\022\065\025\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\003" +
    "\025\004\032\005\003\006\027\007\033\010\017\011\036" +
    "\012\016\013\011\014\071\015\014\016\042\017\030\020" +
    "\010\021\013\022\072\025\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\076\001\001\000\002\001" +
    "\001\000\030\003\025\004\032\006\027\007\033\010\017" +
    "\011\036\012\102\015\014\016\042\017\030\025\004\001" +
    "\001\000\002\001\001\000\030\003\025\004\032\006\027" +
    "\007\033\010\017\011\036\012\100\015\014\016\042\017" +
    "\030\025\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\025\004\032\005\003\006\027" +
    "\007\033\010\017\011\036\012\016\013\011\015\014\016" +
    "\042\017\030\020\010\021\115\022\065\025\004\001\001" +
    "\000\002\001\001\000\042\003\025\004\032\005\003\006" +
    "\027\007\033\010\017\011\036\012\016\013\011\015\014" +
    "\016\042\017\030\020\010\021\117\022\065\025\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\003\025\004\032\005\003\006" +
    "\027\007\033\010\017\011\036\012\016\013\011\014\024" +
    "\015\014\016\042\017\030\020\010\021\013\022\035\023" +
    "\124\024\026\025\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NonemptyWorldProcessList ::= NonemptyWorldProcessList PERIOD NonemptyProcessList 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList p = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(p); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*NonemptyWorldProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NonemptyWorldProcessList ::= NonemptyWorldProcessList PERIOD Rule 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcRule p = (SrcRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(p); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*NonemptyWorldProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NonemptyWorldProcessList ::= Rule 
            {
              LinkedList RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcRule p = (SrcRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList(); list.add(p); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*NonemptyWorldProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NonemptyWorldProcessList ::= NonemptyProcessList 
            {
              LinkedList RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList p = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*NonemptyWorldProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // WorldProcessList ::= NonemptyWorldProcessList PERIOD 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*WorldProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WorldProcessList ::= NonemptyWorldProcessList 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*WorldProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // WorldProcessList ::= 
            {
              LinkedList RESULT = null;
		 RESULT = new LinkedList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*WorldProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NonemptyProcessList ::= NonemptyProcessList COMMA Process 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(p); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*NonemptyProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NonemptyProcessList ::= Process 
            {
              LinkedList RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList(); list.add(p); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*NonemptyProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ProcessList ::= NonemptyProcessList COMMA 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*ProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ProcessList ::= NonemptyProcessList 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*ProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ProcessList ::= 
            {
              LinkedList RESULT = null;
		 RESULT = new LinkedList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*ProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Process ::= Membrane 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcMembrane p = (SrcMembrane)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Process*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Process ::= Atom 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Process*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Context ::= RuleContext 
            {
              SrcContext RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcRuleContext r = (SrcRuleContext)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = r; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Context*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Context ::= ProcessContext 
            {
              SrcContext RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcProcessContext p = (SrcProcessContext)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Context*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RuleContext ::= RULEVAR AtomName 
            {
              SrcRuleContext RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcRuleContext(name); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*RuleContext*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ProcessContext ::= PROCVAR AtomName 
            {
              SrcProcessContext RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcProcessContext(name); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*ProcessContext*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Rule ::= ProcessList RULE ProcessList GUARD ProcessList 
            {
              SrcRule RESULT = null;
		int headleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList head = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int guardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int guardright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList guard = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList body = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcRule(head, guard, body); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Rule ::= ProcessList RULE ProcessList 
            {
              SrcRule RESULT = null;
		int headleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList head = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList body = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcRule(head, body); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Membrane ::= LBRACE WorldProcessList RBRACE 
            {
              SrcMembrane RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SrcMembrane(list); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Membrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Membrane ::= LBRACE WorldProcessList RBRACE SLASH 
            {
              SrcMembrane RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 SrcMembrane sMem = new SrcMembrane(list);
					   sMem.stable = true;
					   RESULT = sMem; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Membrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Membrane ::= AtomName COLON LBRACE WorldProcessList RBRACE 
            {
              SrcMembrane RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SrcMembrane(name, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Membrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Membrane ::= AtomName COLON LBRACE WorldProcessList RBRACE SLASH 
            {
              SrcMembrane RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 SrcMembrane sMem = new SrcMembrane(name, list);
					   sMem.stable = true;
					   RESULT = sMem; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Membrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListCdr ::= 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("[]"); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*ListCdr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListCdr ::= COMMA Atom ListCdr 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cdrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cdrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object cdr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
                       list.add(atom); list.add(cdr);
                       RESULT = new SrcAtom(".", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*ListCdr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListCdr ::= GUARD Atom 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom;  
              CUP$parser$result = new java_cup.runtime.Symbol(20/*ListCdr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // List ::= LBRACKET Atom ListCdr RBRACKET 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cdrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cdrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cdr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 LinkedList list = new LinkedList();
                       list.add(atom); list.add(cdr);
                       RESULT = new SrcAtom(".", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*List*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // List ::= LBRACKET RBRACKET 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("[]"); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*List*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Atom ::= Atom500 RELOP Atom500 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom(op, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Atom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Atom ::= Atom500 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Atom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Atom500 ::= Atom500 PLUS Atom400 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("+", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Atom500*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Atom500 ::= Atom500 MINUS Atom400 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("-", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Atom500*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Atom500 ::= Atom400 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Atom500*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Atom400 ::= Atom400 SLASH UnaryOpAtom 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("/", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Atom400*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Atom400 ::= Atom400 ASTERISK UnaryOpAtom 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("*", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Atom400*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Atom400 ::= UnaryOpAtom 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Atom400*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // UnaryOpAtom ::= MINUS UnitAtom 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom);
					   RESULT = new SrcAtom("-", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*UnaryOpAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // UnaryOpAtom ::= PLUS UnitAtom 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom);
					   RESULT = new SrcAtom("+", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*UnaryOpAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // UnaryOpAtom ::= UnitAtom 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*UnaryOpAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // UnitAtom ::= Link 
            {
              Object RESULT = null;
		int linkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int linkright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcLink link = (SrcLink)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = link; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // UnitAtom ::= LPAREN Atom RPAREN 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // UnitAtom ::= Context 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcContext p = (SrcContext)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // UnitAtom ::= LPAREN Rule RPAREN 
            {
              Object RESULT = null;
		int ruleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ruleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SrcRule rule = (SrcRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = rule; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // UnitAtom ::= List 
            {
              Object RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // UnitAtom ::= FuncName LPAREN ProcessList RPAREN 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SrcName name = (SrcName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SrcAtom(name, list, nameleft, nameright); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // UnitAtom ::= FuncName 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcName name = (SrcName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcAtom(name, nameleft, nameright); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // UnitAtom ::= NUMBER_NAME 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcAtom(new SrcName(name), nameleft, nameright); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // AtomName ::= ATOM_NAME 
            {
              String RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = name.toString(); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*AtomName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FuncName ::= PATHED_ATOM_NAME 
            {
              SrcName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcName(name.replace(':','.'), SrcName.PATHED); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FuncName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FuncName ::= STRING 
            {
              SrcName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcName(name.replaceAll("^\"|\"$","")
												.replaceAll("\\\\n","\n")
												.replaceAll("\\\\r","\r")
												.replaceAll("\\\\t","\t")
												.replaceAll("\\\\f","\f")
												.replaceAll("\\\\\"","\"")
												.replaceAll("\\\\\\\\","\\\\"),
											SrcName.STRING); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FuncName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FuncName ::= SYMBOL_NAME 
            {
              SrcName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcName(name.replaceAll("^'|'$","").replaceAll("''","'"),
											SrcName.SYMBOL); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FuncName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FuncName ::= QUOTED_STRING 
            {
              SrcName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcName(name.toString(), SrcName.QUOTED); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FuncName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FuncName ::= ATOM_NAME 
            {
              SrcName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcName(name); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FuncName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Link ::= LINK_NAME 
            {
              SrcLink RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcLink(name); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Link*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= WorldProcessList EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList start_val = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

