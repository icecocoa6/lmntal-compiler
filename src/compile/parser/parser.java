
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Sat Jul 21 17:23:15 JST 2012
//----------------------------------------------------

package compile.parser;

import java.util.LinkedList;
import compile.parser.MySymbol;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Sat Jul 21 17:23:15 JST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\004\000\002\003\003\000\002\004" +
    "\004\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\003\000\002" +
    "\007\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\006\000\002\011\003\000\002\011\007" +
    "\000\002\011\005\000\002\011\005\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\012\003\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\013\003\000\002\013\005" +
    "\000\002\014\003\000\002\014\005\000\002\014\005\000" +
    "\002\015\003\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\016\003\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\017\003\000\002\017\005\000\002\017\005\000" +
    "\002\020\003\000\002\020\005\000\002\021\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\040\004\000\002\040" +
    "\006\000\002\041\004\000\002\041\005\000\002\041\002" +
    "\000\002\022\004\000\002\023\003\000\002\023\005\000" +
    "\002\024\003\000\002\024\004\000\002\025\005\000\002" +
    "\025\005\000\002\025\006\000\002\025\006\000\002\025" +
    "\005\000\002\025\005\000\002\025\006\000\002\025\006" +
    "\000\002\025\005\000\002\026\005\000\002\026\007\000" +
    "\002\026\007\000\002\026\011\000\002\026\007\000\002" +
    "\026\011\000\002\026\011\000\002\026\013\000\002\033" +
    "\003\000\002\033\005\000\002\033\007\000\002\033\007" +
    "\000\002\033\011\000\002\027\004\000\002\027\007\000" +
    "\002\027\011\000\002\030\004\000\002\031\003\000\002" +
    "\031\003\000\002\045\004\000\002\042\003\000\002\042" +
    "\005\000\002\046\006\000\002\043\002\000\002\043\003" +
    "\000\002\044\003\000\002\044\005\000\002\032\003\000" +
    "\002\032\004\000\002\032\003\000\002\034\002\000\002" +
    "\034\003\000\002\034\004\000\002\035\003\000\002\035" +
    "\005\000\002\036\002\000\002\036\003\000\002\036\004" +
    "\000\002\037\003\000\002\037\003\000\002\037\005\000" +
    "\002\037\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\060\002\uff89\005\013\007\043\023\uff8e\025" +
    "\030\026\037\027\007\031\027\032\040\040\005\041\023" +
    "\044\034\045\016\046\061\050\uff8e\051\022\053\052\055" +
    "\042\056\050\057\045\060\051\061\046\062\033\001\002" +
    "\000\076\002\uffeb\004\uffeb\006\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\030\uffeb\032\uffeb\033\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb" +
    "\044\uffeb\045\uffeb\050\uffeb\052\uffeb\054\uffeb\001\002\000" +
    "\040\005\013\007\043\025\030\026\037\027\007\032\040" +
    "\046\061\051\022\053\052\055\066\056\050\057\045\060" +
    "\070\061\046\062\033\001\002\000\006\023\304\050\303" +
    "\001\002\000\054\005\013\007\043\025\030\026\037\027" +
    "\007\030\272\031\027\032\040\040\005\041\023\044\034" +
    "\045\016\046\061\051\022\053\052\055\066\056\050\057" +
    "\045\060\070\061\046\062\033\001\002\000\076\002\uffb7" +
    "\004\uffb7\006\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014" +
    "\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\030\uffb7\032\uffb7\033\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7" +
    "\050\uffb7\052\uffb7\054\uffb7\001\002\000\060\002\uffd4\004" +
    "\uffd4\006\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\020\uffd4\022\uffd4\023\uffd4\024" +
    "\uffd4\030\uffd4\040\262\041\260\044\261\045\263\050\uffd4" +
    "\052\257\054\256\001\002\000\076\002\uff9b\004\uff9b\006" +
    "\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b" +
    "\016\uff9b\017\uff9b\020\uff9b\022\uff9b\023\uff9b\024\uff9b\030" +
    "\uff9b\032\uff9b\033\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b" +
    "\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\050\uff9b\052" +
    "\uff9b\054\uff9b\001\002\000\104\005\013\006\uff8e\007\043" +
    "\021\223\023\uff8e\025\030\026\037\027\007\031\027\032" +
    "\040\033\222\034\215\035\225\036\221\037\207\040\210" +
    "\041\216\042\212\043\213\044\217\045\214\046\230\050" +
    "\uff8e\051\022\052\220\053\052\054\224\055\042\056\050" +
    "\057\045\060\051\061\046\062\033\001\002\000\070\002" +
    "\uffd9\004\uffd9\006\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\030\uffd9\036\202\037\201\040\uffd9\041\uffd9" +
    "\042\200\043\177\044\uffd9\045\uffd9\050\uffd9\052\uffd9\054" +
    "\uffd9\001\002\000\076\002\uffe8\004\uffe8\006\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\022\uffe8\023\uffe8\024\uffe8\030\uffe8\032\uffe8" +
    "\033\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\044\uffe8\045\uffe8\050\uffe8\052\uffe8\054\uffe8" +
    "\001\002\000\040\005\013\007\043\025\030\026\037\027" +
    "\007\032\040\046\061\051\022\053\052\055\066\056\050" +
    "\057\045\060\070\061\046\062\033\001\002\000\004\002" +
    "\175\001\002\000\076\002\ufff0\004\ufff0\006\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017" +
    "\ufff0\020\ufff0\022\ufff0\023\ufff0\024\ufff0\030\ufff0\032\ufff0" +
    "\033\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042" +
    "\ufff0\043\ufff0\044\ufff0\045\ufff0\050\ufff0\052\ufff0\054\ufff0" +
    "\001\002\000\076\002\uffe9\004\uffe9\006\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\022\uffe9\023\uffe9\024\uffe9\030\uffe9\032\uffe9\033" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\045\uffe9\050\uffe9\052\uffe9\054\uffe9\001" +
    "\002\000\100\002\ufffc\004\ufffc\005\ufffc\006\ufffc\010\ufffc" +
    "\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017" +
    "\ufffc\020\ufffc\022\ufffc\023\ufffc\024\ufffc\030\ufffc\032\ufffc" +
    "\033\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042" +
    "\ufffc\043\ufffc\044\ufffc\045\ufffc\050\ufffc\052\ufffc\054\ufffc" +
    "\001\002\000\040\005\013\007\043\025\030\026\037\027" +
    "\007\032\040\046\061\051\022\053\052\055\066\056\050" +
    "\057\045\060\070\061\046\062\033\001\002\000\036\002" +
    "\uff86\004\074\010\uff86\011\uff86\012\uff86\013\uff86\014\uff86" +
    "\015\uff86\016\uff86\017\uff86\020\uff86\022\uff86\023\uff8d\050" +
    "\uff8d\001\002\000\072\002\uffde\004\uffde\006\uffde\010\uffde" +
    "\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017" +
    "\uffde\020\uffde\022\uffde\023\uffde\024\uffde\030\uffde\035\172" +
    "\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044" +
    "\uffde\045\uffde\050\uffde\052\uffde\054\uffde\001\002\000\044" +
    "\002\uff8f\004\uff8f\006\uff8f\010\uff8f\011\uff8f\012\uff8f\013" +
    "\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\022\uff8f" +
    "\023\uff8f\024\uff8f\030\uff8f\050\uff8f\001\002\000\050\005" +
    "\013\007\043\025\030\026\037\027\007\032\040\040\005" +
    "\041\023\044\034\045\016\046\061\051\022\053\052\055" +
    "\066\056\050\057\045\060\070\061\046\062\033\001\002" +
    "\000\006\032\144\060\143\001\002\000\030\002\uff88\010" +
    "\uff88\011\uff88\012\uff88\013\uff88\014\uff88\015\uff88\016\uff88" +
    "\017\uff88\020\uff88\022\153\001\002\000\076\002\uffea\004" +
    "\uffea\006\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\016\uffea\017\uffea\020\uffea\022\uffea\023\uffea\024" +
    "\uffea\030\uffea\032\uffea\033\uffea\035\uffea\036\uffea\037\uffea" +
    "\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea\050" +
    "\uffea\052\uffea\054\uffea\001\002\000\076\002\ufff3\004\ufff3" +
    "\006\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\022\ufff3\023\ufff3\024\ufff3" +
    "\030\ufff3\032\ufff3\033\ufff3\035\ufff3\036\ufff3\037\ufff3\040" +
    "\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\050\ufff3" +
    "\052\ufff3\054\ufff3\001\002\000\040\005\013\007\043\025" +
    "\030\026\037\027\007\032\040\046\061\051\022\053\052" +
    "\055\066\056\050\057\045\060\070\061\046\062\033\001" +
    "\002\000\076\002\uffe1\004\uffe1\006\uffe1\010\uffe1\011\uffe1" +
    "\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\022\uffe1\023\uffe1\024\uffe1\030\uffe1\032\146\033\147" +
    "\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043" +
    "\uffe1\044\uffe1\045\uffe1\050\uffe1\052\uffe1\054\uffe1\001\002" +
    "\000\076\002\uffe3\004\uffe3\006\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\030\uffe3\032\uffe3\033\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\050\uffe3\052\uffe3\054\uffe3\001\002\000" +
    "\006\032\144\060\143\001\002\000\104\002\ufffd\004\ufffd" +
    "\005\ufffd\006\ufffd\007\ufff7\010\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufff7" +
    "\022\ufffd\023\ufffd\024\ufffd\030\ufffd\032\ufffd\033\ufffd\035" +
    "\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd" +
    "\044\ufffd\045\ufffd\050\ufffd\052\ufffd\054\ufffd\001\002\000" +
    "\100\002\ufff2\004\ufff2\005\133\006\ufff2\010\ufff2\011\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\030\ufff2\032\ufff2\033\ufff2" +
    "\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\043" +
    "\ufff2\044\ufff2\045\ufff2\050\ufff2\052\ufff2\054\ufff2\001\002" +
    "\000\074\002\000\004\000\006\000\010\000\011\000\012" +
    "\000\013\000\014\000\015\000\016\000\017\000\020\000" +
    "\022\000\023\000\032\000\033\000\035\000\036\000\037" +
    "\000\040\000\041\000\042\000\043\000\044\000\045\000" +
    "\047\ufff5\050\000\052\000\054\000\001\002\000\100\005" +
    "\013\007\043\010\uff89\011\uff89\012\uff89\013\uff89\014\uff89" +
    "\015\uff89\016\uff89\017\uff89\020\uff89\023\uff8e\025\030\026" +
    "\037\027\007\031\027\032\040\040\005\041\023\044\034" +
    "\045\016\046\061\050\uff8e\051\022\053\052\055\042\056" +
    "\050\057\045\060\051\061\046\062\033\001\002\000\044" +
    "\002\uffcf\004\uffcf\006\uffcf\010\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\030\uffcf\050\uffcf\001\002\000\100\002" +
    "\ufffb\004\ufffb\005\ufffb\006\ufffb\010\ufffb\011\ufffb\012\ufffb" +
    "\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\022" +
    "\ufffb\023\ufffb\024\ufffb\030\ufffb\032\ufffb\033\ufffb\035\ufffb" +
    "\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044" +
    "\ufffb\045\ufffb\050\ufffb\052\ufffb\054\ufffb\001\002\000\100" +
    "\002\ufff9\004\ufff9\005\ufff9\006\ufff9\010\ufff9\011\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\022\ufff9\023\ufff9\024\ufff9\030\ufff9\032\ufff9\033\ufff9\035" +
    "\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9" +
    "\044\ufff9\045\ufff9\050\ufff9\052\ufff9\054\ufff9\001\002\000" +
    "\030\002\uff85\010\uff85\011\uff85\012\uff85\013\uff85\014\uff85" +
    "\015\uff85\016\uff85\017\uff85\020\uff85\022\uff85\001\002\000" +
    "\076\002\ufff4\004\ufff4\006\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\030\ufff4\032\ufff4\033\ufff4\035\ufff4" +
    "\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044" +
    "\ufff4\045\ufff4\050\ufff4\052\ufff4\054\ufff4\001\002\000\102" +
    "\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufff8\010\ufffe\011" +
    "\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe" +
    "\020\ufffe\021\ufff8\022\ufffe\023\ufffe\032\ufffe\033\ufffe\035" +
    "\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe" +
    "\044\ufffe\045\ufffe\047\ufff6\050\ufffe\052\ufffe\054\ufffe\001" +
    "\002\000\100\002\ufffa\004\ufffa\005\ufffa\006\ufffa\010\ufffa" +
    "\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\020\ufffa\022\ufffa\023\ufffa\024\ufffa\030\ufffa\032\ufffa" +
    "\033\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042" +
    "\ufffa\043\ufffa\044\ufffa\045\ufffa\050\ufffa\052\ufffa\054\ufffa" +
    "\001\002\000\042\002\uff8b\004\uff8b\006\uff8b\010\uff8b\011" +
    "\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b" +
    "\020\uff8b\022\uff8b\023\uff8b\024\uff8b\050\uff8b\001\002\000" +
    "\044\002\uffd1\004\uffd1\006\uffd1\010\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\030\uffd1\050\uffd1\001\002\000\044" +
    "\002\uff91\004\uff91\006\uff91\010\uff91\011\uff91\012\uff91\013" +
    "\uff91\014\uff91\015\uff91\016\uff91\017\uff91\020\uff91\022\uff91" +
    "\023\uff91\024\uff91\030\uff91\050\uff91\001\002\000\076\002" +
    "\uff9a\004\uff9a\006\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a" +
    "\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\022\uff9a\023" +
    "\uff9a\024\uff9a\030\uff9a\032\uff9a\033\uff9a\035\uff9a\036\uff9a" +
    "\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045" +
    "\uff9a\050\uff9a\052\uff9a\054\uff9a\001\002\000\076\002\uffec" +
    "\004\uffec\006\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014" +
    "\uffec\015\uffec\016\uffec\017\uffec\020\uffec\022\uffec\023\uffec" +
    "\024\uffec\030\uffec\032\uffec\033\uffec\035\uffec\036\uffec\037" +
    "\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec" +
    "\050\uffec\052\uffec\054\uffec\001\002\000\004\047\100\001" +
    "\002\000\004\055\077\001\002\000\006\007\043\021\063" +
    "\001\002\000\050\005\013\007\043\025\030\026\037\027" +
    "\007\032\040\040\005\041\023\044\034\045\016\046\061" +
    "\051\022\053\052\055\066\056\050\057\045\060\070\061" +
    "\046\062\033\001\002\000\076\002\uffb6\004\uffb6\006\uffb6" +
    "\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\022\uffb6\023\uffb6\024\uffb6\030\uffb6" +
    "\032\uffb6\033\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041" +
    "\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\050\uffb6\052\uffb6" +
    "\054\uffb6\001\002\000\100\002\ufff2\004\ufff2\005\071\006" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2" +
    "\016\ufff2\017\ufff2\020\ufff2\022\ufff2\023\ufff2\024\ufff2\030" +
    "\ufff2\032\ufff2\033\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2" +
    "\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\050\ufff2\052" +
    "\ufff2\054\ufff2\001\002\000\076\002\000\004\000\006\000" +
    "\010\000\011\000\012\000\013\000\014\000\015\000\016" +
    "\000\017\000\020\000\022\000\023\000\024\000\030\000" +
    "\032\000\033\000\035\000\036\000\037\000\040\000\041" +
    "\000\042\000\043\000\044\000\045\000\050\000\052\000" +
    "\054\000\001\002\000\044\002\uffd0\004\uffd0\006\uffd0\010" +
    "\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\022\uffd0\023\uffd0\024\uffd0\030\uffd0\050" +
    "\uffd0\001\002\000\104\002\ufffe\004\ufffe\005\ufffe\006\ufffe" +
    "\007\ufff8\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015" +
    "\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufff8\022\ufffe\023\ufffe" +
    "\024\ufffe\030\ufffe\032\ufffe\033\ufffe\035\ufffe\036\ufffe\037" +
    "\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe" +
    "\050\ufffe\052\ufffe\054\ufffe\001\002\000\054\005\013\006" +
    "\uff8e\007\043\025\030\026\037\027\007\031\027\032\040" +
    "\040\005\041\023\044\034\045\016\046\061\051\022\053" +
    "\052\055\066\056\050\057\045\060\070\061\046\062\033" +
    "\001\002\000\004\006\076\001\002\000\042\002\uff8d\004" +
    "\074\006\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d" +
    "\015\uff8d\016\uff8d\017\uff8d\020\uff8d\022\uff8d\023\uff8d\024" +
    "\uff8d\050\uff8d\001\002\000\110\002\uff8c\005\013\006\uff8c" +
    "\007\043\010\uff8c\011\uff8c\012\uff8c\013\uff8c\014\uff8c\015" +
    "\uff8c\016\uff8c\017\uff8c\020\uff8c\022\uff8c\023\uff8c\024\uff8c" +
    "\025\030\026\037\027\007\031\027\032\040\040\005\041" +
    "\023\044\034\045\016\046\061\050\uff8c\051\022\053\052" +
    "\055\066\056\050\057\045\060\070\061\046\062\033\001" +
    "\002\000\042\002\uff8a\004\uff8a\006\uff8a\010\uff8a\011\uff8a" +
    "\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020" +
    "\uff8a\022\uff8a\023\uff8a\024\uff8a\050\uff8a\001\002\000\076" +
    "\002\ufff1\004\ufff1\006\ufff1\010\ufff1\011\ufff1\012\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\022\ufff1" +
    "\023\ufff1\024\ufff1\030\ufff1\032\ufff1\033\ufff1\035\ufff1\036" +
    "\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1" +
    "\045\ufff1\050\ufff1\052\ufff1\054\ufff1\001\002\000\076\002" +
    "\uffff\004\uffff\006\uffff\010\uffff\011\uffff\012\uffff\013\uffff" +
    "\014\uffff\015\uffff\016\uffff\017\uffff\020\uffff\022\uffff\023" +
    "\uffff\024\uffff\030\uffff\032\uffff\033\uffff\035\uffff\036\uffff" +
    "\037\uffff\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045" +
    "\uffff\050\uffff\052\uffff\054\uffff\001\002\000\056\005\013" +
    "\007\043\023\uff8e\025\030\026\037\027\007\031\027\032" +
    "\040\040\005\041\023\044\034\045\016\046\061\050\uff8e" +
    "\051\022\053\052\055\066\056\050\057\045\060\070\061" +
    "\046\062\033\001\002\000\006\023\103\050\102\001\002" +
    "\000\102\002\uff8e\005\013\007\043\010\uff8e\011\uff8e\012" +
    "\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e" +
    "\022\uff8e\024\uff8e\025\030\026\037\027\007\031\027\032" +
    "\040\040\005\041\023\044\034\045\016\046\061\051\022" +
    "\053\052\055\066\056\050\057\045\060\070\061\046\062" +
    "\033\001\002\000\054\005\013\007\043\025\030\026\037" +
    "\027\007\031\027\032\040\040\005\041\023\044\034\045" +
    "\016\046\061\050\uff8e\051\022\053\052\055\066\056\050" +
    "\057\045\060\070\061\046\062\033\001\002\000\004\050" +
    "\105\001\002\000\102\002\uff8e\005\013\007\043\010\uff8e" +
    "\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017" +
    "\uff8e\020\uff8e\022\uff8e\024\uff8e\025\030\026\037\027\007" +
    "\031\027\032\040\040\005\041\023\044\034\045\016\046" +
    "\061\051\022\053\052\055\066\056\050\057\045\060\070" +
    "\061\046\062\033\001\002\000\032\002\uffa7\010\uffa7\011" +
    "\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7" +
    "\020\uffa7\022\uffa7\024\107\001\002\000\100\002\uff8e\005" +
    "\013\007\043\010\uff8e\011\uff8e\012\uff8e\013\uff8e\014\uff8e" +
    "\015\uff8e\016\uff8e\017\uff8e\020\uff8e\022\uff8e\025\030\026" +
    "\037\027\007\031\027\032\040\040\005\041\023\044\034" +
    "\045\016\046\061\051\022\053\052\055\066\056\050\057" +
    "\045\060\070\061\046\062\033\001\002\000\030\002\uffa5" +
    "\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016" +
    "\uffa5\017\uffa5\020\uffa5\022\uffa5\001\002\000\032\002\uffab" +
    "\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016" +
    "\uffab\017\uffab\020\uffab\022\uffab\024\112\001\002\000\100" +
    "\002\uff8e\005\013\007\043\010\uff8e\011\uff8e\012\uff8e\013" +
    "\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\022\uff8e" +
    "\025\030\026\037\027\007\031\027\032\040\040\005\041" +
    "\023\044\034\045\016\046\061\051\022\053\052\055\066" +
    "\056\050\057\045\060\070\061\046\062\033\001\002\000" +
    "\030\002\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9" +
    "\015\uffa9\016\uffa9\017\uffa9\020\uffa9\022\uffa9\001\002\000" +
    "\024\010\124\011\123\012\121\013\117\014\116\015\120" +
    "\016\125\017\122\020\115\001\002\000\076\002\uffad\004" +
    "\uffad\006\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad" +
    "\015\uffad\016\uffad\017\uffad\020\uffad\022\uffad\023\uffad\024" +
    "\uffad\030\uffad\032\uffad\033\uffad\035\uffad\036\uffad\037\uffad" +
    "\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\050" +
    "\uffad\052\uffad\054\uffad\001\002\000\076\002\uffb0\004\uffb0" +
    "\006\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015" +
    "\uffb0\016\uffb0\017\uffb0\020\uffb0\022\uffb0\023\uffb0\024\uffb0" +
    "\030\uffb0\032\uffb0\033\uffb0\035\uffb0\036\uffb0\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\050\uffb0" +
    "\052\uffb0\054\uffb0\001\002\000\040\005\013\007\043\025" +
    "\030\026\037\027\007\032\040\046\061\051\022\053\052" +
    "\055\066\056\050\057\045\060\070\061\046\062\033\001" +
    "\002\000\076\002\uffb1\004\uffb1\006\uffb1\010\uffb1\011\uffb1" +
    "\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020" +
    "\uffb1\022\uffb1\023\uffb1\024\uffb1\030\uffb1\032\uffb1\033\uffb1" +
    "\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043" +
    "\uffb1\044\uffb1\045\uffb1\050\uffb1\052\uffb1\054\uffb1\001\002" +
    "\000\040\005\013\007\043\025\030\026\037\027\007\032" +
    "\040\046\061\051\022\053\052\055\066\056\050\057\045" +
    "\060\070\061\046\062\033\001\002\000\040\005\013\007" +
    "\043\025\030\026\037\027\007\032\040\046\061\051\022" +
    "\053\052\055\066\056\050\057\045\060\070\061\046\062" +
    "\033\001\002\000\076\002\uffb5\004\uffb5\006\uffb5\010\uffb5" +
    "\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017" +
    "\uffb5\020\uffb5\022\uffb5\023\uffb5\024\uffb5\030\uffb5\032\uffb5" +
    "\033\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042" +
    "\uffb5\043\uffb5\044\uffb5\045\uffb5\050\uffb5\052\uffb5\054\uffb5" +
    "\001\002\000\076\002\uffb4\004\uffb4\006\uffb4\010\uffb4\011" +
    "\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4" +
    "\020\uffb4\022\uffb4\023\uffb4\024\uffb4\030\uffb4\032\uffb4\033" +
    "\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\044\uffb4\045\uffb4\050\uffb4\052\uffb4\054\uffb4\001" +
    "\002\000\040\005\013\007\043\025\030\026\037\027\007" +
    "\032\040\046\061\051\022\053\052\055\066\056\050\057" +
    "\045\060\070\061\046\062\033\001\002\000\004\007\043" +
    "\001\002\000\076\002\uffae\004\uffae\006\uffae\010\uffae\011" +
    "\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae" +
    "\020\uffae\022\uffae\023\uffae\024\uffae\030\uffae\032\uffae\033" +
    "\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae" +
    "\043\uffae\044\uffae\045\uffae\050\uffae\052\uffae\054\uffae\001" +
    "\002\000\076\002\uffaf\004\uffaf\006\uffaf\010\uffaf\011\uffaf" +
    "\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020" +
    "\uffaf\022\uffaf\023\uffaf\024\uffaf\030\uffaf\032\uffaf\033\uffaf" +
    "\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043" +
    "\uffaf\044\uffaf\045\uffaf\050\uffaf\052\uffaf\054\uffaf\001\002" +
    "\000\076\002\uffb2\004\uffb2\006\uffb2\010\uffb2\011\uffb2\012" +
    "\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\030\uffb2\032\uffb2\033\uffb2\035" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\045\uffb2\050\uffb2\052\uffb2\054\uffb2\001\002\000" +
    "\076\002\uffb3\004\uffb3\006\uffb3\010\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\022" +
    "\uffb3\023\uffb3\024\uffb3\030\uffb3\032\uffb3\033\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044" +
    "\uffb3\045\uffb3\050\uffb3\052\uffb3\054\uffb3\001\002\000\056" +
    "\005\013\006\uff8e\007\043\025\030\026\037\027\007\031" +
    "\027\032\040\040\005\041\023\042\134\044\034\045\016" +
    "\046\061\051\022\053\052\055\066\056\050\057\045\060" +
    "\070\061\046\062\033\001\002\000\004\055\142\001\002" +
    "\000\006\004\uff98\006\uff98\001\002\000\006\004\137\006" +
    "\140\001\002\000\004\042\134\001\002\000\044\002\uff96" +
    "\004\uff96\006\uff96\010\uff96\011\uff96\012\uff96\013\uff96\014" +
    "\uff96\015\uff96\016\uff96\017\uff96\020\uff96\022\uff96\023\uff96" +
    "\024\uff96\030\uff96\050\uff96\001\002\000\006\004\uff97\006" +
    "\uff97\001\002\000\010\004\uff99\006\uff99\030\uff99\001\002" +
    "\000\100\002\ufff8\004\ufff8\006\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\027\ufff8\030\ufff8\032\ufff8\033" +
    "\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8" +
    "\043\ufff8\044\ufff8\045\ufff8\050\ufff8\052\ufff8\054\ufff8\001" +
    "\002\000\100\002\ufff7\004\ufff7\006\ufff7\010\ufff7\011\ufff7" +
    "\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\022\ufff7\023\ufff7\024\ufff7\027\ufff7\030\ufff7\032\ufff7" +
    "\033\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042" +
    "\ufff7\043\ufff7\044\ufff7\045\ufff7\050\ufff7\052\ufff7\054\ufff7" +
    "\001\002\000\076\002\uff9c\004\uff9c\006\uff9c\010\uff9c\011" +
    "\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c" +
    "\020\uff9c\022\uff9c\023\uff9c\024\uff9c\030\uff9c\032\uff9c\033" +
    "\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c" +
    "\043\uff9c\044\uff9c\045\uff9c\050\uff9c\052\uff9c\054\uff9c\001" +
    "\002\000\050\005\013\007\043\025\030\026\037\027\007" +
    "\032\040\040\005\041\023\044\034\045\016\046\061\051" +
    "\022\053\052\055\066\056\050\057\045\060\070\061\046" +
    "\062\033\001\002\000\050\005\013\007\043\025\030\026" +
    "\037\027\007\032\040\040\005\041\023\044\034\045\016" +
    "\046\061\051\022\053\052\055\066\056\050\057\045\060" +
    "\070\061\046\062\033\001\002\000\076\002\uffe2\004\uffe2" +
    "\006\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\030\uffe2\032\uffe2\033\uffe2\035\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\050\uffe2" +
    "\052\uffe2\054\uffe2\001\002\000\074\002\uffe0\004\uffe0\006" +
    "\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\022\uffe0\023\uffe0\024\uffe0\030" +
    "\uffe0\033\147\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\043\uffe0\044\uffe0\045\uffe0\050\uffe0\052\uffe0\054" +
    "\uffe0\001\002\000\076\002\uffe7\004\uffe7\006\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\022\uffe7\023\uffe7\024\uffe7\030\uffe7\032\uffe7" +
    "\033\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042" +
    "\uffe7\043\uffe7\044\uffe7\045\uffe7\050\uffe7\052\uffe7\054\uffe7" +
    "\001\002\000\102\002\uff87\005\013\007\043\010\uff87\011" +
    "\uff87\012\uff87\013\uff87\014\uff87\015\uff87\016\uff87\017\uff87" +
    "\020\uff87\023\uff8e\025\030\026\037\027\007\031\027\032" +
    "\040\040\005\041\023\044\034\045\016\046\061\050\uff8e" +
    "\051\022\053\052\055\042\056\050\057\045\060\051\061" +
    "\046\062\033\001\002\000\036\002\uff83\004\074\010\uff83" +
    "\011\uff83\012\uff83\013\uff83\014\uff83\015\uff83\016\uff83\017" +
    "\uff83\020\uff83\022\uff83\023\uff8d\050\uff8d\001\002\000\030" +
    "\002\uff84\010\uff84\011\uff84\012\uff84\013\uff84\014\uff84\015" +
    "\uff84\016\uff84\017\uff84\020\uff84\022\uff84\001\002\000\100" +
    "\002\uff9f\004\uff9f\006\uff9f\010\uff9f\011\uff9f\012\uff9f\013" +
    "\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\022\uff9f" +
    "\023\uff9f\024\uff9f\027\157\030\uff9f\032\uff9f\033\uff9f\035" +
    "\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f" +
    "\044\uff9f\045\uff9f\050\uff9f\052\uff9f\054\uff9f\001\002\000" +
    "\010\024\uff95\030\uff95\055\066\001\002\000\010\004\uff93" +
    "\024\uff93\030\uff93\001\002\000\006\024\166\030\165\001" +
    "\002\000\010\004\163\024\uff94\030\uff94\001\002\000\004" +
    "\055\066\001\002\000\010\004\uff92\024\uff92\030\uff92\001" +
    "\002\000\076\002\uff9e\004\uff9e\006\uff9e\010\uff9e\011\uff9e" +
    "\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020" +
    "\uff9e\022\uff9e\023\uff9e\024\uff9e\030\uff9e\032\uff9e\033\uff9e" +
    "\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043" +
    "\uff9e\044\uff9e\045\uff9e\050\uff9e\052\uff9e\054\uff9e\001\002" +
    "\000\004\042\134\001\002\000\004\030\170\001\002\000" +
    "\076\002\uff9d\004\uff9d\006\uff9d\010\uff9d\011\uff9d\012\uff9d" +
    "\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\022" +
    "\uff9d\023\uff9d\024\uff9d\030\uff9d\032\uff9d\033\uff9d\035\uff9d" +
    "\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044" +
    "\uff9d\045\uff9d\050\uff9d\052\uff9d\054\uff9d\001\002\000\044" +
    "\002\uff90\004\uff90\006\uff90\010\uff90\011\uff90\012\uff90\013" +
    "\uff90\014\uff90\015\uff90\016\uff90\017\uff90\020\uff90\022\uff90" +
    "\023\uff90\024\uff90\030\uff90\050\uff90\001\002\000\050\005" +
    "\013\007\043\025\030\026\037\027\007\032\040\040\005" +
    "\041\023\044\034\045\016\046\061\051\022\053\052\055" +
    "\066\056\050\057\045\060\070\061\046\062\033\001\002" +
    "\000\074\002\uffdf\004\uffdf\006\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\030\uffdf\033\147\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf" +
    "\045\uffdf\050\uffdf\052\uffdf\054\uffdf\001\002\000\076\002" +
    "\uffe4\004\uffe4\006\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\030\uffe4\032\uffe4\033\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045" +
    "\uffe4\050\uffe4\052\uffe4\054\uffe4\001\002\000\004\002\001" +
    "\001\002\000\076\002\uffe6\004\uffe6\006\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\022\uffe6\023\uffe6\024\uffe6\030\uffe6\032\uffe6\033" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6" +
    "\043\uffe6\044\uffe6\045\uffe6\050\uffe6\052\uffe6\054\uffe6\001" +
    "\002\000\050\005\013\007\043\025\030\026\037\027\007" +
    "\032\040\040\005\041\023\044\034\045\016\046\061\051" +
    "\022\053\052\055\066\056\050\057\045\060\070\061\046" +
    "\062\033\001\002\000\050\005\013\007\043\025\030\026" +
    "\037\027\007\032\040\040\005\041\023\044\034\045\016" +
    "\046\061\051\022\053\052\055\066\056\050\057\045\060" +
    "\070\061\046\062\033\001\002\000\050\005\013\007\043" +
    "\025\030\026\037\027\007\032\040\040\005\041\023\044" +
    "\034\045\016\046\061\051\022\053\052\055\066\056\050" +
    "\057\045\060\070\061\046\062\033\001\002\000\050\005" +
    "\013\007\043\025\030\026\037\027\007\032\040\040\005" +
    "\041\023\044\034\045\016\046\061\051\022\053\052\055" +
    "\066\056\050\057\045\060\070\061\046\062\033\001\002" +
    "\000\072\002\uffdd\004\uffdd\006\uffdd\010\uffdd\011\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\030\uffdd\035\172\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd" +
    "\050\uffdd\052\uffdd\054\uffdd\001\002\000\072\002\uffdc\004" +
    "\uffdc\006\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\030\uffdc\035\172\036\uffdc\037\uffdc\040\uffdc\041\uffdc" +
    "\042\uffdc\043\uffdc\044\uffdc\045\uffdc\050\uffdc\052\uffdc\054" +
    "\uffdc\001\002\000\072\002\uffdb\004\uffdb\006\uffdb\010\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\022\uffdb\023\uffdb\024\uffdb\030\uffdb\035\172" +
    "\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044" +
    "\uffdb\045\uffdb\050\uffdb\052\uffdb\054\uffdb\001\002\000\072" +
    "\002\uffda\004\uffda\006\uffda\010\uffda\011\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\022\uffda" +
    "\023\uffda\024\uffda\030\uffda\035\172\036\uffda\037\uffda\040" +
    "\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\050\uffda" +
    "\052\uffda\054\uffda\001\002\000\004\006\uffc6\001\002\000" +
    "\042\005\013\006\uffc9\007\043\025\030\026\037\027\007" +
    "\032\040\046\061\051\022\053\052\055\066\056\050\057" +
    "\045\060\070\061\046\062\033\001\002\000\010\006\234" +
    "\023\236\050\233\001\002\000\004\006\uffcb\001\002\000" +
    "\004\006\uffca\001\002\000\042\005\013\006\uffcd\007\043" +
    "\025\030\026\037\027\007\032\040\046\061\051\022\053" +
    "\052\055\066\056\050\057\045\060\070\061\046\062\033" +
    "\001\002\000\004\006\uffc2\001\002\000\042\005\013\006" +
    "\uffc8\007\043\025\030\026\037\027\007\032\040\046\061" +
    "\051\022\053\052\055\066\056\050\057\045\060\070\061" +
    "\046\062\033\001\002\000\042\005\013\006\uffce\007\043" +
    "\025\030\026\037\027\007\032\040\046\061\051\022\053" +
    "\052\055\066\056\050\057\045\060\070\061\046\062\033" +
    "\001\002\000\004\006\uffc5\001\002\000\004\006\uffc7\001" +
    "\002\000\004\006\uffc3\001\002\000\004\006\uffc1\001\002" +
    "\000\004\006\uffc4\001\002\000\004\006\uffc0\001\002\000" +
    "\004\006\253\001\002\000\004\047\231\001\002\000\006" +
    "\006\uffcc\055\077\001\002\000\060\005\013\006\uff8e\007" +
    "\043\023\uff8e\025\030\026\037\027\007\031\027\032\040" +
    "\040\005\041\023\044\034\045\016\046\061\050\uff8e\051" +
    "\022\053\052\055\066\056\050\057\045\060\070\061\046" +
    "\062\033\001\002\000\010\006\234\023\236\050\233\001" +
    "\002\000\056\005\013\006\uff8e\007\043\024\uff8e\025\030" +
    "\026\037\027\007\031\027\032\040\040\005\041\023\044" +
    "\034\045\016\046\061\051\022\053\052\055\066\056\050" +
    "\057\045\060\070\061\046\062\033\001\002\000\076\002" +
    "\uffa4\004\uffa4\006\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4" +
    "\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\022\uffa4\023" +
    "\uffa4\024\uffa4\030\uffa4\032\uffa4\033\uffa4\035\uffa4\036\uffa4" +
    "\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045" +
    "\uffa4\050\uffa4\052\uffa4\054\uffa4\001\002\000\076\002\uffef" +
    "\004\uffef\006\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\016\uffef\017\uffef\020\uffef\022\uffef\023\uffef" +
    "\024\uffef\030\uffef\032\uffef\033\uffef\035\uffef\036\uffef\037" +
    "\uffef\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef" +
    "\050\uffef\052\uffef\054\uffef\001\002\000\054\005\013\007" +
    "\043\025\030\026\037\027\007\031\027\032\040\040\005" +
    "\041\023\044\034\045\016\046\061\050\uff8e\051\022\053" +
    "\052\055\066\056\050\057\045\060\070\061\046\062\033" +
    "\001\002\000\004\050\240\001\002\000\056\005\013\006" +
    "\uff8e\007\043\024\uff8e\025\030\026\037\027\007\031\027" +
    "\032\040\040\005\041\023\044\034\045\016\046\061\051" +
    "\022\053\052\055\066\056\050\057\045\060\070\061\046" +
    "\062\033\001\002\000\006\006\242\024\243\001\002\000" +
    "\076\002\uffa1\004\uffa1\006\uffa1\010\uffa1\011\uffa1\012\uffa1" +
    "\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\022" +
    "\uffa1\023\uffa1\024\uffa1\030\uffa1\032\uffa1\033\uffa1\035\uffa1" +
    "\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044" +
    "\uffa1\045\uffa1\050\uffa1\052\uffa1\054\uffa1\001\002\000\054" +
    "\005\013\006\uff8e\007\043\025\030\026\037\027\007\031" +
    "\027\032\040\040\005\041\023\044\034\045\016\046\061" +
    "\051\022\053\052\055\066\056\050\057\045\060\070\061" +
    "\046\062\033\001\002\000\004\006\245\001\002\000\076" +
    "\002\uffa0\004\uffa0\006\uffa0\010\uffa0\011\uffa0\012\uffa0\013" +
    "\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\022\uffa0" +
    "\023\uffa0\024\uffa0\030\uffa0\032\uffa0\033\uffa0\035\uffa0\036" +
    "\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0" +
    "\045\uffa0\050\uffa0\052\uffa0\054\uffa0\001\002\000\006\006" +
    "\247\024\250\001\002\000\076\002\uffa3\004\uffa3\006\uffa3" +
    "\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016" +
    "\uffa3\017\uffa3\020\uffa3\022\uffa3\023\uffa3\024\uffa3\030\uffa3" +
    "\032\uffa3\033\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041" +
    "\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\050\uffa3\052\uffa3" +
    "\054\uffa3\001\002\000\054\005\013\006\uff8e\007\043\025" +
    "\030\026\037\027\007\031\027\032\040\040\005\041\023" +
    "\044\034\045\016\046\061\051\022\053\052\055\066\056" +
    "\050\057\045\060\070\061\046\062\033\001\002\000\004" +
    "\006\252\001\002\000\076\002\uffa2\004\uffa2\006\uffa2\010" +
    "\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2" +
    "\017\uffa2\020\uffa2\022\uffa2\023\uffa2\024\uffa2\030\uffa2\032" +
    "\uffa2\033\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2" +
    "\042\uffa2\043\uffa2\044\uffa2\045\uffa2\050\uffa2\052\uffa2\054" +
    "\uffa2\001\002\000\076\002\uffed\004\uffed\006\uffed\010\uffed" +
    "\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\022\uffed\023\uffed\024\uffed\030\uffed\032\uffed" +
    "\033\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042" +
    "\uffed\043\uffed\044\uffed\045\uffed\050\uffed\052\uffed\054\uffed" +
    "\001\002\000\076\002\uffee\004\uffee\006\uffee\010\uffee\011" +
    "\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee" +
    "\020\uffee\022\uffee\023\uffee\024\uffee\030\uffee\032\uffee\033" +
    "\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee" +
    "\043\uffee\044\uffee\045\uffee\050\uffee\052\uffee\054\uffee\001" +
    "\002\000\076\002\uffe5\004\uffe5\006\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\022\uffe5\023\uffe5\024\uffe5\030\uffe5\032\uffe5\033\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043" +
    "\uffe5\044\uffe5\045\uffe5\050\uffe5\052\uffe5\054\uffe5\001\002" +
    "\000\050\005\013\007\043\025\030\026\037\027\007\032" +
    "\040\040\005\041\023\044\034\045\016\046\061\051\022" +
    "\053\052\055\066\056\050\057\045\060\070\061\046\062" +
    "\033\001\002\000\050\005\013\007\043\025\030\026\037" +
    "\027\007\032\040\040\005\041\023\044\034\045\016\046" +
    "\061\051\022\053\052\055\066\056\050\057\045\060\070" +
    "\061\046\062\033\001\002\000\050\005\013\007\043\025" +
    "\030\026\037\027\007\032\040\040\005\041\023\044\034" +
    "\045\016\046\061\051\022\053\052\055\066\056\050\057" +
    "\045\060\070\061\046\062\033\001\002\000\050\005\013" +
    "\007\043\025\030\026\037\027\007\032\040\040\005\041" +
    "\023\044\034\045\016\046\061\051\022\053\052\055\066" +
    "\056\050\057\045\060\070\061\046\062\033\001\002\000" +
    "\050\005\013\007\043\025\030\026\037\027\007\032\040" +
    "\040\005\041\023\044\034\045\016\046\061\051\022\053" +
    "\052\055\066\056\050\057\045\060\070\061\046\062\033" +
    "\001\002\000\050\005\013\007\043\025\030\026\037\027" +
    "\007\032\040\040\005\041\023\044\034\045\016\046\061" +
    "\051\022\053\052\055\066\056\050\057\045\060\070\061" +
    "\046\062\033\001\002\000\070\002\uffd6\004\uffd6\006\uffd6" +
    "\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\017\uffd6\020\uffd6\022\uffd6\023\uffd6\024\uffd6\030\uffd6" +
    "\036\202\037\201\040\uffd6\041\uffd6\042\200\043\177\044" +
    "\uffd6\045\uffd6\050\uffd6\052\uffd6\054\uffd6\001\002\000\070" +
    "\002\uffd7\004\uffd7\006\uffd7\010\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\030\uffd7\036\202\037\201\040\uffd7\041" +
    "\uffd7\042\200\043\177\044\uffd7\045\uffd7\050\uffd7\052\uffd7" +
    "\054\uffd7\001\002\000\070\002\uffd5\004\uffd5\006\uffd5\010" +
    "\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\022\uffd5\023\uffd5\024\uffd5\030\uffd5\036" +
    "\202\037\201\040\uffd5\041\uffd5\042\200\043\177\044\uffd5" +
    "\045\uffd5\050\uffd5\052\uffd5\054\uffd5\001\002\000\070\002" +
    "\uffd8\004\uffd8\006\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\030\uffd8\036\202\037\201\040\uffd8\041\uffd8" +
    "\042\200\043\177\044\uffd8\045\uffd8\050\uffd8\052\uffd8\054" +
    "\uffd8\001\002\000\054\002\uffd2\004\uffd2\006\uffd2\010\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017" +
    "\uffd2\020\uffd2\022\uffd2\023\uffd2\024\uffd2\030\uffd2\040\262" +
    "\041\260\044\261\045\263\050\uffd2\001\002\000\054\002" +
    "\uffd3\004\uffd3\006\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3" +
    "\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\022\uffd3\023" +
    "\uffd3\024\uffd3\030\uffd3\040\262\041\260\044\261\045\263" +
    "\050\uffd3\001\002\000\076\002\uffbf\004\uffbf\006\uffbf\010" +
    "\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\022\uffbf\023\uffbf\024\uffbf\030\uffbf\032" +
    "\uffbf\033\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf" +
    "\042\uffbf\043\uffbf\044\uffbf\045\uffbf\050\uffbf\052\uffbf\054" +
    "\uffbf\001\002\000\010\004\274\024\276\030\uffbb\001\002" +
    "\000\052\005\013\007\043\025\030\026\037\027\007\031" +
    "\027\032\040\040\005\041\023\044\034\045\016\046\061" +
    "\051\022\053\052\055\066\056\050\057\045\060\070\061" +
    "\046\062\033\001\002\000\004\030\300\001\002\000\052" +
    "\005\013\007\043\025\030\026\037\027\007\031\027\032" +
    "\040\040\005\041\023\044\034\045\016\046\061\051\022" +
    "\053\052\055\066\056\050\057\045\060\070\061\046\062" +
    "\033\001\002\000\004\030\uffbd\001\002\000\076\002\uffbe" +
    "\004\uffbe\006\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\030\uffbe\032\uffbe\033\uffbe\035\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe" +
    "\050\uffbe\052\uffbe\054\uffbe\001\002\000\010\004\274\024" +
    "\276\030\uffbb\001\002\000\004\030\uffbc\001\002\000\102" +
    "\002\uff8e\005\013\007\043\010\uff8e\011\uff8e\012\uff8e\013" +
    "\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\022\uff8e" +
    "\024\uff8e\025\030\026\037\027\007\031\027\032\040\040" +
    "\005\041\023\044\034\045\016\046\061\051\022\053\052" +
    "\055\066\056\050\057\045\060\070\061\046\062\033\001" +
    "\002\000\054\005\013\007\043\025\030\026\037\027\007" +
    "\031\027\032\040\040\005\041\023\044\034\045\016\046" +
    "\061\050\uff8e\051\022\053\052\055\066\056\050\057\045" +
    "\060\070\061\046\062\033\001\002\000\004\050\306\001" +
    "\002\000\102\002\uff8e\005\013\007\043\010\uff8e\011\uff8e" +
    "\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020" +
    "\uff8e\022\uff8e\024\uff8e\025\030\026\037\027\007\031\027" +
    "\032\040\040\005\041\023\044\034\045\016\046\061\051" +
    "\022\053\052\055\066\056\050\057\045\060\070\061\046" +
    "\062\033\001\002\000\032\002\uffa8\010\uffa8\011\uffa8\012" +
    "\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8" +
    "\022\uffa8\024\310\001\002\000\100\002\uff8e\005\013\007" +
    "\043\010\uff8e\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e" +
    "\016\uff8e\017\uff8e\020\uff8e\022\uff8e\025\030\026\037\027" +
    "\007\031\027\032\040\040\005\041\023\044\034\045\016" +
    "\046\061\051\022\053\052\055\066\056\050\057\045\060" +
    "\070\061\046\062\033\001\002\000\030\002\uffa6\010\uffa6" +
    "\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017" +
    "\uffa6\020\uffa6\022\uffa6\001\002\000\032\002\uffac\010\uffac" +
    "\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017" +
    "\uffac\020\uffac\022\uffac\024\313\001\002\000\100\002\uff8e" +
    "\005\013\007\043\010\uff8e\011\uff8e\012\uff8e\013\uff8e\014" +
    "\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\022\uff8e\025\030" +
    "\026\037\027\007\031\027\032\040\040\005\041\023\044" +
    "\034\045\016\046\061\051\022\053\052\055\066\056\050" +
    "\057\045\060\070\061\046\062\033\001\002\000\030\002" +
    "\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa" +
    "\016\uffaa\017\uffaa\020\uffaa\022\uffaa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\070\003\003\004\031\005\040\006\061\007" +
    "\057\011\014\012\035\013\034\014\024\015\013\016\010" +
    "\017\053\020\043\021\054\024\020\025\007\026\046\027" +
    "\011\030\055\031\056\032\052\034\005\035\023\036\016" +
    "\037\030\040\017\046\025\001\001\000\002\001\001\000" +
    "\030\003\003\004\031\005\064\006\125\011\254\024\020" +
    "\025\007\027\011\030\055\031\056\040\017\001\001\000" +
    "\002\001\001\000\054\003\003\004\031\005\040\006\061" +
    "\011\014\012\035\013\034\014\024\015\013\016\010\017" +
    "\053\020\043\021\054\024\020\025\007\027\011\030\055" +
    "\031\056\032\272\040\017\046\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\003\003" +
    "\004\031\005\040\006\061\007\226\010\225\011\014\012" +
    "\035\013\034\014\024\015\013\016\010\017\053\020\043" +
    "\021\054\024\020\025\007\027\011\030\055\031\056\032" +
    "\052\034\210\035\072\040\017\046\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\003\004\031\005" +
    "\064\006\125\011\175\024\020\025\007\027\011\030\055" +
    "\031\056\040\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\003" +
    "\004\031\005\064\006\125\011\173\024\020\025\007\027" +
    "\011\030\055\031\056\040\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\003\003\004" +
    "\031\005\064\006\061\011\014\012\035\013\034\014\024" +
    "\015\013\016\010\017\053\020\043\021\170\024\020\025" +
    "\007\027\011\030\055\031\056\040\017\001\001\000\004" +
    "\006\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\003\004\031\005\064\006\125" +
    "\011\151\024\020\025\007\027\011\030\055\031\056\040" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\003\003\004\031\005\040\006\061" +
    "\007\057\011\014\012\035\013\034\014\024\015\013\016" +
    "\010\017\053\020\043\021\054\024\020\025\007\026\046" +
    "\027\011\030\055\031\056\032\052\034\005\035\023\036" +
    "\113\037\030\040\017\046\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\063\001\001\000\046\003\003\004\031\005" +
    "\064\006\061\011\014\012\035\013\034\014\024\015\013" +
    "\016\010\017\053\020\066\024\020\025\007\027\011\030" +
    "\055\031\056\040\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\003\003\004\031\005\040\006\061\011\014" +
    "\012\035\013\034\014\024\015\013\016\010\017\053\020" +
    "\043\021\054\024\020\025\007\027\011\030\055\031\056" +
    "\032\052\034\071\035\072\040\017\046\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\003\003\004\031" +
    "\005\040\006\061\011\014\012\035\013\034\014\024\015" +
    "\013\016\010\017\053\020\043\021\054\024\020\025\007" +
    "\027\011\030\055\031\056\032\074\040\017\046\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\003\003\004\031\005\040\006\061\011\014\012" +
    "\035\013\034\014\024\015\013\016\010\017\053\020\043" +
    "\021\054\024\020\025\007\027\011\030\055\031\056\032" +
    "\052\034\100\035\072\040\017\046\025\001\001\000\002" +
    "\001\001\000\060\003\003\004\031\005\040\006\061\011" +
    "\014\012\035\013\034\014\024\015\013\016\010\017\053" +
    "\020\043\021\054\024\020\025\007\027\011\030\055\031" +
    "\056\032\052\034\110\035\072\040\017\046\025\001\001" +
    "\000\060\003\003\004\031\005\040\006\061\011\014\012" +
    "\035\013\034\014\024\015\013\016\010\017\053\020\043" +
    "\021\054\024\020\025\007\027\011\030\055\031\056\032" +
    "\052\034\103\035\072\040\017\046\025\001\001\000\002" +
    "\001\001\000\060\003\003\004\031\005\040\006\061\011" +
    "\014\012\035\013\034\014\024\015\013\016\010\017\053" +
    "\020\043\021\054\024\020\025\007\027\011\030\055\031" +
    "\056\032\052\034\105\035\072\040\017\046\025\001\001" +
    "\000\002\001\001\000\060\003\003\004\031\005\040\006" +
    "\061\011\014\012\035\013\034\014\024\015\013\016\010" +
    "\017\053\020\043\021\054\024\020\025\007\027\011\030" +
    "\055\031\056\032\052\034\107\035\072\040\017\046\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\003" +
    "\003\004\031\005\040\006\061\011\014\012\035\013\034" +
    "\014\024\015\013\016\010\017\053\020\043\021\054\024" +
    "\020\025\007\027\011\030\055\031\056\032\052\034\112" +
    "\035\072\040\017\046\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\003\004\031\005\064\006\125\011\131\024\020\025" +
    "\007\027\011\030\055\031\056\040\017\001\001\000\002" +
    "\001\001\000\030\003\003\004\031\005\064\006\125\011" +
    "\130\024\020\025\007\027\011\030\055\031\056\040\017" +
    "\001\001\000\030\003\003\004\031\005\064\006\125\011" +
    "\127\024\020\025\007\027\011\030\055\031\056\040\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\003\004\031\005\064\006\125\011\126\024\020\025\007" +
    "\027\011\030\055\031\056\040\017\001\001\000\004\025" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\003\003\004\031\005" +
    "\040\006\061\011\014\012\035\013\034\014\024\015\013" +
    "\016\010\017\053\020\043\021\054\024\020\025\007\027" +
    "\011\030\055\031\056\032\052\034\071\035\072\040\017" +
    "\042\135\045\134\046\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\003\004\031\005\064\006\125\011\014\012\035\013" +
    "\150\024\020\025\007\027\011\030\055\031\056\040\017" +
    "\001\001\000\032\003\003\004\031\005\064\006\125\011" +
    "\014\012\147\024\020\025\007\027\011\030\055\031\056" +
    "\040\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\003\003\004\031\005\040\006\061" +
    "\007\057\011\014\012\035\013\034\014\024\015\013\016" +
    "\010\017\053\020\043\021\054\024\020\025\007\026\154" +
    "\027\011\030\055\031\056\032\052\034\005\035\153\040" +
    "\017\046\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\157\043\160\044\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\003\004\031\005" +
    "\064\006\125\011\014\012\035\013\172\024\020\025\007" +
    "\027\011\030\055\031\056\040\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\003\004\031\005\064\006\125\011\014\012" +
    "\035\013\034\014\205\024\020\025\007\027\011\030\055" +
    "\031\056\040\017\001\001\000\036\003\003\004\031\005" +
    "\064\006\125\011\014\012\035\013\034\014\204\024\020" +
    "\025\007\027\011\030\055\031\056\040\017\001\001\000" +
    "\036\003\003\004\031\005\064\006\125\011\014\012\035" +
    "\013\034\014\203\024\020\025\007\027\011\030\055\031" +
    "\056\040\017\001\001\000\036\003\003\004\031\005\064" +
    "\006\125\011\014\012\035\013\034\014\202\024\020\025" +
    "\007\027\011\030\055\031\056\040\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\003\004\031\005\064" +
    "\006\125\011\254\024\020\025\007\027\011\030\055\031" +
    "\056\040\017\001\001\000\004\033\253\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\003\004\031\005" +
    "\064\006\125\011\175\024\020\025\007\027\011\030\055" +
    "\031\056\040\017\001\001\000\002\001\001\000\030\003" +
    "\003\004\031\005\064\006\125\011\173\024\020\025\007" +
    "\027\011\030\055\031\056\040\017\001\001\000\030\003" +
    "\003\004\031\005\064\006\125\011\151\024\020\025\007" +
    "\027\011\030\055\031\056\040\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\003\003\004\031" +
    "\005\040\006\061\011\014\012\035\013\034\014\024\015" +
    "\013\016\010\017\053\020\043\021\054\024\020\025\007" +
    "\027\011\030\055\031\056\032\052\034\231\035\072\040" +
    "\017\046\025\001\001\000\004\033\234\001\001\000\060" +
    "\003\003\004\031\005\040\006\061\011\014\012\035\013" +
    "\034\014\024\015\013\016\010\017\053\020\043\021\054" +
    "\024\020\025\007\027\011\030\055\031\056\032\052\034" +
    "\245\035\072\040\017\046\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\003\003\004\031\005\040\006" +
    "\061\011\014\012\035\013\034\014\024\015\013\016\010" +
    "\017\053\020\043\021\054\024\020\025\007\027\011\030" +
    "\055\031\056\032\052\034\236\035\072\040\017\046\025" +
    "\001\001\000\002\001\001\000\060\003\003\004\031\005" +
    "\040\006\061\011\014\012\035\013\034\014\024\015\013" +
    "\016\010\017\053\020\043\021\054\024\020\025\007\027" +
    "\011\030\055\031\056\032\052\034\240\035\072\040\017" +
    "\046\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\003\003\004\031\005\040\006\061\011\014\012\035" +
    "\013\034\014\024\015\013\016\010\017\053\020\043\021" +
    "\054\024\020\025\007\027\011\030\055\031\056\032\052" +
    "\034\243\035\072\040\017\046\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\003\003\004\031\005\040\006\061\011\014\012" +
    "\035\013\034\014\024\015\013\016\010\017\053\020\043" +
    "\021\054\024\020\025\007\027\011\030\055\031\056\032" +
    "\052\034\250\035\072\040\017\046\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\003\004\031\005\064" +
    "\006\125\011\014\012\035\013\034\014\024\015\013\016" +
    "\270\024\020\025\007\027\011\030\055\031\056\040\017" +
    "\001\001\000\042\003\003\004\031\005\064\006\125\011" +
    "\014\012\035\013\034\014\024\015\013\016\267\024\020" +
    "\025\007\027\011\030\055\031\056\040\017\001\001\000" +
    "\040\003\003\004\031\005\064\006\125\011\014\012\035" +
    "\013\034\014\024\015\266\024\020\025\007\027\011\030" +
    "\055\031\056\040\017\001\001\000\040\003\003\004\031" +
    "\005\064\006\125\011\014\012\035\013\034\014\024\015" +
    "\265\024\020\025\007\027\011\030\055\031\056\040\017" +
    "\001\001\000\040\003\003\004\031\005\064\006\125\011" +
    "\014\012\035\013\034\014\024\015\264\024\020\025\007" +
    "\027\011\030\055\031\056\040\017\001\001\000\040\003" +
    "\003\004\031\005\064\006\125\011\014\012\035\013\034" +
    "\014\024\015\263\024\020\025\007\027\011\030\055\031" +
    "\056\040\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\274\001\001" +
    "\000\054\003\003\004\031\005\040\006\061\011\014\012" +
    "\035\013\034\014\024\015\013\016\010\017\053\020\043" +
    "\021\054\024\020\025\007\027\011\030\055\031\056\032" +
    "\300\040\017\046\025\001\001\000\002\001\001\000\054" +
    "\003\003\004\031\005\040\006\061\011\014\012\035\013" +
    "\034\014\024\015\013\016\010\017\053\020\043\021\054" +
    "\024\020\025\007\027\011\030\055\031\056\032\276\040" +
    "\017\046\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\301\001\001\000\002\001\001\000\060\003" +
    "\003\004\031\005\040\006\061\011\014\012\035\013\034" +
    "\014\024\015\013\016\010\017\053\020\043\021\054\024" +
    "\020\025\007\027\011\030\055\031\056\032\052\034\311" +
    "\035\072\040\017\046\025\001\001\000\060\003\003\004" +
    "\031\005\040\006\061\011\014\012\035\013\034\014\024" +
    "\015\013\016\010\017\053\020\043\021\054\024\020\025" +
    "\007\027\011\030\055\031\056\032\052\034\304\035\072" +
    "\040\017\046\025\001\001\000\002\001\001\000\060\003" +
    "\003\004\031\005\040\006\061\011\014\012\035\013\034" +
    "\014\024\015\013\016\010\017\053\020\043\021\054\024" +
    "\020\025\007\027\011\030\055\031\056\032\052\034\306" +
    "\035\072\040\017\046\025\001\001\000\002\001\001\000" +
    "\060\003\003\004\031\005\040\006\061\011\014\012\035" +
    "\013\034\014\024\015\013\016\010\017\053\020\043\021" +
    "\054\024\020\025\007\027\011\030\055\031\056\032\052" +
    "\034\310\035\072\040\017\046\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\003\003\004\031\005\040" +
    "\006\061\011\014\012\035\013\034\014\024\015\013\016" +
    "\010\017\053\020\043\021\054\024\020\025\007\027\011" +
    "\030\055\031\056\032\052\034\313\035\072\040\017\046" +
    "\025\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
	public void report_error(String message, Object info) {
		System.err.print(message);
		if (info instanceof MySymbol) {
			MySymbol symbol = (MySymbol)info;
			System.err.print(" : Unexpected Token <" + symbol.token + "> at line " + symbol.left);
		}
		System.err.println();
    }

    public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws Exception {
    	report_fatal_error("Couldn't repair and continue parse", null);
	}
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NonemptyWorldProcessList ::= NonemptyWorldProcessList PERIOD NonemptyProcessList 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList p = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(p); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*NonemptyWorldProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NonemptyWorldProcessList ::= NonemptyWorldProcessList PERIOD Rule 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcRule p = (SrcRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(p); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*NonemptyWorldProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NonemptyWorldProcessList ::= Rule 
            {
              LinkedList RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcRule p = (SrcRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList(); list.add(p); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*NonemptyWorldProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NonemptyWorldProcessList ::= NonemptyProcessList 
            {
              LinkedList RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList p = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*NonemptyWorldProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // WorldProcessList ::= NonemptyWorldProcessList PERIOD 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*WorldProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // WorldProcessList ::= NonemptyWorldProcessList 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*WorldProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // WorldProcessList ::= 
            {
              LinkedList RESULT = null;
		 RESULT = new LinkedList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*WorldProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NonemptyProcessList ::= NonemptyProcessList COMMA Process 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(p); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*NonemptyProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NonemptyProcessList ::= Process 
            {
              LinkedList RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList(); list.add(p); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*NonemptyProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ProcessList ::= NonemptyProcessList COMMA 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*ProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ProcessList ::= NonemptyProcessList 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*ProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ProcessList ::= 
            {
              LinkedList RESULT = null;
		 RESULT = new LinkedList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*ProcessList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Process ::= Aggregate 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcAtom p = (SrcAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*Process*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Process ::= NEGATIVE Atom 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom);
					   RESULT = new SrcAtom(new SrcName("\\+"), list, atomleft, atomright); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*Process*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Process ::= Atom 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*Process*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NonemptyLinkList ::= NonemptyLinkList COMMA Link 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int linkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int linkright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcLink link = (SrcLink)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(link); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*NonemptyLinkList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NonemptyLinkList ::= Link 
            {
              LinkedList RESULT = null;
		int linkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int linkright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcLink link = (SrcLink)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList(); list.add(link); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*NonemptyLinkList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LinkList ::= NonemptyLinkList 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*LinkList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LinkList ::= 
            {
              LinkedList RESULT = null;
		 RESULT = new LinkedList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*LinkList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Aggregate ::= FuncName LPAREN BundleList RPAREN 
            {
              SrcAtom RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SrcName name = (SrcName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SrcAtom(name, list, nameleft, nameright); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*Aggregate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // BundleList ::= BundleList COMMA Bundle 
            {
              LinkedList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bundleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bundleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcLinkBundle bundle = (SrcLinkBundle)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(bundle); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*BundleList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // BundleList ::= Bundle 
            {
              LinkedList RESULT = null;
		int bundleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bundleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcLinkBundle bundle = (SrcLinkBundle)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList(); list.add(bundle); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*BundleList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Bundle ::= ASTERISK LINK_NAME 
            {
              SrcLinkBundle RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcLinkBundle(name); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*Bundle*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Context ::= RuleContext 
            {
              SrcContext RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcRuleContext r = (SrcRuleContext)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = r; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*Context*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Context ::= ProcessContext 
            {
              SrcContext RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcProcessContext p = (SrcProcessContext)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*Context*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // RuleContext ::= RULEVAR AtomName 
            {
              SrcRuleContext RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcRuleContext(name); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*RuleContext*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ProcessContext ::= PROCVAR AtomName LBRACKET LinkList GUARD Bundle RBRACKET 
            {
              SrcProcessContext RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bundleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bundleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SrcLinkBundle bundle = (SrcLinkBundle)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SrcProcessContext pc = new SrcProcessContext(name);
						pc.args = list;
						pc.bundle = bundle;
						RESULT = pc; 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*ProcessContext*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ProcessContext ::= PROCVAR AtomName LBRACKET LinkList RBRACKET 
            {
              SrcProcessContext RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SrcProcessContext pc = new SrcProcessContext(name);
						pc.args = list;
						RESULT = pc; 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*ProcessContext*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ProcessContext ::= PROCVAR AtomName 
            {
              SrcProcessContext RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcProcessContext(name); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*ProcessContext*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ProcessListContinuation ::= BACKSLASH ProcessList RULE ProcessList GUARD ProcessList RPAREN 
            {
              SrcRule RESULT = null;
		int head2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int head2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList head2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int linenoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int linenoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer lineno = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int guardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int guardright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList guard = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList body = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SrcRule(null, null, head2, guard, body, lineno.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*ProcessListContinuation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ProcessListContinuation ::= BACKSLASH ProcessList RULE ProcessList RPAREN 
            {
              SrcRule RESULT = null;
		int head2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int head2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList head2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int linenoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int linenoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer lineno = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList body = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SrcRule(null, null, head2, null, body, lineno.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*ProcessListContinuation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ProcessListContinuation ::= RULE ProcessList GUARD ProcessList RPAREN 
            {
              SrcRule RESULT = null;
		int linenoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int linenoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer lineno = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int guardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int guardright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList guard = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList body = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SrcRule(null, null, guard, body, lineno.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*ProcessListContinuation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ProcessListContinuation ::= RULE ProcessList RPAREN 
            {
              SrcRule RESULT = null;
		int linenoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int linenoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer lineno = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList body = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SrcRule(null, null, body, lineno.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*ProcessListContinuation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ProcessListContinuation ::= RPAREN 
            {
              SrcRule RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*ProcessListContinuation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Rule ::= RuleName RULENAMESEP ProcessList BACKSLASH ProcessList RULE ProcessList GUARD ProcessList 
            {
              SrcRule RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int headleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList head = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int head2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int head2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList head2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int linenoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int linenoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer lineno = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int guardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int guardright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList guard = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList body = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcRule(name, head, head2, guard, body, lineno.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Rule ::= ProcessList BACKSLASH ProcessList RULE ProcessList GUARD ProcessList 
            {
              SrcRule RESULT = null;
		int headleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList head = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int head2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int head2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList head2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int linenoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int linenoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer lineno = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int guardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int guardright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList guard = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList body = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcRule(null, head, head2, guard, body, lineno.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Rule ::= RuleName RULENAMESEP ProcessList BACKSLASH ProcessList RULE ProcessList 
            {
              SrcRule RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int headleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList head = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int head2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int head2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList head2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int linenoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int linenoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer lineno = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList body = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcRule(name, head, head2, null, body, lineno.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Rule ::= ProcessList BACKSLASH ProcessList RULE ProcessList 
            {
              SrcRule RESULT = null;
		int headleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList head = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int head2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int head2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList head2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int linenoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int linenoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer lineno = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList body = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcRule(null, head, head2, null, body, lineno.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Rule ::= RuleName RULENAMESEP ProcessList RULE ProcessList GUARD ProcessList 
            {
              SrcRule RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int headleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList head = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int linenoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int linenoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer lineno = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int guardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int guardright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList guard = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList body = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcRule(name, head, guard, body, lineno.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Rule ::= ProcessList RULE ProcessList GUARD ProcessList 
            {
              SrcRule RESULT = null;
		int headleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList head = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int linenoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int linenoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer lineno = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int guardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int guardright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList guard = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList body = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcRule(null, head, guard, body, lineno.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Rule ::= RuleName RULENAMESEP ProcessList RULE ProcessList 
            {
              SrcRule RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int headleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList head = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int linenoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int linenoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer lineno = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList body = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcRule(name, head, body, lineno.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Rule ::= ProcessList RULE ProcessList 
            {
              SrcRule RESULT = null;
		int headleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList head = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int linenoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int linenoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer lineno = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList body = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcRule(null, head, body, lineno.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // UnnamedMembrane ::= LBRACE WorldProcessList RBRACE_ASTERISK 
            {
              SrcMembrane RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SrcMembrane sMem = new SrcMembrane(list);
						sMem.kind = runtime.Membrane.KIND_ND;
						RESULT = sMem; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*UnnamedMembrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // UnnamedMembrane ::= LBRACE WorldProcessList RBRACE_UNDERBAR_AT UnitAtom 
            {
              SrcMembrane RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 SrcMembrane sMem = new SrcMembrane(list);
					   sMem.kind = 1;
					   sMem.pragma = atom;
					   RESULT = sMem; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*UnnamedMembrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // UnnamedMembrane ::= LBRACE WorldProcessList RBRACE_UNDERBAR_SLASH_AT UnitAtom 
            {
              SrcMembrane RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 SrcMembrane sMem = new SrcMembrane(list);
					   sMem.stable = true;
					   sMem.kind = 1;
					   sMem.pragma = atom;
					   RESULT = sMem; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*UnnamedMembrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // UnnamedMembrane ::= LBRACE WorldProcessList RBRACE_UNDERBAR 
            {
              SrcMembrane RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SrcMembrane sMem = new SrcMembrane(list);
					   sMem.kind = 1;
					   RESULT = sMem; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*UnnamedMembrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // UnnamedMembrane ::= LBRACE WorldProcessList RBRACE_UNDERBAR_SLASH 
            {
              SrcMembrane RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SrcMembrane sMem = new SrcMembrane(list);
					   sMem.stable = true;
					   sMem.kind = 1;
					   RESULT = sMem; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*UnnamedMembrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // UnnamedMembrane ::= LBRACE WorldProcessList RBRACE_AT UnitAtom 
            {
              SrcMembrane RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 SrcMembrane sMem = new SrcMembrane(list);
					   sMem.pragma = atom;
					   RESULT = sMem; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*UnnamedMembrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // UnnamedMembrane ::= LBRACE WorldProcessList RBRACE_SLASH_AT UnitAtom 
            {
              SrcMembrane RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 SrcMembrane sMem = new SrcMembrane(list);
					   sMem.stable = true;
					   sMem.pragma = atom;
					   RESULT = sMem; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*UnnamedMembrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // UnnamedMembrane ::= LBRACE WorldProcessList RBRACE 
            {
              SrcMembrane RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SrcMembrane(list); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*UnnamedMembrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // UnnamedMembrane ::= LBRACE WorldProcessList RBRACE_SLASH 
            {
              SrcMembrane RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SrcMembrane sMem = new SrcMembrane(list);
					   sMem.stable = true;
					   RESULT = sMem; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*UnnamedMembrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Membrane ::= AtomName UnnamedMembrane 
            {
              SrcMembrane RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int memleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int memright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcMembrane mem = (SrcMembrane)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 mem.name = name; RESULT = mem; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Membrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Membrane ::= UnnamedMembrane 
            {
              SrcMembrane RESULT = null;
		int memleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int memright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcMembrane mem = (SrcMembrane)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = mem; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Membrane*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // AtomListRest ::= COMMA Atom AtomListRest 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int atomlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atomlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
                       list.add(atom); list.add(atomlist);
                       RESULT = new SrcAtom(",", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*AtomListRest*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // AtomListRest ::= RPAREN 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*AtomListRest*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // AtomList ::= Atom AtomList 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int atomlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atomlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 if (atomlist == null) { RESULT = atom; }
					   else {
					     LinkedList list = new LinkedList();
                         list.add(atom); list.add(atomlist);
                         RESULT = new SrcAtom(",", list);
                       } 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*AtomList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ListCdr ::= 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("[]"); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*ListCdr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ListCdr ::= COMMA Process ListCdr 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cdrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cdrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object cdr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
                       list.add(atom); list.add(cdr);
                       RESULT = new SrcAtom(".", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*ListCdr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ListCdr ::= GUARD Process 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom;  
              CUP$parser$result = new java_cup.runtime.Symbol(31/*ListCdr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // List ::= LBRACKET Process ListCdr RBRACKET 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cdrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cdrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cdr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 LinkedList list = new LinkedList();
                       list.add(atom); list.add(cdr);
                       RESULT = new SrcAtom(".", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*List*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // List ::= LBRACKET RBRACKET 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("[]"); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*List*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // QuotedOperatorAtom ::= ASTERISK_ASTERISK 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("**");	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // QuotedOperatorAtom ::= COLON 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom(":");	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // QuotedOperatorAtom ::= TILDE 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("~");	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // QuotedOperatorAtom ::= HAT 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("^");	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // QuotedOperatorAtom ::= HL 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcAtom(op);	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // QuotedOperatorAtom ::= RELOP 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcAtom(op);	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // QuotedOperatorAtom ::= SLASH_DOT 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("/.");	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // QuotedOperatorAtom ::= ASTERISK_DOT 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("*.");	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // QuotedOperatorAtom ::= MINUS_DOT 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("-.");	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // QuotedOperatorAtom ::= PLUS_DOT 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("+.");	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // QuotedOperatorAtom ::= SLASH 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("/");	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // QuotedOperatorAtom ::= ASTERISK 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("*");	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // QuotedOperatorAtom ::= EXCLA 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("!");	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // QuotedOperatorAtom ::= MINUS 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("-");	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // QuotedOperatorAtom ::= PLUS 
            {
              Object RESULT = null;
		 RESULT = new SrcAtom("+");	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*QuotedOperatorAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Atom ::= Atom800 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Atom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Atom800 ::= AtomName COLON Atom800 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(new SrcAtom(new SrcName(name))); list.add(atom);
					   RESULT = new SrcAtom(":", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Atom800*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Atom800 ::= Atom700 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Atom800*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Atom700 ::= Atom500 RELOP Atom500 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom(op, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Atom700*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Atom700 ::= Atom500 HL Atom500 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom(op, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Atom700*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Atom700 ::= Atom500 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Atom700*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Atom500 ::= Atom500 PLUS Atom400 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("+", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Atom500*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Atom500 ::= Atom500 MINUS Atom400 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("-", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Atom500*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Atom500 ::= Atom500 PLUS_DOT Atom400 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("+.", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Atom500*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Atom500 ::= Atom500 MINUS_DOT Atom400 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("-.", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Atom500*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Atom500 ::= Atom400 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Atom500*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Atom400 ::= Atom400 SLASH Atom300 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("/", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Atom400*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Atom400 ::= Atom400 ASTERISK Atom300 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("*", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Atom400*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Atom400 ::= Atom400 SLASH_DOT Atom300 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("/.", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Atom400*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Atom400 ::= Atom400 ASTERISK_DOT Atom300 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("*.", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Atom400*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Atom400 ::= Atom300 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Atom400*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Atom300 ::= Atom300 ASTERISK_ASTERISK Atom200 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("**", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Atom300*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Atom300 ::= Atom200 MOD Atom200 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("mod", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Atom300*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Atom300 ::= Atom200 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Atom300*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Atom200 ::= Atom200 HAT UnaryOpAtom 
            {
              Object RESULT = null;
		int atom1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atom1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object atom1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atom2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atom2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom1); list.add(atom2);
					   RESULT = new SrcAtom("^", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Atom200*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Atom200 ::= UnaryOpAtom 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Atom200*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // UnaryOpAtom ::= MINUS_DOT UnitAtom 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom);
					   RESULT = new SrcAtom("-.", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*UnaryOpAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // UnaryOpAtom ::= PLUS_DOT UnitAtom 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom);
					   RESULT = new SrcAtom("+.", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*UnaryOpAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // UnaryOpAtom ::= MINUS UnitAtom 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom);
					   RESULT = new SrcAtom("-", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*UnaryOpAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // UnaryOpAtom ::= PLUS UnitAtom 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList list = new LinkedList();
					   list.add(atom);
					   RESULT = new SrcAtom("+", list); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*UnaryOpAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // UnaryOpAtom ::= UnitAtom 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*UnaryOpAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // UnitAtom ::= Membrane 
            {
              Object RESULT = null;
		int memleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int memright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcMembrane mem = (SrcMembrane)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = mem; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // UnitAtom ::= HyperLink 
            {
              Object RESULT = null;
		int linkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int linkright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcHyperLink link = (SrcHyperLink)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = link; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // UnitAtom ::= Link 
            {
              Object RESULT = null;
		int linkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int linkright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcLink link = (SrcLink)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = link; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // UnitAtom ::= Context 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcContext p = (SrcContext)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // UnitAtom ::= LPAREN QuotedOperatorAtom RPAREN 
            {
              Object RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = atom; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // UnitAtom ::= LPAREN ProcessList ProcessListContinuation 
            {
              Object RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ruleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ruleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcRule rule = (SrcRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 if (rule == null) {
					     if (list.size() == 1) {
					     	RESULT = list.getFirst();
					     }
					     else {
					     	RESULT = list;
					     }
					   }
					   else {
						 rule.setHead(list);
						 RESULT = rule;
					   } 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // UnitAtom ::= LPAREN RuleName RULENAMESEP ProcessList ProcessListContinuation 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ruleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ruleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcRule rule = (SrcRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 rule.name = name;
					   if (rule == null) {
					     if (list.size() == 1) {
					     	RESULT = list.getFirst();
					     }
					     else {
					     	RESULT = list;
					     }
					   }
					   else {
						 rule.setHead(list);
						 RESULT = rule;
					   } 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // UnitAtom ::= List 
            {
              Object RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // UnitAtom ::= FuncName LPAREN ProcessList RPAREN 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SrcName name = (SrcName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList list = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SrcAtom(name, list, nameleft, nameright); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // UnitAtom ::= FuncName 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SrcName name = (SrcName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcAtom(name, nameleft, nameright); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // UnitAtom ::= CHAR_CODE_LITERAL 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcAtom(new SrcName(""+(int)name.charAt(2)), nameleft, nameright); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // UnitAtom ::= NUMBER_NAME 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcAtom(new SrcName(name), nameleft, nameright); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*UnitAtom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // RuleName ::= LINK_NAME 
            {
              String RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = name.toString(); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*RuleName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RuleName ::= ATOM_NAME 
            {
              String RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = name.toString(); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*RuleName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // AtomName ::= MOD 
            {
              String RESULT = null;
		 RESULT = "mod"; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*AtomName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // AtomName ::= ATOM_NAME 
            {
              String RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = name.toString(); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*AtomName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FuncName ::= PATHED_ATOM_NAME 
            {
              SrcName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcName(name, SrcName.PATHED); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*FuncName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FuncName ::= STRING 
            {
              SrcName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcName(name, SrcName.STRING); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*FuncName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FuncName ::= SYMBOL_NAME 
            {
              SrcName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcName(name.replaceAll("^'|'$","").replaceAll("''","'"),
											SrcName.SYMBOL); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*FuncName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FuncName ::= QUOTED_STRING 
            {
              SrcName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcName(name.toString(), SrcName.QUOTED); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*FuncName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FuncName ::= MOD 
            {
              SrcName RESULT = null;
		 RESULT = new SrcName("mod"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*FuncName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FuncName ::= ATOM_NAME 
            {
              SrcName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcName(name); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*FuncName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // HyperLink ::= EXCLA LINK_NAME 
            {
              SrcHyperLink RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcHyperLink(name.toString(), -1); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*HyperLink*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Link ::= LINK_NAME 
            {
              SrcLink RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SrcLink(name.toString(), nameleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Link*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= WorldProcessList EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList start_val = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

