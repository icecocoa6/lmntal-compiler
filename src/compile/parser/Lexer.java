/* The following code was generated by JFlex 1.4_5 on 05/11/09 22:29 */

/**
	This is LMNtal Lex file.
*/

/* --------------------------Usercode Section------------------------ */
package compile.parser;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4_5
 * on 05/11/09 22:29 from the specification file
 * <tt>C:/workspace/devel/src/compile/parser/lmntal.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int YY_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int QUOTED = 1;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 3;

  /** 
   * Translates characters to character classes
   */
  private static final String yycmap_packed = 
    "\11\0\1\11\1\2\1\0\1\3\1\1\22\0\1\11\1\22\1\17"+
    "\1\16\1\45\1\31\1\0\1\20\1\34\1\35\1\32\1\15\1\33"+
    "\1\41\1\13\1\30\12\12\1\24\1\0\1\26\1\21\1\27\1\25"+
    "\1\40\2\4\1\4\1\4\1\14\25\4\1\46\1\23\1\47\1\43"+
    "\1\4\1\0\1\5\1\5\1\5\1\52\1\10\1\54\1\5\1\5"+
    "\4\5\1\50\1\53\1\51\2\5\1\6\1\5\1\7\6\5\1\36"+
    "\1\42\1\37\1\44\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] YY_ACTION = yy_unpack_YY_ACTION();

  private static final String YY_ACTION_packed0 =
    "\3\0\1\1\1\2\2\3\1\4\2\5\1\6\1\7"+
    "\1\3\1\10\1\2\1\11\2\2\1\12\3\11\1\13"+
    "\1\3\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\5"+
    "\3\32\1\33\1\32\3\1\3\0\1\34\1\35\1\3"+
    "\3\0\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\5\1\51\1\0\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\1\1\60\1\1"+
    "\1\61\1\34\1\0\3\3\1\62\1\63\1\64\2\65";

  private static int [] yy_unpack_YY_ACTION() {
    int [] result = new int[90];
    int offset = 0;
    offset = yy_unpack_YY_ACTION(YY_ACTION_packed0, offset, result);
    return result;
  }

  private static int yy_unpack_YY_ACTION(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] yy_rowMap = yy_unpack_yy_rowMap();

  private static final String yy_rowMap_packed0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\264\0\u010e"+
    "\0\u013b\0\u0168\0\u0195\0\u01c2\0\u01ef\0\264\0\u021c\0\u0249"+
    "\0\u0276\0\u02a3\0\u02d0\0\264\0\u02fd\0\u032a\0\u0357\0\u0384"+
    "\0\u03b1\0\264\0\264\0\264\0\264\0\u03de\0\u040b\0\u0438"+
    "\0\264\0\264\0\264\0\264\0\u0465\0\264\0\u0492\0\264"+
    "\0\u04bf\0\u04ec\0\264\0\u0519\0\u0546\0\264\0\u0573\0\u05a0"+
    "\0\u05cd\0\u0195\0\u05fa\0\264\0\u0627\0\u0654\0\u0681\0\u06ae"+
    "\0\264\0\264\0\264\0\264\0\264\0\264\0\u06db\0\264"+
    "\0\264\0\264\0\264\0\u0708\0\264\0\341\0\264\0\264"+
    "\0\264\0\264\0\264\0\264\0\u0735\0\264\0\u0762\0\u078f"+
    "\0\u07bc\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0681\0\264\0\u013b"+
    "\0\u0384\0\264";

  private static int [] yy_unpack_yy_rowMap() {
    int [] result = new int[90];
    int offset = 0;
    offset = yy_unpack_yy_rowMap(yy_rowMap_packed0, offset, result);
    return result;
  }

  private static int yy_unpack_yy_rowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = ((int) packed.charAt(i++)) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] yytrans = yy_unpack_yytrans();

  private static final String yytrans_packed0 =
    "\1\5\1\6\2\7\1\10\4\11\1\7\1\12\1\13"+
    "\1\10\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\4\11\1\50\1\51"+
    "\22\50\1\52\31\50\1\6\2\7\13\50\1\53\3\50"+
    "\1\54\31\50\2\55\1\56\27\55\1\57\22\55\57\0"+
    "\1\7\56\0\5\10\1\0\1\10\1\0\1\10\33\0"+
    "\5\10\4\0\5\11\1\0\1\11\1\60\1\11\33\0"+
    "\5\11\10\0\1\61\1\0\1\12\1\62\1\61\52\0"+
    "\1\63\55\0\1\64\41\0\1\30\1\6\2\7\13\30"+
    "\1\65\35\30\1\66\2\0\15\66\1\67\34\66\21\0"+
    "\1\24\1\0\2\70\1\0\1\25\47\0\1\24\50\0"+
    "\1\71\3\0\1\24\57\0\1\24\14\0\1\72\26\0"+
    "\1\24\54\0\1\24\5\0\1\25\46\0\1\73\14\0"+
    "\1\30\1\0\1\74\22\0\1\30\1\6\2\7\51\30"+
    "\13\0\1\75\16\0\1\76\52\0\1\77\7\0\1\100"+
    "\54\0\1\101\27\0\1\102\65\0\1\103\34\0\5\11"+
    "\1\0\1\11\1\60\1\11\33\0\1\11\1\104\3\11"+
    "\2\0\1\50\121\0\1\105\6\0\1\106\1\7\3\0"+
    "\1\107\1\110\7\0\1\111\3\0\1\112\27\0\1\113"+
    "\1\114\2\55\1\56\27\55\1\0\22\55\2\115\1\56"+
    "\25\115\1\116\1\115\1\117\22\115\5\0\4\120\1\0"+
    "\1\120\35\0\5\120\12\0\1\121\2\0\1\122\23\0"+
    "\1\122\23\0\1\61\1\0\1\63\1\0\1\61\40\0"+
    "\1\123\1\124\1\7\1\125\51\123\1\66\2\0\15\66"+
    "\1\126\34\66\20\0\1\66\55\0\1\25\73\0\1\127"+
    "\20\0\5\11\1\0\1\11\1\60\1\11\33\0\2\11"+
    "\1\130\2\11\2\115\1\56\25\115\1\0\1\115\1\0"+
    "\24\115\1\56\25\115\1\0\1\115\1\117\22\115\4\0"+
    "\5\120\1\0\1\120\1\0\1\120\33\0\5\120\12\0"+
    "\1\121\42\0\1\30\1\6\2\7\13\30\1\131\35\30"+
    "\2\0\1\7\14\0\1\132\54\0\1\132\35\0";

  private static int [] yy_unpack_yytrans() {
    int [] result = new int[2160];
    int offset = 0;
    offset = yy_unpack_yytrans(yytrans_packed0, offset, result);
    return result;
  }

  private static int yy_unpack_yytrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int YY_UNKNOWN_ERROR = 0;
  private static final int YY_NO_MATCH = 1;
  private static final int YY_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] YY_ATTRIBUTE = yy_unpack_YY_ATTRIBUTE();

  private static final String YY_ATTRIBUTE_packed0 =
    "\3\0\1\1\1\11\1\1\1\11\6\1\1\11\5\1"+
    "\1\11\5\1\4\11\3\1\4\11\1\1\1\11\1\1"+
    "\1\11\2\1\1\11\2\1\1\11\1\1\3\0\1\1"+
    "\1\11\1\1\3\0\6\11\1\1\4\11\1\1\1\11"+
    "\1\0\6\11\1\1\1\11\3\1\1\0\4\1\1\11"+
    "\2\1\1\11";

  private static int [] yy_unpack_YY_ATTRIBUTE() {
    int [] result = new int[90];
    int offset = 0;
    offset = yy_unpack_YY_ATTRIBUTE(YY_ATTRIBUTE_packed0, offset, result);
    return result;
  }

  private static int yy_unpack_YY_ATTRIBUTE(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	private final boolean _DEBUG = true;
	StringBuffer string = new StringBuffer();

    /* To create a new java_cup.runtime.Symbol with information about
       the current token, the token will have no value in this
       case. */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    /* Also creates a new java_cup.runtime.Symbol with information
       about the current token, but this object has a value. */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 128) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) throws java.io.IOException {
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    int [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_currentPos_l = yy_currentPos = yy_startRead = yy_markedPos_l;
  
      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {
    
          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action < 0 ? yy_action : YY_ACTION[yy_action]) {
        case 20: 
          { return symbol(sym.GUARD); }
        case 54: break;
        case 53: 
          { return symbol(sym.CHAR_CODE_LITERAL,	yytext()); }
        case 55: break;
        case 39: 
          { return symbol(sym.MINUS_DOT); }
        case 56: break;
        case 27: 
          { yybegin(YYINITIAL); return symbol(sym.STRING, string.toString()); }
        case 57: break;
        case 15: 
          { return symbol(sym.RPAREN); }
        case 58: break;
        case 29: 
          { return symbol(sym.PLUS_DOT); }
        case 59: break;
        case 30: 
          { return symbol(sym.NEGATIVE); }
        case 60: break;
        case 40: 
          { string.setLength(0); yybegin(QUOTED); }
        case 61: break;
        case 21: 
          { return symbol(sym.HAT); }
        case 62: break;
        case 43: 
          { string.append("\t"); }
        case 63: break;
        case 16: 
          { return symbol(sym.LBRACE); }
        case 64: break;
        case 8: 
          { string.setLength(0); yybegin(STRING); }
        case 65: break;
        case 2: 
          { throw new Error("Illegal character <"+yytext()+"> at line "+yyline); }
        case 66: break;
        case 24: 
          { return symbol(sym.LBRACKET); }
        case 67: break;
        case 51: 
          { return symbol(sym.RBRACE_SLASH_AT); }
        case 68: break;
        case 23: 
          { return symbol(sym.PROCVAR); }
        case 69: break;
        case 45: 
          { string.append("\\"); }
        case 70: break;
        case 37: 
          { return symbol(sym.RBRACE_AT); }
        case 71: break;
        case 50: 
          { return symbol(sym.SYMBOL_NAME,		yytext()); }
        case 72: break;
        case 42: 
          { string.append("\r"); }
        case 73: break;
        case 11: 
          { return symbol(sym.SLASH); }
        case 74: break;
        case 48: 
          { yybegin(YYINITIAL); }
        case 75: break;
        case 18: 
          { return symbol(sym.RULEVAR); }
        case 76: break;
        case 7: 
          { return symbol(sym.PLUS); }
        case 77: break;
        case 52: 
          { return symbol(sym.MOD); }
        case 78: break;
        case 6: 
          { return symbol(sym.PERIOD); }
        case 79: break;
        case 36: 
          { return symbol(sym.RBRACE_SLASH); }
        case 80: break;
        case 47: 
          { string.append("\f"); }
        case 81: break;
        case 12: 
          { return symbol(sym.ASTERISK); }
        case 82: break;
        case 49: 
          { return symbol(sym.PATHED_ATOM_NAME,	yytext()); }
        case 83: break;
        case 33: 
          { yybegin(COMMENT); }
        case 84: break;
        case 25: 
          { return symbol(sym.RBRACKET); }
        case 85: break;
        case 44: 
          { string.append("\""); }
        case 86: break;
        case 10: 
          { return symbol(sym.COLON); }
        case 87: break;
        case 34: 
          { return symbol(sym.ASTERISK_DOT); }
        case 88: break;
        case 32: 
          { return symbol(sym.SLASH_DOT); }
        case 89: break;
        case 35: 
          { return symbol(sym.ASTERISK_ASTERISK); }
        case 90: break;
        case 14: 
          { return symbol(sym.LPAREN); }
        case 91: break;
        case 17: 
          { return symbol(sym.RBRACE); }
        case 92: break;
        case 28: 
          { return symbol(sym.NUMBER_NAME,		yytext()); }
        case 93: break;
        case 9: 
          { return symbol(sym.RELOP, yytext()); }
        case 94: break;
        case 3: 
          { /* just skip */ }
        case 95: break;
        case 46: 
          { string.append("\n"); }
        case 96: break;
        case 19: 
          { return symbol(sym.MINUS); }
        case 97: break;
        case 41: 
          { yybegin(YYINITIAL); return symbol(sym.QUOTED_STRING, string.toString()); }
        case 98: break;
        case 38: 
          { return symbol(sym.RULENAMESEP); }
        case 99: break;
        case 31: 
          { return symbol(sym.RULE); }
        case 100: break;
        case 5: 
          { return symbol(sym.ATOM_NAME,			yytext()); }
        case 101: break;
        case 13: 
          { return symbol(sym.COMMA); }
        case 102: break;
        case 4: 
          { return symbol(sym.LINK_NAME,			yytext()); }
        case 103: break;
        case 26: 
          { string.append( yytext() ); }
        case 104: break;
        case 22: 
          { return symbol(sym.TILDE); }
        case 105: break;
        case 1: 
          {  }
        case 106: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
            switch (yy_lexical_state) {
            case COMMENT:
              { throw new Error("EOF in comment"); }
            case 91: break;
            default:
              { return new java_cup.runtime.Symbol(sym.EOF); }
            }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
