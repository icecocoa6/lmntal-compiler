{
module(message).

MIDDLE=[IT|OUTSIDE], {message.input(MIDDLE,INSIDE),$p[INSIDE|*Z],@p} :-
	unary(IT) |
    {message.input(OUTSIDE,X), INSIDE=[IT|X], $p[INSIDE|*Z],@p}.

{message.output(OUTSIDE,MIDDLE), MIDDLE=[IT|INSIDE], $p[INSIDE|*Z],@p} :-
	unary(IT) |
    OUTSIDE=[IT|MIDDLE], {message.output(MIDDLE,INSIDE), $p[INSIDE|*Z],@p}.

}.

message.use.
I=[1,2,3 | message.close].

{
  II=message.input(I).
  {
    i=message.input(II).
    i=[CAR|INPUT],OUTPUT=o :- int(CAR) | i=INPUT, OUTPUT=[CAR*3|o].
    o=message.output(OO).
  }.
  OO=message.output(M).
}.

{
  i=message.input(M).
  i=[CAR|INPUT],OUTPUT=o :- int(CAR) | i=INPUT, OUTPUT=[CAR+1|o].
  o=message.output(O).
}.

r=O.
