・同一変数でのnewlink
削除に伴う処理
次のループでgetlinkしている→inheritlinkをnewlinkに変更、getlinkは削除
次のループでderefしている→変数置き換え

・同一変数でのinheritlink
削除に伴う処理
次のループでgetlinkしている→inheritlinkの第３引数を、着目しているinheritlinkの第3引数に置き換える
次のループでderefしている→対応するgetlinkの引数に対するdereflinkに置き換える。



0

spec [3, 0]
findatom [1, 0, append_3]
deref [2, 1, 0, 2]
func [2, cons_3]
react [... , [0], [1,2,3]]

spec [3, 9]
getlink [7, 2, 1]
getlink [6, 1, 2]
newlink [2, 1, 1, 2, 0]
inheritlink [2, 2, 6, 0]
inheritlink [1, 0, 7, 0]
proceed []


1複製、変数番号変更

findatom [1, 0, append_3]
deref [2, 1, 0, 2]
func [2, cons_3]
getlink [7, 2, 1]
getlink [6, 1, 2]
newlink [2, 1, 1, 2, 0]
inheritlink [2, 2, 6, 0]
inheritlink [1, 0, 7, 0]

loop [] [
	deref [2', 1, 0, 2]
	func [2', cons_3]
	getlink [7', 2', 1]
	getlink [6', 1, 2]
	newlink [2', 1, 1, 2, 0]
	inheritlink [2', 2, 6', 0]
	inheritlink [1, 0, 7', 0]
	proceed []
]
proceed []

2不要な検査・リンク取得を除去


findatom [1, 0, append_3]
deref [2, 1, 0, 2]
func [2, cons_3]
getlink [7, 2, 1]
getlink [6, 1, 2]
newlink [2, 1, 1, 2, 0]
inheritlink [2, 2, 6, 0]
inheritlink [1, 0, 7, 0]

loop [] [
	deref [2', 1, 0, 2]
	func [2', cons_3]
	getlink [7', 2', 1]
	getlink [6', 1, 2]
	newlink [2', 1, 1, 2, 0]
	inheritlink [2', 2, 6', 0]
	inheritlink [1, 0, 7', 0]
	proceed []
]
proceed []

3同一変数に対するnewlinkの移動

findatom [1, 0, append_3]
deref [2, 1, 0, 2]
func [2, cons_3]
getlink [7, 2, 1]
getlink [6, 1, 2]
inheritlink [2, 2, 6, 0]
inheritlink [1, 0, 7, 0]

loop [] [
	deref [2', 1, 0, 2]
	func [2', cons_3]
	getlink [7', 2', 1]
	newlink [2', 2, 2, 1, 0]
	inheritlink [1, 0, 7', 0]
	proceed []
]
newlink [2, 1, 1, 2, 0]
proceed []


4同一変数に対するinheritlinkの移動

findatom [1, 0, append_3]
deref [2, 1, 0, 2]
func [2, cons_3]
getlink [7, 2, 1]
getlink [6, 1, 2]
inheritlink [2, 2, 6, 0]

loop [] [
	dereflink [2', 7, 2]
	func [2', cons_3]
	getlink [7', 2', 1]
	newlink [2', 2, 2, 1, 0]
	proceed []
]
newlink [2, 1, 1, 2, 0]
inheritlink [1, 0, 7, 0]
proceed []


5冗長なリンクつなぎ替えの除去

findatom [1, 0, append_3]
deref [2, 1, 0, 2]
func [2, cons_3]
getlink [7, 2, 1]
getlink [6, 1, 2]
inheritlink [2, 2, 6, 0]

loop [] [
	dereflink [2', 7, 2]
	func [2', cons_3]
	getlink [7', 2', 1]
	proceed []
]
newlink [2, 1, 1, 2, 0]
inheritlink [1, 0, 7, 0]
proceed []

(6冗長なgetlink/dereflinkの移動)これは高速化にならない可能性大

findatom [1, 0, append_3]
deref [2, 1, 0, 2]
func [2, cons_3]
getlink [7, 2, 1]
getlink [6, 1, 2]
inheritlink [2, 2, 6, 0]

loop [] [
	deref [2', 2, 1, 2]
	func [2', cons_3]
	proceed [2']
]
getlink [7, 2, 1]
newlink [2, 1, 1, 2, 0]
inheritlink [1, 0, 7, 0]
proceed []

※理想
findatom	1, 0, append
deref		2, 1, 0, 2
func		   2, cons
relink		   2, 2, 1, 2
loop [
	deref	2', 2, 1, 2
	func	    2', cons
	next [2']
]
relink		   1, 2, 2, 1
newlink		   1, 0, 2, 1
proceed []

 a-b-b :- b-a-b

0
spec [4, 0]
findatom [1, 0, a_2]
deref [2, 1, 0, 1]
func [2, b_2]
deref [3, 2, 0, 0]
func [3, b_2]

spec [4, 9]
getlink [7, 1, 1]
getlink [8, 3, 1]
dequeueatom [1]
dequeueatom [2]
dequeueatom [3]
inheritlink [2, 0, 7, 0]
newlink [2, 1, 1, 1, 0]
newlink [1, 0, 3, 1, 0]
inheritlink [3, 0, 8, 0]
enqueueatom [2]
enqueueatom [1]
enqueueatom [3]
proceed []

1

spec [4, 0]
findatom [1, 0, a_2]
deref [2, 1, 0, 1]
func [2, b_2]
deref [3, 2, 0, 0]
func [3, b_2]

spec [4, 9]
getlink [7, 1, 1]
getlink [8, 3, 1]
dequeueatom [1]
dequeueatom [2]
dequeueatom [3]
inheritlink [2, 0, 7, 0]
newlink [2, 1, 1, 1, 0]
newlink [1, 0, 3, 1, 0]
inheritlink [3, 0, 8, 0]
enqueueatom [2]
enqueueatom [1]
enqueueatom [3]
loop [
	func [3, b_2]
	deref [3', 3, 0, 0]
	func [3', b_2]

	getlink [7, 1, 1]
	getlink [8, 3', 1]
	dequeueatom [1]
	dequeueatom [3]
	dequeueatom [3']
	inheritlink [3, 0, 7, 0]
	newlink [3, 1, 1, 1, 0]
	newlink [1, 0, 3', 1, 0]
	inheritlink [3', 0, 8, 0]
	enqueueatom [3]
	enqueueatom [1]
	enqueueatom [3']
	next [1,_,3']
]
proceed []
